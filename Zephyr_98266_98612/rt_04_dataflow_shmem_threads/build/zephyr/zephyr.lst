
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 27 00 20 c9 39 00 00 bf 92 00 00 9d 39 00 00     .'. .9.......9..
  10:	9d 39 00 00 9d 39 00 00 9d 39 00 00 00 00 00 00     .9...9...9......
	...
  2c:	79 32 00 00 9d 39 00 00 00 00 00 00 25 32 00 00     y2...9......%2..
  3c:	9d 39 00 00                                         .9..

00000040 <_irq_vector_table>:
  40:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  50:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  60:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  70:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  80:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  90:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  a0:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  b0:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  c0:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  d0:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  e0:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..
  f0:	29 33 00 00 29 33 00 00 29 33 00 00 29 33 00 00     )3..)3..)3..)3..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0x1c>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x25>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x74>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <__data_size+0xa>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x42>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x82>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x62>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x82>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x70>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x82>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_frsub>:
     268:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__addsf3>
     26e:	bf00      	nop

00000270 <__aeabi_fsub>:
     270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000274 <__addsf3>:
     274:	0042      	lsls	r2, r0, #1
     276:	bf1f      	itttt	ne
     278:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     27c:	ea92 0f03 	teqne	r2, r3
     280:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     284:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     288:	d06a      	beq.n	360 <__addsf3+0xec>
     28a:	ea4f 6212 	mov.w	r2, r2, lsr #24
     28e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     292:	bfc1      	itttt	gt
     294:	18d2      	addgt	r2, r2, r3
     296:	4041      	eorgt	r1, r0
     298:	4048      	eorgt	r0, r1
     29a:	4041      	eorgt	r1, r0
     29c:	bfb8      	it	lt
     29e:	425b      	neglt	r3, r3
     2a0:	2b19      	cmp	r3, #25
     2a2:	bf88      	it	hi
     2a4:	4770      	bxhi	lr
     2a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     2aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     2ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     2b2:	bf18      	it	ne
     2b4:	4240      	negne	r0, r0
     2b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     2be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     2c2:	bf18      	it	ne
     2c4:	4249      	negne	r1, r1
     2c6:	ea92 0f03 	teq	r2, r3
     2ca:	d03f      	beq.n	34c <__addsf3+0xd8>
     2cc:	f1a2 0201 	sub.w	r2, r2, #1
     2d0:	fa41 fc03 	asr.w	ip, r1, r3
     2d4:	eb10 000c 	adds.w	r0, r0, ip
     2d8:	f1c3 0320 	rsb	r3, r3, #32
     2dc:	fa01 f103 	lsl.w	r1, r1, r3
     2e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     2e4:	d502      	bpl.n	2ec <__addsf3+0x78>
     2e6:	4249      	negs	r1, r1
     2e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     2ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     2f0:	d313      	bcc.n	31a <__addsf3+0xa6>
     2f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     2f6:	d306      	bcc.n	306 <__addsf3+0x92>
     2f8:	0840      	lsrs	r0, r0, #1
     2fa:	ea4f 0131 	mov.w	r1, r1, rrx
     2fe:	f102 0201 	add.w	r2, r2, #1
     302:	2afe      	cmp	r2, #254	; 0xfe
     304:	d251      	bcs.n	3aa <__addsf3+0x136>
     306:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     30a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     30e:	bf08      	it	eq
     310:	f020 0001 	biceq.w	r0, r0, #1
     314:	ea40 0003 	orr.w	r0, r0, r3
     318:	4770      	bx	lr
     31a:	0049      	lsls	r1, r1, #1
     31c:	eb40 0000 	adc.w	r0, r0, r0
     320:	3a01      	subs	r2, #1
     322:	bf28      	it	cs
     324:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     328:	d2ed      	bcs.n	306 <__addsf3+0x92>
     32a:	fab0 fc80 	clz	ip, r0
     32e:	f1ac 0c08 	sub.w	ip, ip, #8
     332:	ebb2 020c 	subs.w	r2, r2, ip
     336:	fa00 f00c 	lsl.w	r0, r0, ip
     33a:	bfaa      	itet	ge
     33c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     340:	4252      	neglt	r2, r2
     342:	4318      	orrge	r0, r3
     344:	bfbc      	itt	lt
     346:	40d0      	lsrlt	r0, r2
     348:	4318      	orrlt	r0, r3
     34a:	4770      	bx	lr
     34c:	f092 0f00 	teq	r2, #0
     350:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     354:	bf06      	itte	eq
     356:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     35a:	3201      	addeq	r2, #1
     35c:	3b01      	subne	r3, #1
     35e:	e7b5      	b.n	2cc <__addsf3+0x58>
     360:	ea4f 0341 	mov.w	r3, r1, lsl #1
     364:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     368:	bf18      	it	ne
     36a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     36e:	d021      	beq.n	3b4 <__addsf3+0x140>
     370:	ea92 0f03 	teq	r2, r3
     374:	d004      	beq.n	380 <__addsf3+0x10c>
     376:	f092 0f00 	teq	r2, #0
     37a:	bf08      	it	eq
     37c:	4608      	moveq	r0, r1
     37e:	4770      	bx	lr
     380:	ea90 0f01 	teq	r0, r1
     384:	bf1c      	itt	ne
     386:	2000      	movne	r0, #0
     388:	4770      	bxne	lr
     38a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     38e:	d104      	bne.n	39a <__addsf3+0x126>
     390:	0040      	lsls	r0, r0, #1
     392:	bf28      	it	cs
     394:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     398:	4770      	bx	lr
     39a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     39e:	bf3c      	itt	cc
     3a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     3a4:	4770      	bxcc	lr
     3a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     3aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     3ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     3b2:	4770      	bx	lr
     3b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
     3b8:	bf16      	itet	ne
     3ba:	4608      	movne	r0, r1
     3bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     3c0:	4601      	movne	r1, r0
     3c2:	0242      	lsls	r2, r0, #9
     3c4:	bf06      	itte	eq
     3c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     3ca:	ea90 0f01 	teqeq	r0, r1
     3ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     3d2:	4770      	bx	lr

000003d4 <__aeabi_ui2f>:
     3d4:	f04f 0300 	mov.w	r3, #0
     3d8:	e004      	b.n	3e4 <__aeabi_i2f+0x8>
     3da:	bf00      	nop

000003dc <__aeabi_i2f>:
     3dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     3e0:	bf48      	it	mi
     3e2:	4240      	negmi	r0, r0
     3e4:	ea5f 0c00 	movs.w	ip, r0
     3e8:	bf08      	it	eq
     3ea:	4770      	bxeq	lr
     3ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     3f0:	4601      	mov	r1, r0
     3f2:	f04f 0000 	mov.w	r0, #0
     3f6:	e01c      	b.n	432 <__aeabi_l2f+0x2a>

000003f8 <__aeabi_ul2f>:
     3f8:	ea50 0201 	orrs.w	r2, r0, r1
     3fc:	bf08      	it	eq
     3fe:	4770      	bxeq	lr
     400:	f04f 0300 	mov.w	r3, #0
     404:	e00a      	b.n	41c <__aeabi_l2f+0x14>
     406:	bf00      	nop

00000408 <__aeabi_l2f>:
     408:	ea50 0201 	orrs.w	r2, r0, r1
     40c:	bf08      	it	eq
     40e:	4770      	bxeq	lr
     410:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     414:	d502      	bpl.n	41c <__aeabi_l2f+0x14>
     416:	4240      	negs	r0, r0
     418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     41c:	ea5f 0c01 	movs.w	ip, r1
     420:	bf02      	ittt	eq
     422:	4684      	moveq	ip, r0
     424:	4601      	moveq	r1, r0
     426:	2000      	moveq	r0, #0
     428:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     42c:	bf08      	it	eq
     42e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     432:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     436:	fabc f28c 	clz	r2, ip
     43a:	3a08      	subs	r2, #8
     43c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     440:	db10      	blt.n	464 <__aeabi_l2f+0x5c>
     442:	fa01 fc02 	lsl.w	ip, r1, r2
     446:	4463      	add	r3, ip
     448:	fa00 fc02 	lsl.w	ip, r0, r2
     44c:	f1c2 0220 	rsb	r2, r2, #32
     450:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     454:	fa20 f202 	lsr.w	r2, r0, r2
     458:	eb43 0002 	adc.w	r0, r3, r2
     45c:	bf08      	it	eq
     45e:	f020 0001 	biceq.w	r0, r0, #1
     462:	4770      	bx	lr
     464:	f102 0220 	add.w	r2, r2, #32
     468:	fa01 fc02 	lsl.w	ip, r1, r2
     46c:	f1c2 0220 	rsb	r2, r2, #32
     470:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     474:	fa21 f202 	lsr.w	r2, r1, r2
     478:	eb43 0002 	adc.w	r0, r3, r2
     47c:	bf08      	it	eq
     47e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     482:	4770      	bx	lr

00000484 <__aeabi_f2uiz>:
     484:	0042      	lsls	r2, r0, #1
     486:	d20e      	bcs.n	4a6 <__aeabi_f2uiz+0x22>
     488:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     48c:	d30b      	bcc.n	4a6 <__aeabi_f2uiz+0x22>
     48e:	f04f 039e 	mov.w	r3, #158	; 0x9e
     492:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     496:	d409      	bmi.n	4ac <__aeabi_f2uiz+0x28>
     498:	ea4f 2300 	mov.w	r3, r0, lsl #8
     49c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     4a0:	fa23 f002 	lsr.w	r0, r3, r2
     4a4:	4770      	bx	lr
     4a6:	f04f 0000 	mov.w	r0, #0
     4aa:	4770      	bx	lr
     4ac:	f112 0f61 	cmn.w	r2, #97	; 0x61
     4b0:	d101      	bne.n	4b6 <__aeabi_f2uiz+0x32>
     4b2:	0242      	lsls	r2, r0, #9
     4b4:	d102      	bne.n	4bc <__aeabi_f2uiz+0x38>
     4b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     4ba:	4770      	bx	lr
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	4770      	bx	lr
     4c2:	bf00      	nop

000004c4 <__aeabi_uldivmod>:
     4c4:	b953      	cbnz	r3, 4dc <__aeabi_uldivmod+0x18>
     4c6:	b94a      	cbnz	r2, 4dc <__aeabi_uldivmod+0x18>
     4c8:	2900      	cmp	r1, #0
     4ca:	bf08      	it	eq
     4cc:	2800      	cmpeq	r0, #0
     4ce:	bf1c      	itt	ne
     4d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     4d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     4d8:	f000 b80c 	b.w	4f4 <__aeabi_idiv0>
     4dc:	f1ad 0c08 	sub.w	ip, sp, #8
     4e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     4e4:	f000 f808 	bl	4f8 <__udivmoddi4>
     4e8:	f8dd e004 	ldr.w	lr, [sp, #4]
     4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     4f0:	b004      	add	sp, #16
     4f2:	4770      	bx	lr

000004f4 <__aeabi_idiv0>:
     4f4:	4770      	bx	lr
     4f6:	bf00      	nop

000004f8 <__udivmoddi4>:
     4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     4fc:	4607      	mov	r7, r0
     4fe:	468c      	mov	ip, r1
     500:	4608      	mov	r0, r1
     502:	9e09      	ldr	r6, [sp, #36]	; 0x24
     504:	4615      	mov	r5, r2
     506:	463c      	mov	r4, r7
     508:	4619      	mov	r1, r3
     50a:	2b00      	cmp	r3, #0
     50c:	f040 80c6 	bne.w	69c <__udivmoddi4+0x1a4>
     510:	4282      	cmp	r2, r0
     512:	fab2 f782 	clz	r7, r2
     516:	d946      	bls.n	5a6 <__udivmoddi4+0xae>
     518:	b14f      	cbz	r7, 52e <__udivmoddi4+0x36>
     51a:	f1c7 0e20 	rsb	lr, r7, #32
     51e:	fa24 fe0e 	lsr.w	lr, r4, lr
     522:	fa00 f307 	lsl.w	r3, r0, r7
     526:	40bd      	lsls	r5, r7
     528:	ea4e 0c03 	orr.w	ip, lr, r3
     52c:	40bc      	lsls	r4, r7
     52e:	ea4f 4815 	mov.w	r8, r5, lsr #16
     532:	fa1f fe85 	uxth.w	lr, r5
     536:	fbbc f9f8 	udiv	r9, ip, r8
     53a:	0c22      	lsrs	r2, r4, #16
     53c:	fb08 c319 	mls	r3, r8, r9, ip
     540:	fb09 fa0e 	mul.w	sl, r9, lr
     544:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     548:	459a      	cmp	sl, r3
     54a:	d928      	bls.n	59e <__udivmoddi4+0xa6>
     54c:	18eb      	adds	r3, r5, r3
     54e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     552:	d204      	bcs.n	55e <__udivmoddi4+0x66>
     554:	459a      	cmp	sl, r3
     556:	d902      	bls.n	55e <__udivmoddi4+0x66>
     558:	f1a9 0002 	sub.w	r0, r9, #2
     55c:	442b      	add	r3, r5
     55e:	eba3 030a 	sub.w	r3, r3, sl
     562:	b2a4      	uxth	r4, r4
     564:	fbb3 f2f8 	udiv	r2, r3, r8
     568:	fb08 3312 	mls	r3, r8, r2, r3
     56c:	fb02 fe0e 	mul.w	lr, r2, lr
     570:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     574:	45a6      	cmp	lr, r4
     576:	d914      	bls.n	5a2 <__udivmoddi4+0xaa>
     578:	192c      	adds	r4, r5, r4
     57a:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     57e:	d203      	bcs.n	588 <__udivmoddi4+0x90>
     580:	45a6      	cmp	lr, r4
     582:	d901      	bls.n	588 <__udivmoddi4+0x90>
     584:	1e93      	subs	r3, r2, #2
     586:	442c      	add	r4, r5
     588:	eba4 040e 	sub.w	r4, r4, lr
     58c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     590:	b11e      	cbz	r6, 59a <__udivmoddi4+0xa2>
     592:	40fc      	lsrs	r4, r7
     594:	2300      	movs	r3, #0
     596:	6034      	str	r4, [r6, #0]
     598:	6073      	str	r3, [r6, #4]
     59a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     59e:	4648      	mov	r0, r9
     5a0:	e7dd      	b.n	55e <__udivmoddi4+0x66>
     5a2:	4613      	mov	r3, r2
     5a4:	e7f0      	b.n	588 <__udivmoddi4+0x90>
     5a6:	b902      	cbnz	r2, 5aa <__udivmoddi4+0xb2>
     5a8:	deff      	udf	#255	; 0xff
     5aa:	bb87      	cbnz	r7, 60e <__udivmoddi4+0x116>
     5ac:	1a83      	subs	r3, r0, r2
     5ae:	2101      	movs	r1, #1
     5b0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     5b4:	b2aa      	uxth	r2, r5
     5b6:	fbb3 fcfe 	udiv	ip, r3, lr
     5ba:	0c20      	lsrs	r0, r4, #16
     5bc:	fb0e 331c 	mls	r3, lr, ip, r3
     5c0:	fb0c f802 	mul.w	r8, ip, r2
     5c4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     5c8:	4598      	cmp	r8, r3
     5ca:	d963      	bls.n	694 <__udivmoddi4+0x19c>
     5cc:	18eb      	adds	r3, r5, r3
     5ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     5d2:	d204      	bcs.n	5de <__udivmoddi4+0xe6>
     5d4:	4598      	cmp	r8, r3
     5d6:	d902      	bls.n	5de <__udivmoddi4+0xe6>
     5d8:	f1ac 0002 	sub.w	r0, ip, #2
     5dc:	442b      	add	r3, r5
     5de:	eba3 0308 	sub.w	r3, r3, r8
     5e2:	b2a4      	uxth	r4, r4
     5e4:	fbb3 fcfe 	udiv	ip, r3, lr
     5e8:	fb0e 331c 	mls	r3, lr, ip, r3
     5ec:	fb0c f202 	mul.w	r2, ip, r2
     5f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     5f4:	42a2      	cmp	r2, r4
     5f6:	d94f      	bls.n	698 <__udivmoddi4+0x1a0>
     5f8:	192c      	adds	r4, r5, r4
     5fa:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
     5fe:	d204      	bcs.n	60a <__udivmoddi4+0x112>
     600:	42a2      	cmp	r2, r4
     602:	d902      	bls.n	60a <__udivmoddi4+0x112>
     604:	f1ac 0302 	sub.w	r3, ip, #2
     608:	442c      	add	r4, r5
     60a:	1aa4      	subs	r4, r4, r2
     60c:	e7be      	b.n	58c <__udivmoddi4+0x94>
     60e:	f1c7 0c20 	rsb	ip, r7, #32
     612:	fa20 f80c 	lsr.w	r8, r0, ip
     616:	fa00 f307 	lsl.w	r3, r0, r7
     61a:	fa24 fc0c 	lsr.w	ip, r4, ip
     61e:	40bd      	lsls	r5, r7
     620:	ea4c 0203 	orr.w	r2, ip, r3
     624:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     628:	b2ab      	uxth	r3, r5
     62a:	fbb8 fcfe 	udiv	ip, r8, lr
     62e:	0c11      	lsrs	r1, r2, #16
     630:	fb0e 801c 	mls	r0, lr, ip, r8
     634:	fb0c f903 	mul.w	r9, ip, r3
     638:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     63c:	4581      	cmp	r9, r0
     63e:	fa04 f407 	lsl.w	r4, r4, r7
     642:	d923      	bls.n	68c <__udivmoddi4+0x194>
     644:	1828      	adds	r0, r5, r0
     646:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     64a:	d204      	bcs.n	656 <__udivmoddi4+0x15e>
     64c:	4581      	cmp	r9, r0
     64e:	d902      	bls.n	656 <__udivmoddi4+0x15e>
     650:	f1ac 0102 	sub.w	r1, ip, #2
     654:	4428      	add	r0, r5
     656:	eba0 0009 	sub.w	r0, r0, r9
     65a:	b292      	uxth	r2, r2
     65c:	fbb0 fcfe 	udiv	ip, r0, lr
     660:	fb0e 001c 	mls	r0, lr, ip, r0
     664:	fb0c f803 	mul.w	r8, ip, r3
     668:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     66c:	4598      	cmp	r8, r3
     66e:	d90f      	bls.n	690 <__udivmoddi4+0x198>
     670:	18eb      	adds	r3, r5, r3
     672:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
     676:	d204      	bcs.n	682 <__udivmoddi4+0x18a>
     678:	4598      	cmp	r8, r3
     67a:	d902      	bls.n	682 <__udivmoddi4+0x18a>
     67c:	f1ac 0202 	sub.w	r2, ip, #2
     680:	442b      	add	r3, r5
     682:	eba3 0308 	sub.w	r3, r3, r8
     686:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     68a:	e791      	b.n	5b0 <__udivmoddi4+0xb8>
     68c:	4661      	mov	r1, ip
     68e:	e7e2      	b.n	656 <__udivmoddi4+0x15e>
     690:	4662      	mov	r2, ip
     692:	e7f6      	b.n	682 <__udivmoddi4+0x18a>
     694:	4660      	mov	r0, ip
     696:	e7a2      	b.n	5de <__udivmoddi4+0xe6>
     698:	4663      	mov	r3, ip
     69a:	e7b6      	b.n	60a <__udivmoddi4+0x112>
     69c:	4283      	cmp	r3, r0
     69e:	d905      	bls.n	6ac <__udivmoddi4+0x1b4>
     6a0:	b10e      	cbz	r6, 6a6 <__udivmoddi4+0x1ae>
     6a2:	e9c6 7000 	strd	r7, r0, [r6]
     6a6:	2100      	movs	r1, #0
     6a8:	4608      	mov	r0, r1
     6aa:	e776      	b.n	59a <__udivmoddi4+0xa2>
     6ac:	fab3 f183 	clz	r1, r3
     6b0:	b981      	cbnz	r1, 6d4 <__udivmoddi4+0x1dc>
     6b2:	4283      	cmp	r3, r0
     6b4:	d301      	bcc.n	6ba <__udivmoddi4+0x1c2>
     6b6:	42ba      	cmp	r2, r7
     6b8:	d80a      	bhi.n	6d0 <__udivmoddi4+0x1d8>
     6ba:	1abc      	subs	r4, r7, r2
     6bc:	eb60 0303 	sbc.w	r3, r0, r3
     6c0:	2001      	movs	r0, #1
     6c2:	469c      	mov	ip, r3
     6c4:	2e00      	cmp	r6, #0
     6c6:	d068      	beq.n	79a <__udivmoddi4+0x2a2>
     6c8:	e9c6 4c00 	strd	r4, ip, [r6]
     6cc:	2100      	movs	r1, #0
     6ce:	e764      	b.n	59a <__udivmoddi4+0xa2>
     6d0:	4608      	mov	r0, r1
     6d2:	e7f7      	b.n	6c4 <__udivmoddi4+0x1cc>
     6d4:	f1c1 0c20 	rsb	ip, r1, #32
     6d8:	408b      	lsls	r3, r1
     6da:	fa22 f40c 	lsr.w	r4, r2, ip
     6de:	431c      	orrs	r4, r3
     6e0:	fa02 f501 	lsl.w	r5, r2, r1
     6e4:	fa00 f301 	lsl.w	r3, r0, r1
     6e8:	fa27 f20c 	lsr.w	r2, r7, ip
     6ec:	fa20 fb0c 	lsr.w	fp, r0, ip
     6f0:	ea4f 4914 	mov.w	r9, r4, lsr #16
     6f4:	4313      	orrs	r3, r2
     6f6:	fbbb f8f9 	udiv	r8, fp, r9
     6fa:	fa1f fe84 	uxth.w	lr, r4
     6fe:	fb09 bb18 	mls	fp, r9, r8, fp
     702:	0c1a      	lsrs	r2, r3, #16
     704:	fb08 fa0e 	mul.w	sl, r8, lr
     708:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     70c:	4592      	cmp	sl, r2
     70e:	fa07 f701 	lsl.w	r7, r7, r1
     712:	d93e      	bls.n	792 <__udivmoddi4+0x29a>
     714:	18a2      	adds	r2, r4, r2
     716:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     71a:	d204      	bcs.n	726 <__udivmoddi4+0x22e>
     71c:	4592      	cmp	sl, r2
     71e:	d902      	bls.n	726 <__udivmoddi4+0x22e>
     720:	f1a8 0002 	sub.w	r0, r8, #2
     724:	4422      	add	r2, r4
     726:	eba2 020a 	sub.w	r2, r2, sl
     72a:	b29b      	uxth	r3, r3
     72c:	fbb2 f8f9 	udiv	r8, r2, r9
     730:	fb09 2218 	mls	r2, r9, r8, r2
     734:	fb08 fe0e 	mul.w	lr, r8, lr
     738:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     73c:	4596      	cmp	lr, r2
     73e:	d92a      	bls.n	796 <__udivmoddi4+0x29e>
     740:	18a2      	adds	r2, r4, r2
     742:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
     746:	d204      	bcs.n	752 <__udivmoddi4+0x25a>
     748:	4596      	cmp	lr, r2
     74a:	d902      	bls.n	752 <__udivmoddi4+0x25a>
     74c:	f1a8 0302 	sub.w	r3, r8, #2
     750:	4422      	add	r2, r4
     752:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     756:	fba0 9305 	umull	r9, r3, r0, r5
     75a:	eba2 020e 	sub.w	r2, r2, lr
     75e:	429a      	cmp	r2, r3
     760:	46ce      	mov	lr, r9
     762:	4698      	mov	r8, r3
     764:	d302      	bcc.n	76c <__udivmoddi4+0x274>
     766:	d106      	bne.n	776 <__udivmoddi4+0x27e>
     768:	454f      	cmp	r7, r9
     76a:	d204      	bcs.n	776 <__udivmoddi4+0x27e>
     76c:	ebb9 0e05 	subs.w	lr, r9, r5
     770:	eb63 0804 	sbc.w	r8, r3, r4
     774:	3801      	subs	r0, #1
     776:	b186      	cbz	r6, 79a <__udivmoddi4+0x2a2>
     778:	ebb7 030e 	subs.w	r3, r7, lr
     77c:	eb62 0708 	sbc.w	r7, r2, r8
     780:	fa07 fc0c 	lsl.w	ip, r7, ip
     784:	40cb      	lsrs	r3, r1
     786:	ea4c 0303 	orr.w	r3, ip, r3
     78a:	40cf      	lsrs	r7, r1
     78c:	e9c6 3700 	strd	r3, r7, [r6]
     790:	e79c      	b.n	6cc <__udivmoddi4+0x1d4>
     792:	4640      	mov	r0, r8
     794:	e7c7      	b.n	726 <__udivmoddi4+0x22e>
     796:	4643      	mov	r3, r8
     798:	e7db      	b.n	752 <__udivmoddi4+0x25a>
     79a:	4631      	mov	r1, r6
     79c:	e6fd      	b.n	59a <__udivmoddi4+0xa2>
	...

000007a0 <gpio_pin_set_dt>:
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
{
     7a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return gpio_pin_set(spec->port, spec->pin, value);
     7a4:	6804      	ldr	r4, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     7a6:	7903      	ldrb	r3, [r0, #4]
	const struct gpio_driver_data *const data =
     7a8:	6927      	ldr	r7, [r4, #16]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     7aa:	2501      	movs	r5, #1
     7ac:	409d      	lsls	r5, r3
     7ae:	6863      	ldr	r3, [r4, #4]
     7b0:	681b      	ldr	r3, [r3, #0]
     7b2:	421d      	tst	r5, r3
{
     7b4:	460e      	mov	r6, r1
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     7b6:	d10e      	bne.n	7d6 <gpio_pin_set_dt+0x36>
     7b8:	4918      	ldr	r1, [pc, #96]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     7ba:	4a19      	ldr	r2, [pc, #100]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     7bc:	4819      	ldr	r0, [pc, #100]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7be:	f240 4392 	movw	r3, #1170	; 0x492
     7c2:	f008 fce6 	bl	9192 <assert_print>
     7c6:	4818      	ldr	r0, [pc, #96]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     7c8:	f008 fce3 	bl	9192 <assert_print>
     7cc:	4814      	ldr	r0, [pc, #80]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     7ce:	f240 4192 	movw	r1, #1170	; 0x492
     7d2:	f008 fcd7 	bl	9184 <assert_post_action>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     7d6:	683b      	ldr	r3, [r7, #0]
     7d8:	421d      	tst	r5, r3
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     7da:	6863      	ldr	r3, [r4, #4]
     7dc:	681b      	ldr	r3, [r3, #0]
     7de:	bf18      	it	ne
     7e0:	f086 0601 	eorne.w	r6, r6, #1
     7e4:	421d      	tst	r5, r3
     7e6:	d10e      	bne.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
     7e8:	490c      	ldr	r1, [pc, #48]	; (81c <CONFIG_ISR_STACK_SIZE+0x1c>)
     7ea:	4a0d      	ldr	r2, [pc, #52]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     7ec:	480d      	ldr	r0, [pc, #52]	; (824 <CONFIG_ISR_STACK_SIZE+0x24>)
     7ee:	f44f 638d 	mov.w	r3, #1128	; 0x468
     7f2:	f008 fcce 	bl	9192 <assert_print>
     7f6:	480c      	ldr	r0, [pc, #48]	; (828 <CONFIG_ISR_STACK_SIZE+0x28>)
     7f8:	f008 fccb 	bl	9192 <assert_print>
     7fc:	4808      	ldr	r0, [pc, #32]	; (820 <CONFIG_ISR_STACK_SIZE+0x20>)
     7fe:	f44f 618d 	mov.w	r1, #1128	; 0x468
     802:	f008 fcbf 	bl	9184 <assert_post_action>
	if (value != 0)	{
     806:	b136      	cbz	r6, 816 <CONFIG_ISR_STACK_SIZE+0x16>
	return api->port_set_bits_raw(port, pins);
     808:	68a3      	ldr	r3, [r4, #8]
     80a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     80c:	4629      	mov	r1, r5
     80e:	4620      	mov	r0, r4
}
     810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return api->port_clear_bits_raw(port, pins);
     814:	4718      	bx	r3
     816:	68a3      	ldr	r3, [r4, #8]
     818:	691b      	ldr	r3, [r3, #16]
     81a:	e7f7      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     81c:	0000a0c9 	.word	0x0000a0c9
     820:	0000a098 	.word	0x0000a098
     824:	0000a107 	.word	0x0000a107
     828:	0000a124 	.word	0x0000a124

0000082c <gpio_pin_configure_dt>:
{
     82c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
				  spec->dt_flags | extra_flags);
     830:	88c4      	ldrh	r4, [r0, #6]
	return gpio_pin_configure(spec->port,
     832:	6805      	ldr	r5, [r0, #0]
     834:	7906      	ldrb	r6, [r0, #4]
     836:	430c      	orrs	r4, r1
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     838:	f004 0330 	and.w	r3, r4, #48	; 0x30
     83c:	2b30      	cmp	r3, #48	; 0x30
	const struct gpio_driver_config *const cfg =
     83e:	e9d5 b901 	ldrd	fp, r9, [r5, #4]
	struct gpio_driver_data *data =
     842:	692f      	ldr	r7, [r5, #16]
	__ASSERT((flags & (GPIO_PULL_UP | GPIO_PULL_DOWN)) !=
     844:	d10e      	bne.n	864 <gpio_pin_configure_dt+0x38>
     846:	493c      	ldr	r1, [pc, #240]	; (938 <gpio_pin_configure_dt+0x10c>)
     848:	4a3c      	ldr	r2, [pc, #240]	; (93c <gpio_pin_configure_dt+0x110>)
     84a:	483d      	ldr	r0, [pc, #244]	; (940 <gpio_pin_configure_dt+0x114>)
     84c:	f44f 732e 	mov.w	r3, #696	; 0x2b8
     850:	f008 fc9f 	bl	9192 <assert_print>
     854:	483b      	ldr	r0, [pc, #236]	; (944 <gpio_pin_configure_dt+0x118>)
     856:	f008 fc9c 	bl	9192 <assert_print>
     85a:	4838      	ldr	r0, [pc, #224]	; (93c <gpio_pin_configure_dt+0x110>)
     85c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
     860:	f008 fc90 	bl	9184 <assert_post_action>
	__ASSERT((flags & GPIO_OUTPUT) != 0 || (flags & GPIO_SINGLE_ENDED) == 0,
     864:	f004 1302 	and.w	r3, r4, #131074	; 0x20002
     868:	2b02      	cmp	r3, #2
     86a:	d10e      	bne.n	88a <gpio_pin_configure_dt+0x5e>
     86c:	4936      	ldr	r1, [pc, #216]	; (948 <gpio_pin_configure_dt+0x11c>)
     86e:	4a33      	ldr	r2, [pc, #204]	; (93c <gpio_pin_configure_dt+0x110>)
     870:	4833      	ldr	r0, [pc, #204]	; (940 <gpio_pin_configure_dt+0x114>)
     872:	f44f 732f 	mov.w	r3, #700	; 0x2bc
     876:	f008 fc8c 	bl	9192 <assert_print>
     87a:	4834      	ldr	r0, [pc, #208]	; (94c <gpio_pin_configure_dt+0x120>)
     87c:	f008 fc89 	bl	9192 <assert_print>
     880:	482e      	ldr	r0, [pc, #184]	; (93c <gpio_pin_configure_dt+0x110>)
     882:	f44f 712f 	mov.w	r1, #700	; 0x2bc
     886:	f008 fc7d 	bl	9184 <assert_post_action>
	__ASSERT_NO_MSG((flags & GPIO_SINGLE_ENDED) != 0 ||
     88a:	f004 0306 	and.w	r3, r4, #6
     88e:	2b04      	cmp	r3, #4
     890:	d10b      	bne.n	8aa <gpio_pin_configure_dt+0x7e>
     892:	492f      	ldr	r1, [pc, #188]	; (950 <gpio_pin_configure_dt+0x124>)
     894:	482a      	ldr	r0, [pc, #168]	; (940 <gpio_pin_configure_dt+0x114>)
     896:	4a29      	ldr	r2, [pc, #164]	; (93c <gpio_pin_configure_dt+0x110>)
     898:	f44f 7330 	mov.w	r3, #704	; 0x2c0
     89c:	f008 fc79 	bl	9192 <assert_print>
     8a0:	4826      	ldr	r0, [pc, #152]	; (93c <gpio_pin_configure_dt+0x110>)
     8a2:	f44f 7130 	mov.w	r1, #704	; 0x2c0
     8a6:	f008 fc6d 	bl	9184 <assert_post_action>
	__ASSERT((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) == 0
     8aa:	f414 2840 	ands.w	r8, r4, #786432	; 0xc0000
     8ae:	d010      	beq.n	8d2 <gpio_pin_configure_dt+0xa6>
     8b0:	03a3      	lsls	r3, r4, #14
     8b2:	d40e      	bmi.n	8d2 <gpio_pin_configure_dt+0xa6>
     8b4:	4927      	ldr	r1, [pc, #156]	; (954 <gpio_pin_configure_dt+0x128>)
     8b6:	4a21      	ldr	r2, [pc, #132]	; (93c <gpio_pin_configure_dt+0x110>)
     8b8:	4821      	ldr	r0, [pc, #132]	; (940 <gpio_pin_configure_dt+0x114>)
     8ba:	f240 23c3 	movw	r3, #707	; 0x2c3
     8be:	f008 fc68 	bl	9192 <assert_print>
     8c2:	4825      	ldr	r0, [pc, #148]	; (958 <gpio_pin_configure_dt+0x12c>)
     8c4:	f008 fc65 	bl	9192 <assert_print>
     8c8:	481c      	ldr	r0, [pc, #112]	; (93c <gpio_pin_configure_dt+0x110>)
     8ca:	f240 21c3 	movw	r1, #707	; 0x2c3
     8ce:	f008 fc59 	bl	9184 <assert_post_action>
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
     8d2:	02e0      	lsls	r0, r4, #11
     8d4:	d506      	bpl.n	8e4 <gpio_pin_configure_dt+0xb8>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
     8d6:	f1b8 0f00 	cmp.w	r8, #0
     8da:	d003      	beq.n	8e4 <gpio_pin_configure_dt+0xb8>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
     8dc:	07e1      	lsls	r1, r4, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
     8de:	bf48      	it	mi
     8e0:	f484 2440 	eormi.w	r4, r4, #786432	; 0xc0000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     8e4:	2301      	movs	r3, #1
     8e6:	fa03 fa06 	lsl.w	sl, r3, r6
     8ea:	f8db 3000 	ldr.w	r3, [fp]
     8ee:	ea1a 0f03 	tst.w	sl, r3
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
     8f2:	f424 1880 	bic.w	r8, r4, #1048576	; 0x100000
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     8f6:	d10e      	bne.n	916 <gpio_pin_configure_dt+0xea>
     8f8:	4918      	ldr	r1, [pc, #96]	; (95c <gpio_pin_configure_dt+0x130>)
     8fa:	4a10      	ldr	r2, [pc, #64]	; (93c <gpio_pin_configure_dt+0x110>)
     8fc:	4810      	ldr	r0, [pc, #64]	; (940 <gpio_pin_configure_dt+0x114>)
     8fe:	f44f 7335 	mov.w	r3, #724	; 0x2d4
     902:	f008 fc46 	bl	9192 <assert_print>
     906:	4816      	ldr	r0, [pc, #88]	; (960 <gpio_pin_configure_dt+0x134>)
     908:	f008 fc43 	bl	9192 <assert_print>
     90c:	480b      	ldr	r0, [pc, #44]	; (93c <gpio_pin_configure_dt+0x110>)
     90e:	f44f 7135 	mov.w	r1, #724	; 0x2d4
     912:	f008 fc37 	bl	9184 <assert_post_action>
		data->invert |= (gpio_port_pins_t)BIT(pin);
     916:	683b      	ldr	r3, [r7, #0]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     918:	07e2      	lsls	r2, r4, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
     91a:	bf4c      	ite	mi
     91c:	ea4a 0303 	orrmi.w	r3, sl, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     920:	ea23 030a 	bicpl.w	r3, r3, sl
     924:	603b      	str	r3, [r7, #0]
	return api->pin_configure(port, pin, flags);
     926:	f8d9 3000 	ldr.w	r3, [r9]
     92a:	4642      	mov	r2, r8
     92c:	4631      	mov	r1, r6
     92e:	4628      	mov	r0, r5
}
     930:	b001      	add	sp, #4
     932:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return api->pin_configure(port, pin, flags);
     936:	4718      	bx	r3
     938:	0000a136 	.word	0x0000a136
     93c:	0000a098 	.word	0x0000a098
     940:	0000a107 	.word	0x0000a107
     944:	0000a16f 	.word	0x0000a16f
     948:	0000a1ac 	.word	0x0000a1ac
     94c:	0000a1e1 	.word	0x0000a1e1
     950:	0000a233 	.word	0x0000a233
     954:	0000a266 	.word	0x0000a266
     958:	0000a2ac 	.word	0x0000a2ac
     95c:	0000a0c9 	.word	0x0000a0c9
     960:	0000a124 	.word	0x0000a124

00000964 <gpio_pin_toggle_dt>:
 *
 * @param spec GPIO specification from devicetree
 * @return a value from gpio_pin_toggle()
 */
static inline int gpio_pin_toggle_dt(const struct gpio_dt_spec *spec)
{
     964:	b570      	push	{r4, r5, r6, lr}
	return gpio_pin_toggle(spec->port, spec->pin);
     966:	6805      	ldr	r5, [r0, #0]
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     968:	7903      	ldrb	r3, [r0, #4]
     96a:	2401      	movs	r4, #1
     96c:	409c      	lsls	r4, r3
     96e:	686b      	ldr	r3, [r5, #4]
     970:	681b      	ldr	r3, [r3, #0]
     972:	421c      	tst	r4, r3
     974:	d10e      	bne.n	994 <gpio_pin_toggle_dt+0x30>
     976:	490b      	ldr	r1, [pc, #44]	; (9a4 <gpio_pin_toggle_dt+0x40>)
     978:	4a0b      	ldr	r2, [pc, #44]	; (9a8 <gpio_pin_toggle_dt+0x44>)
     97a:	480c      	ldr	r0, [pc, #48]	; (9ac <gpio_pin_toggle_dt+0x48>)
     97c:	f240 43bc 	movw	r3, #1212	; 0x4bc
     980:	f008 fc07 	bl	9192 <assert_print>
     984:	480a      	ldr	r0, [pc, #40]	; (9b0 <gpio_pin_toggle_dt+0x4c>)
     986:	f008 fc04 	bl	9192 <assert_print>
     98a:	4807      	ldr	r0, [pc, #28]	; (9a8 <gpio_pin_toggle_dt+0x44>)
     98c:	f240 41bc 	movw	r1, #1212	; 0x4bc
     990:	f008 fbf8 	bl	9184 <assert_post_action>
	return api->port_toggle_bits(port, pins);
     994:	68ab      	ldr	r3, [r5, #8]
     996:	4621      	mov	r1, r4
     998:	4628      	mov	r0, r5
     99a:	695b      	ldr	r3, [r3, #20]
}
     99c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return api->port_toggle_bits(port, pins);
     9a0:	4718      	bx	r3
     9a2:	bf00      	nop
     9a4:	0000a0c9 	.word	0x0000a0c9
     9a8:	0000a098 	.word	0x0000a098
     9ac:	0000a107 	.word	0x0000a107
     9b0:	0000a124 	.word	0x0000a124

000009b4 <thread_C_code>:
     9b4:	b570      	push	{r4, r5, r6, lr}
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     9b6:	4d32      	ldr	r5, [pc, #200]	; (a80 <thread_C_code+0xcc>)
     9b8:	4e32      	ldr	r6, [pc, #200]	; (a84 <thread_C_code+0xd0>)
     9ba:	4c33      	ldr	r4, [pc, #204]	; (a88 <thread_C_code+0xd4>)
     9bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     9c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     9c4:	4628      	mov	r0, r5
     9c6:	f006 fa35 	bl	6e34 <z_impl_k_sem_take>
     9ca:	f008 fa98 	bl	8efe <k_uptime_get>
     9ce:	460b      	mov	r3, r1
     9d0:	4602      	mov	r2, r0
     9d2:	4630      	mov	r0, r6
     9d4:	f008 fae3 	bl	8f9e <printk>
     9d8:	6821      	ldr	r1, [r4, #0]
     9da:	482c      	ldr	r0, [pc, #176]	; (a8c <thread_C_code+0xd8>)
     9dc:	f008 fadf 	bl	8f9e <printk>
     9e0:	6823      	ldr	r3, [r4, #0]
     9e2:	2b1d      	cmp	r3, #29
     9e4:	dd18      	ble.n	a18 <thread_C_code+0x64>
     9e6:	482a      	ldr	r0, [pc, #168]	; (a90 <thread_C_code+0xdc>)
     9e8:	2101      	movs	r1, #1
     9ea:	f7ff fed9 	bl	7a0 <gpio_pin_set_dt>
     9ee:	2800      	cmp	r0, #0
     9f0:	db11      	blt.n	a16 <thread_C_code+0x62>
     9f2:	2100      	movs	r1, #0
     9f4:	4827      	ldr	r0, [pc, #156]	; (a94 <thread_C_code+0xe0>)
     9f6:	f7ff fed3 	bl	7a0 <gpio_pin_set_dt>
     9fa:	2800      	cmp	r0, #0
     9fc:	db0b      	blt.n	a16 <thread_C_code+0x62>
     9fe:	2100      	movs	r1, #0
     a00:	4825      	ldr	r0, [pc, #148]	; (a98 <thread_C_code+0xe4>)
     a02:	f7ff fecd 	bl	7a0 <gpio_pin_set_dt>
     a06:	2800      	cmp	r0, #0
     a08:	db05      	blt.n	a16 <thread_C_code+0x62>
     a0a:	2100      	movs	r1, #0
     a0c:	4823      	ldr	r0, [pc, #140]	; (a9c <thread_C_code+0xe8>)
     a0e:	f7ff fec7 	bl	7a0 <gpio_pin_set_dt>
     a12:	2800      	cmp	r0, #0
     a14:	dad2      	bge.n	9bc <thread_C_code+0x8>
     a16:	bd70      	pop	{r4, r5, r6, pc}
     a18:	f1a3 0214 	sub.w	r2, r3, #20
     a1c:	2a09      	cmp	r2, #9
     a1e:	d807      	bhi.n	a30 <thread_C_code+0x7c>
     a20:	481b      	ldr	r0, [pc, #108]	; (a90 <thread_C_code+0xdc>)
     a22:	2101      	movs	r1, #1
     a24:	f7ff febc 	bl	7a0 <gpio_pin_set_dt>
     a28:	2800      	cmp	r0, #0
     a2a:	dbf4      	blt.n	a16 <thread_C_code+0x62>
     a2c:	2101      	movs	r1, #1
     a2e:	e7e1      	b.n	9f4 <thread_C_code+0x40>
     a30:	f1a3 020a 	sub.w	r2, r3, #10
     a34:	2a09      	cmp	r2, #9
     a36:	d80d      	bhi.n	a54 <thread_C_code+0xa0>
     a38:	4815      	ldr	r0, [pc, #84]	; (a90 <thread_C_code+0xdc>)
     a3a:	2101      	movs	r1, #1
     a3c:	f7ff feb0 	bl	7a0 <gpio_pin_set_dt>
     a40:	2800      	cmp	r0, #0
     a42:	dbe8      	blt.n	a16 <thread_C_code+0x62>
     a44:	4813      	ldr	r0, [pc, #76]	; (a94 <thread_C_code+0xe0>)
     a46:	2101      	movs	r1, #1
     a48:	f7ff feaa 	bl	7a0 <gpio_pin_set_dt>
     a4c:	2800      	cmp	r0, #0
     a4e:	dbe2      	blt.n	a16 <thread_C_code+0x62>
     a50:	2101      	movs	r1, #1
     a52:	e7d5      	b.n	a00 <thread_C_code+0x4c>
     a54:	2b09      	cmp	r3, #9
     a56:	d8b1      	bhi.n	9bc <thread_C_code+0x8>
     a58:	480d      	ldr	r0, [pc, #52]	; (a90 <thread_C_code+0xdc>)
     a5a:	2101      	movs	r1, #1
     a5c:	f7ff fea0 	bl	7a0 <gpio_pin_set_dt>
     a60:	2800      	cmp	r0, #0
     a62:	dbd8      	blt.n	a16 <thread_C_code+0x62>
     a64:	480b      	ldr	r0, [pc, #44]	; (a94 <thread_C_code+0xe0>)
     a66:	2101      	movs	r1, #1
     a68:	f7ff fe9a 	bl	7a0 <gpio_pin_set_dt>
     a6c:	2800      	cmp	r0, #0
     a6e:	dbd2      	blt.n	a16 <thread_C_code+0x62>
     a70:	4809      	ldr	r0, [pc, #36]	; (a98 <thread_C_code+0xe4>)
     a72:	2101      	movs	r1, #1
     a74:	f7ff fe94 	bl	7a0 <gpio_pin_set_dt>
     a78:	2800      	cmp	r0, #0
     a7a:	dbcc      	blt.n	a16 <thread_C_code+0x62>
     a7c:	2101      	movs	r1, #1
     a7e:	e7c5      	b.n	a0c <thread_C_code+0x58>
     a80:	200005ac 	.word	0x200005ac
     a84:	0000a2e7 	.word	0x0000a2e7
     a88:	20000598 	.word	0x20000598
     a8c:	0000a319 	.word	0x0000a319
     a90:	00009dd0 	.word	0x00009dd0
     a94:	00009dd8 	.word	0x00009dd8
     a98:	00009de0 	.word	0x00009de0
     a9c:	00009de8 	.word	0x00009de8

00000aa0 <thread_B_code>:
     aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
     aa2:	4f23      	ldr	r7, [pc, #140]	; (b30 <thread_B_code+0x90>)
     aa4:	4e23      	ldr	r6, [pc, #140]	; (b34 <thread_B_code+0x94>)
     aa6:	b08b      	sub	sp, #44	; 0x2c
     aa8:	2400      	movs	r4, #0
     aaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ab2:	4638      	mov	r0, r7
     ab4:	f006 f9be 	bl	6e34 <z_impl_k_sem_take>
     ab8:	f008 fa21 	bl	8efe <k_uptime_get>
     abc:	4602      	mov	r2, r0
     abe:	460b      	mov	r3, r1
     ac0:	481d      	ldr	r0, [pc, #116]	; (b38 <thread_B_code+0x98>)
     ac2:	f008 fa6c 	bl	8f9e <printk>
     ac6:	6831      	ldr	r1, [r6, #0]
     ac8:	481c      	ldr	r0, [pc, #112]	; (b3c <thread_B_code+0x9c>)
     aca:	f008 fa68 	bl	8f9e <printk>
     ace:	2c09      	cmp	r4, #9
     ad0:	dd1b      	ble.n	b0a <thread_B_code+0x6a>
     ad2:	466a      	mov	r2, sp
     ad4:	2309      	movs	r3, #9
     ad6:	6851      	ldr	r1, [r2, #4]
     ad8:	f842 1b04 	str.w	r1, [r2], #4
     adc:	3b01      	subs	r3, #1
     ade:	d1fa      	bne.n	ad6 <thread_B_code+0x36>
     ae0:	6833      	ldr	r3, [r6, #0]
     ae2:	9309      	str	r3, [sp, #36]	; 0x24
     ae4:	2d08      	cmp	r5, #8
     ae6:	dd19      	ble.n	b1c <thread_B_code+0x7c>
     ae8:	2100      	movs	r1, #0
     aea:	466a      	mov	r2, sp
     aec:	460b      	mov	r3, r1
     aee:	f852 0b04 	ldr.w	r0, [r2], #4
     af2:	3301      	adds	r3, #1
     af4:	2b0a      	cmp	r3, #10
     af6:	4401      	add	r1, r0
     af8:	d1f9      	bne.n	aee <thread_B_code+0x4e>
     afa:	fb91 f1f3 	sdiv	r1, r1, r3
     afe:	4b10      	ldr	r3, [pc, #64]	; (b40 <thread_B_code+0xa0>)
     b00:	4810      	ldr	r0, [pc, #64]	; (b44 <thread_B_code+0xa4>)
     b02:	6019      	str	r1, [r3, #0]
     b04:	f008 fa4b 	bl	8f9e <printk>
     b08:	e008      	b.n	b1c <thread_B_code+0x7c>
     b0a:	ab0a      	add	r3, sp, #40	; 0x28
     b0c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
     b10:	6832      	ldr	r2, [r6, #0]
     b12:	f843 2c28 	str.w	r2, [r3, #-40]
     b16:	f105 0501 	add.w	r5, r5, #1
     b1a:	d0e3      	beq.n	ae4 <thread_B_code+0x44>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     b1c:	480a      	ldr	r0, [pc, #40]	; (b48 <thread_B_code+0xa8>)
     b1e:	f006 f94b 	bl	6db8 <z_impl_k_sem_give>
     b22:	4621      	mov	r1, r4
     b24:	4809      	ldr	r0, [pc, #36]	; (b4c <thread_B_code+0xac>)
     b26:	f008 fa3a 	bl	8f9e <printk>
     b2a:	3401      	adds	r4, #1
     b2c:	e7bd      	b.n	aaa <thread_B_code+0xa>
     b2e:	bf00      	nop
     b30:	2000059c 	.word	0x2000059c
     b34:	200005cc 	.word	0x200005cc
     b38:	0000a326 	.word	0x0000a326
     b3c:	0000a358 	.word	0x0000a358
     b40:	20000598 	.word	0x20000598
     b44:	0000a36a 	.word	0x0000a36a
     b48:	200005ac 	.word	0x200005ac
     b4c:	0000a37d 	.word	0x0000a37d

00000b50 <thread_A_code>:
     b50:	b5f0      	push	{r4, r5, r6, r7, lr}
     b52:	4f30      	ldr	r7, [pc, #192]	; (c14 <thread_A_code+0xc4>)
        
     b54:	4d30      	ldr	r5, [pc, #192]	; (c18 <thread_A_code+0xc8>)
     b56:	4e31      	ldr	r6, [pc, #196]	; (c1c <thread_A_code+0xcc>)
     b58:	b087      	sub	sp, #28
     b5a:	f008 f9d0 	bl	8efe <k_uptime_get>
     b5e:	460b      	mov	r3, r1
     b60:	4602      	mov	r2, r0
     b62:	4638      	mov	r0, r7
     b64:	f008 fa1b 	bl	8f9e <printk>
        
     b68:	2214      	movs	r2, #20
     b6a:	2100      	movs	r1, #0
     b6c:	a801      	add	r0, sp, #4
     b6e:	f008 fbfe 	bl	936e <memset>
     b72:	2302      	movs	r3, #2
     b74:	e9cd 3502 	strd	r3, r5, [sp, #8]
     b78:	9304      	str	r3, [sp, #16]
     b7a:	230a      	movs	r3, #10
     b7c:	f88d 3014 	strb.w	r3, [sp, #20]
void thread_B_code(void *argA , void *argB, void *argC)
     b80:	4b27      	ldr	r3, [pc, #156]	; (c20 <thread_A_code+0xd0>)
     b82:	6818      	ldr	r0, [r3, #0]
     b84:	b988      	cbnz	r0, baa <thread_A_code+0x5a>
{
     b86:	4827      	ldr	r0, [pc, #156]	; (c24 <thread_A_code+0xd4>)
     b88:	f008 fa09 	bl	8f9e <printk>
    
     b8c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
     b90:	4825      	ldr	r0, [pc, #148]	; (c28 <thread_A_code+0xd8>)
     b92:	4621      	mov	r1, r4
     b94:	f008 fa03 	bl	8f9e <printk>
     b98:	4824      	ldr	r0, [pc, #144]	; (c2c <thread_A_code+0xdc>)
     b9a:	f006 f90d 	bl	6db8 <z_impl_k_sem_give>
	return z_impl_k_sleep(timeout);
     b9e:	2100      	movs	r1, #0
     ba0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     ba4:	f007 fa82 	bl	80ac <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
     ba8:	e7d7      	b.n	b5a <thread_A_code+0xa>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
     baa:	6883      	ldr	r3, [r0, #8]
     bac:	a901      	add	r1, sp, #4
     bae:	685b      	ldr	r3, [r3, #4]
     bb0:	4798      	blx	r3
  
     bb2:	4604      	mov	r4, r0
     bb4:	b1c8      	cbz	r0, bea <thread_A_code+0x9a>
}
     bb6:	4601      	mov	r1, r0
     bb8:	481d      	ldr	r0, [pc, #116]	; (c30 <thread_A_code+0xe0>)
     bba:	f008 f9f0 	bl	8f9e <printk>
     bbe:	e7e7      	b.n	b90 <thread_A_code+0x40>
     bc0:	481c      	ldr	r0, [pc, #112]	; (c34 <thread_A_code+0xe4>)
     bc2:	f008 f9ec 	bl	8f9e <printk>
     bc6:	882b      	ldrh	r3, [r5, #0]
     bc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     bcc:	4358      	muls	r0, r3
     bce:	f7ff fc05 	bl	3dc <__aeabi_i2f>
     bd2:	4631      	mov	r1, r6
     bd4:	f7ff fa94 	bl	100 <__aeabi_fmul>
     bd8:	f7ff fc54 	bl	484 <__aeabi_f2uiz>
     bdc:	2364      	movs	r3, #100	; 0x64
     bde:	b280      	uxth	r0, r0
     be0:	fbb0 f0f3 	udiv	r0, r0, r3
     be4:	4b14      	ldr	r3, [pc, #80]	; (c38 <thread_A_code+0xe8>)
     be6:	6018      	str	r0, [r3, #0]
     be8:	e7d6      	b.n	b98 <thread_A_code+0x48>
     bea:	882c      	ldrh	r4, [r5, #0]
     bec:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
     bf0:	d2e6      	bcs.n	bc0 <thread_A_code+0x70>
     bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     bf6:	4360      	muls	r0, r4
     bf8:	f7ff fbf0 	bl	3dc <__aeabi_i2f>
     bfc:	4631      	mov	r1, r6
     bfe:	f7ff fa7f 	bl	100 <__aeabi_fmul>
     c02:	f7ff fc3f 	bl	484 <__aeabi_f2uiz>
     c06:	4621      	mov	r1, r4
     c08:	b282      	uxth	r2, r0
     c0a:	480c      	ldr	r0, [pc, #48]	; (c3c <thread_A_code+0xec>)
     c0c:	f008 f9c7 	bl	8f9e <printk>
     c10:	e7d9      	b.n	bc6 <thread_A_code+0x76>
     c12:	bf00      	nop
     c14:	0000a38e 	.word	0x0000a38e
     c18:	20000eec 	.word	0x20000eec
     c1c:	3b40300c 	.word	0x3b40300c
     c20:	20000588 	.word	0x20000588
     c24:	0000a3c0 	.word	0x0000a3c0
     c28:	0000a40f 	.word	0x0000a40f
     c2c:	2000059c 	.word	0x2000059c
     c30:	0000a3ef 	.word	0x0000a3ef
     c34:	0000a438 	.word	0x0000a438
     c38:	200005cc 	.word	0x200005cc
     c3c:	0000a453 	.word	0x0000a453

00000c40 <thread_D_code>:
     c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c44:	4e24      	ldr	r6, [pc, #144]	; (cd8 <thread_D_code+0x98>)
     c46:	f8df 8094 	ldr.w	r8, [pc, #148]	; cdc <thread_D_code+0x9c>
     c4a:	4f25      	ldr	r7, [pc, #148]	; (ce0 <thread_D_code+0xa0>)
     c4c:	6830      	ldr	r0, [r6, #0]
	z_impl_k_thread_suspend(thread);
     c4e:	f006 ff55 	bl	7afc <z_impl_k_thread_suspend>
     c52:	f008 f954 	bl	8efe <k_uptime_get>
     c56:	4604      	mov	r4, r0
     c58:	460d      	mov	r5, r1
     c5a:	f008 f950 	bl	8efe <k_uptime_get>
     c5e:	4602      	mov	r2, r0
     c60:	460b      	mov	r3, r1
     c62:	4640      	mov	r0, r8
     c64:	f008 f99b 	bl	8f9e <printk>
     c68:	f8df 9078 	ldr.w	r9, [pc, #120]	; ce4 <thread_D_code+0xa4>
     c6c:	f8df a078 	ldr.w	sl, [pc, #120]	; ce8 <thread_D_code+0xa8>
     c70:	f008 f945 	bl	8efe <k_uptime_get>
     c74:	f241 3388 	movw	r3, #5000	; 0x1388
     c78:	1b00      	subs	r0, r0, r4
     c7a:	eb61 0105 	sbc.w	r1, r1, r5
     c7e:	4298      	cmp	r0, r3
     c80:	f171 0300 	sbcs.w	r3, r1, #0
     c84:	db0c      	blt.n	ca0 <thread_D_code+0x60>
     c86:	4b19      	ldr	r3, [pc, #100]	; (cec <thread_D_code+0xac>)
     c88:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_resume(thread);
     c8a:	f006 fd07 	bl	769c <z_impl_k_thread_resume>
     c8e:	4b18      	ldr	r3, [pc, #96]	; (cf0 <thread_D_code+0xb0>)
     c90:	6818      	ldr	r0, [r3, #0]
     c92:	f006 fd03 	bl	769c <z_impl_k_thread_resume>
     c96:	4b17      	ldr	r3, [pc, #92]	; (cf4 <thread_D_code+0xb4>)
     c98:	6818      	ldr	r0, [r3, #0]
     c9a:	f006 fcff 	bl	769c <z_impl_k_thread_resume>
}
     c9e:	e7d5      	b.n	c4c <thread_D_code+0xc>
     ca0:	4638      	mov	r0, r7
     ca2:	f7ff fe5f 	bl	964 <gpio_pin_toggle_dt>
     ca6:	2800      	cmp	r0, #0
     ca8:	db14      	blt.n	cd4 <thread_D_code+0x94>
     caa:	4648      	mov	r0, r9
     cac:	f7ff fe5a 	bl	964 <gpio_pin_toggle_dt>
     cb0:	2800      	cmp	r0, #0
     cb2:	db0f      	blt.n	cd4 <thread_D_code+0x94>
     cb4:	4650      	mov	r0, sl
     cb6:	f7ff fe55 	bl	964 <gpio_pin_toggle_dt>
     cba:	2800      	cmp	r0, #0
     cbc:	db0a      	blt.n	cd4 <thread_D_code+0x94>
     cbe:	480e      	ldr	r0, [pc, #56]	; (cf8 <thread_D_code+0xb8>)
     cc0:	f7ff fe50 	bl	964 <gpio_pin_toggle_dt>
     cc4:	2800      	cmp	r0, #0
     cc6:	db05      	blt.n	cd4 <thread_D_code+0x94>
	return z_impl_k_sleep(timeout);
     cc8:	2100      	movs	r1, #0
     cca:	f640 40cd 	movw	r0, #3277	; 0xccd
     cce:	f007 f9ed 	bl	80ac <z_impl_k_sleep>
     cd2:	e7cd      	b.n	c70 <thread_D_code+0x30>
     cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     cd8:	200005c8 	.word	0x200005c8
     cdc:	0000a475 	.word	0x0000a475
     ce0:	00009dd0 	.word	0x00009dd0
     ce4:	00009dd8 	.word	0x00009dd8
     ce8:	00009de0 	.word	0x00009de0
     cec:	200005bc 	.word	0x200005bc
     cf0:	200005c0 	.word	0x200005c0
     cf4:	200005c4 	.word	0x200005c4
     cf8:	00009de8 	.word	0x00009de8

00000cfc <button_pressed>:

     cfc:	b508      	push	{r3, lr}
   
     cfe:	4b14      	ldr	r3, [pc, #80]	; (d50 <button_pressed+0x54>)
     d00:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_suspend(thread);
     d02:	f006 fefb 	bl	7afc <z_impl_k_thread_suspend>
    
     d06:	4b13      	ldr	r3, [pc, #76]	; (d54 <button_pressed+0x58>)
     d08:	6818      	ldr	r0, [r3, #0]
     d0a:	f006 fef7 	bl	7afc <z_impl_k_thread_suspend>
}
     d0e:	4b12      	ldr	r3, [pc, #72]	; (d58 <button_pressed+0x5c>)
     d10:	6818      	ldr	r0, [r3, #0]
     d12:	f006 fef3 	bl	7afc <z_impl_k_thread_suspend>
/* Function to look for closeby obstacles */
     d16:	4811      	ldr	r0, [pc, #68]	; (d5c <button_pressed+0x60>)
     d18:	2100      	movs	r1, #0
     d1a:	f7ff fd41 	bl	7a0 <gpio_pin_set_dt>
#define IMGWIDTH 16 /* Square image. Side size, in pixels*/
     d1e:	2800      	cmp	r0, #0
     d20:	db15      	blt.n	d4e <button_pressed+0x52>
#define OBSTACLE_COLOR 0x80 /* Obstacle color */
     d22:	480f      	ldr	r0, [pc, #60]	; (d60 <button_pressed+0x64>)
     d24:	2100      	movs	r1, #0
     d26:	f7ff fd3b 	bl	7a0 <gpio_pin_set_dt>
#define PI 3.14159265
     d2a:	2800      	cmp	r0, #0
     d2c:	db0f      	blt.n	d4e <button_pressed+0x52>
#define GF_ROW (IMGWIDTH-1)	/* Row to look for the guiode line - far */
     d2e:	480d      	ldr	r0, [pc, #52]	; (d64 <button_pressed+0x68>)
     d30:	2100      	movs	r1, #0
     d32:	f7ff fd35 	bl	7a0 <gpio_pin_set_dt>
#define NOB_ROW 3	/* Row to look for near obstacles */
     d36:	2800      	cmp	r0, #0
     d38:	db09      	blt.n	d4e <button_pressed+0x52>

     d3a:	480b      	ldr	r0, [pc, #44]	; (d68 <button_pressed+0x6c>)
     d3c:	2100      	movs	r1, #0
     d3e:	f7ff fd2f 	bl	7a0 <gpio_pin_set_dt>
int nearObstSearch(uint8_t imageBuf[IMGWIDTH][IMGWIDTH]) {
     d42:	2800      	cmp	r0, #0
     d44:	db03      	blt.n	d4e <button_pressed+0x52>
		for(j=IMGWIDTH/4; j < (IMGWIDTH/4)*3; j++) {
     d46:	4b09      	ldr	r3, [pc, #36]	; (d6c <button_pressed+0x70>)
     d48:	6818      	ldr	r0, [r3, #0]
	z_impl_k_thread_resume(thread);
     d4a:	f006 fca7 	bl	769c <z_impl_k_thread_resume>
		}
     d4e:	bd08      	pop	{r3, pc}
     d50:	200005bc 	.word	0x200005bc
     d54:	200005c0 	.word	0x200005c0
     d58:	200005c4 	.word	0x200005c4
     d5c:	00009dd0 	.word	0x00009dd0
     d60:	00009dd8 	.word	0x00009dd8
     d64:	00009de0 	.word	0x00009de0
     d68:	00009de8 	.word	0x00009de8
     d6c:	200005c8 	.word	0x200005c8

00000d70 <main>:
}
     d70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     d74:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_sem_init(sem, initial_count, limit);
     d76:	2201      	movs	r2, #1
     d78:	2100      	movs	r1, #0
     d7a:	4871      	ldr	r0, [pc, #452]	; (f40 <main+0x1d0>)
     d7c:	f008 fe34 	bl	99e8 <z_impl_k_sem_init>
     d80:	2201      	movs	r2, #1
     d82:	2100      	movs	r1, #0
     d84:	486f      	ldr	r0, [pc, #444]	; (f44 <main+0x1d4>)
     d86:	f008 fe2f 	bl	99e8 <z_impl_k_sem_init>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     d8a:	4d6f      	ldr	r5, [pc, #444]	; (f48 <main+0x1d8>)
     d8c:	4628      	mov	r0, r5
     d8e:	f008 fdd3 	bl	9938 <z_device_is_ready>
     d92:	2800      	cmp	r0, #0
     d94:	f000 80d1 	beq.w	f3a <main+0x1ca>
     d98:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     d9c:	486b      	ldr	r0, [pc, #428]	; (f4c <main+0x1dc>)
     d9e:	f7ff fd45 	bl	82c <gpio_pin_configure_dt>
     da2:	1e01      	subs	r1, r0, #0
     da4:	da05      	bge.n	db2 <main+0x42>
     da6:	486a      	ldr	r0, [pc, #424]	; (f50 <main+0x1e0>)
     da8:	b009      	add	sp, #36	; 0x24
     daa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
     dae:	f008 b8f6 	b.w	8f9e <printk>
     db2:	4628      	mov	r0, r5
     db4:	f008 fdc0 	bl	9938 <z_device_is_ready>
     db8:	2800      	cmp	r0, #0
     dba:	f000 80be 	beq.w	f3a <main+0x1ca>
     dbe:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     dc2:	4864      	ldr	r0, [pc, #400]	; (f54 <main+0x1e4>)
     dc4:	f7ff fd32 	bl	82c <gpio_pin_configure_dt>
     dc8:	1e01      	subs	r1, r0, #0
     dca:	da01      	bge.n	dd0 <main+0x60>
     dcc:	4862      	ldr	r0, [pc, #392]	; (f58 <main+0x1e8>)
     dce:	e7eb      	b.n	da8 <main+0x38>
     dd0:	4628      	mov	r0, r5
     dd2:	f008 fdb1 	bl	9938 <z_device_is_ready>
     dd6:	2800      	cmp	r0, #0
     dd8:	f000 80af 	beq.w	f3a <main+0x1ca>
     ddc:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     de0:	485e      	ldr	r0, [pc, #376]	; (f5c <main+0x1ec>)
     de2:	f7ff fd23 	bl	82c <gpio_pin_configure_dt>
     de6:	1e01      	subs	r1, r0, #0
     de8:	dbf0      	blt.n	dcc <main+0x5c>
     dea:	4628      	mov	r0, r5
     dec:	f008 fda4 	bl	9938 <z_device_is_ready>
     df0:	2800      	cmp	r0, #0
     df2:	f000 80a2 	beq.w	f3a <main+0x1ca>
     df6:	f44f 11d0 	mov.w	r1, #1703936	; 0x1a0000
     dfa:	4859      	ldr	r0, [pc, #356]	; (f60 <main+0x1f0>)
     dfc:	f7ff fd16 	bl	82c <gpio_pin_configure_dt>
     e00:	1e01      	subs	r1, r0, #0
     e02:	dbe3      	blt.n	dcc <main+0x5c>
     e04:	4628      	mov	r0, r5
     e06:	f008 fd97 	bl	9938 <z_device_is_ready>
     e0a:	b910      	cbnz	r0, e12 <main+0xa2>
     e0c:	6829      	ldr	r1, [r5, #0]
     e0e:	4855      	ldr	r0, [pc, #340]	; (f64 <main+0x1f4>)
     e10:	e7ca      	b.n	da8 <main+0x38>
     e12:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     e16:	4854      	ldr	r0, [pc, #336]	; (f68 <main+0x1f8>)
     e18:	f7ff fd08 	bl	82c <gpio_pin_configure_dt>
     e1c:	1e01      	subs	r1, r0, #0
     e1e:	da01      	bge.n	e24 <main+0xb4>
     e20:	4852      	ldr	r0, [pc, #328]	; (f6c <main+0x1fc>)
     e22:	e7c1      	b.n	da8 <main+0x38>
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
     e24:	e9d5 3401 	ldrd	r3, r4, [r5, #4]
     e28:	681b      	ldr	r3, [r3, #0]
     e2a:	051b      	lsls	r3, r3, #20
     e2c:	d40e      	bmi.n	e4c <main+0xdc>
     e2e:	4950      	ldr	r1, [pc, #320]	; (f70 <main+0x200>)
     e30:	4a50      	ldr	r2, [pc, #320]	; (f74 <main+0x204>)
     e32:	4851      	ldr	r0, [pc, #324]	; (f78 <main+0x208>)
     e34:	f240 2375 	movw	r3, #629	; 0x275
     e38:	f008 f9ab 	bl	9192 <assert_print>
     e3c:	484f      	ldr	r0, [pc, #316]	; (f7c <main+0x20c>)
     e3e:	f008 f9a8 	bl	9192 <assert_print>
     e42:	484c      	ldr	r0, [pc, #304]	; (f74 <main+0x204>)
     e44:	f240 2175 	movw	r1, #629	; 0x275
     e48:	f008 f99c 	bl	9184 <assert_post_action>
	return api->pin_interrupt_configure(port, pin, mode, trig);
     e4c:	210b      	movs	r1, #11
     e4e:	69a4      	ldr	r4, [r4, #24]
     e50:	483d      	ldr	r0, [pc, #244]	; (f48 <main+0x1d8>)
     e52:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
     e56:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     e5a:	47a0      	blx	r4
     e5c:	1e01      	subs	r1, r0, #0
     e5e:	da01      	bge.n	e64 <main+0xf4>
     e60:	4847      	ldr	r0, [pc, #284]	; (f80 <main+0x210>)
     e62:	e7a1      	b.n	da8 <main+0x38>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     e64:	4847      	ldr	r0, [pc, #284]	; (f84 <main+0x214>)
     e66:	4c48      	ldr	r4, [pc, #288]	; (f88 <main+0x218>)
     e68:	f005 f9da 	bl	6220 <z_impl_device_get_binding>
     e6c:	6020      	str	r0, [r4, #0]
     e6e:	b910      	cbnz	r0, e76 <main+0x106>
     e70:	4846      	ldr	r0, [pc, #280]	; (f8c <main+0x21c>)
     e72:	f008 f894 	bl	8f9e <printk>
     e76:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
     e78:	6883      	ldr	r3, [r0, #8]
     e7a:	4945      	ldr	r1, [pc, #276]	; (f90 <main+0x220>)
     e7c:	681b      	ldr	r3, [r3, #0]
     e7e:	4798      	blx	r3
     e80:	4601      	mov	r1, r0
     e82:	b110      	cbz	r0, e8a <main+0x11a>
     e84:	4843      	ldr	r0, [pc, #268]	; (f94 <main+0x224>)
     e86:	f008 f88a 	bl	8f9e <printk>
     e8a:	4b43      	ldr	r3, [pc, #268]	; (f98 <main+0x228>)
     e8c:	2701      	movs	r7, #1
     e8e:	60df      	str	r7, [r3, #12]
     e90:	f04f 0800 	mov.w	r8, #0
     e94:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     e98:	2400      	movs	r4, #0
     e9a:	2602      	movs	r6, #2
     e9c:	e9cd 8906 	strd	r8, r9, [sp, #24]
     ea0:	e9cd 6403 	strd	r6, r4, [sp, #12]
     ea4:	e9cd 4401 	strd	r4, r4, [sp, #4]
     ea8:	4b3c      	ldr	r3, [pc, #240]	; (f9c <main+0x22c>)
     eaa:	493d      	ldr	r1, [pc, #244]	; (fa0 <main+0x230>)
     eac:	9400      	str	r4, [sp, #0]
     eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
     eb2:	483c      	ldr	r0, [pc, #240]	; (fa4 <main+0x234>)
     eb4:	f005 fc92 	bl	67dc <z_impl_k_thread_create>
     eb8:	4b3b      	ldr	r3, [pc, #236]	; (fa8 <main+0x238>)
     eba:	6018      	str	r0, [r3, #0]
     ebc:	4b3b      	ldr	r3, [pc, #236]	; (fac <main+0x23c>)
     ebe:	493c      	ldr	r1, [pc, #240]	; (fb0 <main+0x240>)
     ec0:	9400      	str	r4, [sp, #0]
     ec2:	e9cd 8906 	strd	r8, r9, [sp, #24]
     ec6:	e9cd 6403 	strd	r6, r4, [sp, #12]
     eca:	e9cd 4401 	strd	r4, r4, [sp, #4]
     ece:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ed2:	4838      	ldr	r0, [pc, #224]	; (fb4 <main+0x244>)
     ed4:	f005 fc82 	bl	67dc <z_impl_k_thread_create>
     ed8:	4b37      	ldr	r3, [pc, #220]	; (fb8 <main+0x248>)
     eda:	6018      	str	r0, [r3, #0]
     edc:	4b37      	ldr	r3, [pc, #220]	; (fbc <main+0x24c>)
     ede:	4938      	ldr	r1, [pc, #224]	; (fc0 <main+0x250>)
     ee0:	9400      	str	r4, [sp, #0]
     ee2:	e9cd 8906 	strd	r8, r9, [sp, #24]
     ee6:	e9cd 6403 	strd	r6, r4, [sp, #12]
     eea:	e9cd 4401 	strd	r4, r4, [sp, #4]
     eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
     ef2:	4834      	ldr	r0, [pc, #208]	; (fc4 <main+0x254>)
     ef4:	f005 fc72 	bl	67dc <z_impl_k_thread_create>
     ef8:	4b33      	ldr	r3, [pc, #204]	; (fc8 <main+0x258>)
     efa:	6018      	str	r0, [r3, #0]
     efc:	4b33      	ldr	r3, [pc, #204]	; (fcc <main+0x25c>)
     efe:	4934      	ldr	r1, [pc, #208]	; (fd0 <main+0x260>)
     f00:	4834      	ldr	r0, [pc, #208]	; (fd4 <main+0x264>)
     f02:	9400      	str	r4, [sp, #0]
     f04:	e9cd 8906 	strd	r8, r9, [sp, #24]
     f08:	e9cd 6403 	strd	r6, r4, [sp, #12]
     f0c:	e9cd 4401 	strd	r4, r4, [sp, #4]
     f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
     f14:	f005 fc62 	bl	67dc <z_impl_k_thread_create>
     f18:	4b2f      	ldr	r3, [pc, #188]	; (fd8 <main+0x268>)
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     f1a:	4930      	ldr	r1, [pc, #192]	; (fdc <main+0x26c>)
     f1c:	6018      	str	r0, [r3, #0]
     f1e:	4b30      	ldr	r3, [pc, #192]	; (fe0 <main+0x270>)
     f20:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
     f22:	f44f 6300 	mov.w	r3, #2048	; 0x800
     f26:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     f28:	68ab      	ldr	r3, [r5, #8]
     f2a:	69db      	ldr	r3, [r3, #28]
     f2c:	b12b      	cbz	r3, f3a <main+0x1ca>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     f2e:	4806      	ldr	r0, [pc, #24]	; (f48 <main+0x1d8>)
     f30:	463a      	mov	r2, r7
     f32:	b009      	add	sp, #36	; 0x24
     f34:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
     f38:	4718      	bx	r3
     f3a:	b009      	add	sp, #36	; 0x24
     f3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     f40:	2000059c 	.word	0x2000059c
     f44:	200005ac 	.word	0x200005ac
     f48:	00009b34 	.word	0x00009b34
     f4c:	00009dd0 	.word	0x00009dd0
     f50:	0000a4a7 	.word	0x0000a4a7
     f54:	00009dd8 	.word	0x00009dd8
     f58:	0000a4de 	.word	0x0000a4de
     f5c:	00009de0 	.word	0x00009de0
     f60:	00009de8 	.word	0x00009de8
     f64:	0000a515 	.word	0x0000a515
     f68:	00009dc8 	.word	0x00009dc8
     f6c:	0000a53b 	.word	0x0000a53b
     f70:	0000a0c9 	.word	0x0000a0c9
     f74:	0000a098 	.word	0x0000a098
     f78:	0000a107 	.word	0x0000a107
     f7c:	0000a124 	.word	0x0000a124
     f80:	0000a574 	.word	0x0000a574
     f84:	0000a5b7 	.word	0x0000a5b7
     f88:	20000588 	.word	0x20000588
     f8c:	0000a5bd 	.word	0x0000a5bd
     f90:	0000a090 	.word	0x0000a090
     f94:	0000a5de 	.word	0x0000a5de
     f98:	40007000 	.word	0x40007000
     f9c:	00000b51 	.word	0x00000b51
     fa0:	20001320 	.word	0x20001320
     fa4:	20000260 	.word	0x20000260
     fa8:	200005bc 	.word	0x200005bc
     fac:	00000aa1 	.word	0x00000aa1
     fb0:	20001740 	.word	0x20001740
     fb4:	200002e0 	.word	0x200002e0
     fb8:	200005c0 	.word	0x200005c0
     fbc:	000009b5 	.word	0x000009b5
     fc0:	20001b60 	.word	0x20001b60
     fc4:	20000360 	.word	0x20000360
     fc8:	200005c4 	.word	0x200005c4
     fcc:	00000c41 	.word	0x00000c41
     fd0:	20001f80 	.word	0x20001f80
     fd4:	200003e0 	.word	0x200003e0
     fd8:	200005c8 	.word	0x200005c8
     fdc:	2000058c 	.word	0x2000058c
     fe0:	00000cfd 	.word	0x00000cfd

00000fe4 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     fe8:	b08d      	sub	sp, #52	; 0x34
     fea:	461f      	mov	r7, r3
     fec:	9202      	str	r2, [sp, #8]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     fee:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     ff2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     ff6:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     ff8:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     ffa:	0782      	lsls	r2, r0, #30
     ffc:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1000:	9304      	str	r3, [sp, #16]
{
    1002:	4605      	mov	r5, r0
    1004:	460e      	mov	r6, r1
	if ((uintptr_t)packaged % sizeof(void *)) {
    1006:	f040 8258 	bne.w	14ba <CONFIG_FPROTECT_BLOCK_SIZE+0x4ba>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
    100a:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    100c:	2800      	cmp	r0, #0
    100e:	f040 8257 	bne.w	14c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c0>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1012:	f001 0607 	and.w	r6, r1, #7
    1016:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1018:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    101c:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
    1020:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
    1024:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1026:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    102a:	4652      	mov	r2, sl
	bool parsing = false;
    102c:	4651      	mov	r1, sl
	size = sizeof(char *);
    102e:	f8cd 8000 	str.w	r8, [sp]

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
    1032:	b105      	cbz	r5, 1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
				*(const char **)buf = s;
    1034:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1036:	9804      	ldr	r0, [sp, #16]
    1038:	2800      	cmp	r0, #0
    103a:	dc07      	bgt.n	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    103c:	48cb      	ldr	r0, [pc, #812]	; (136c <CONFIG_FPROTECT_BLOCK_SIZE+0x36c>)
    103e:	4287      	cmp	r7, r0
    1040:	f0c0 8148 	bcc.w	12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
    1044:	48ca      	ldr	r0, [pc, #808]	; (1370 <CONFIG_FPROTECT_BLOCK_SIZE+0x370>)
    1046:	4287      	cmp	r7, r0
    1048:	f080 8144 	bcs.w	12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
    104c:	9802      	ldr	r0, [sp, #8]
    104e:	f010 0e02 	ands.w	lr, r0, #2
    1052:	f000 8164 	beq.w	131e <CONFIG_FPROTECT_BLOCK_SIZE+0x31e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1056:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    105a:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    105c:	f1be 0f00 	cmp.w	lr, #0
    1060:	f000 813e 	beq.w	12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>
    1064:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    1068:	f0c0 813a 	bcc.w	12e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e0>
					__ASSERT(false, "String with too many arguments");
    106c:	49c1      	ldr	r1, [pc, #772]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
    106e:	4ac2      	ldr	r2, [pc, #776]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    1070:	48c2      	ldr	r0, [pc, #776]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    1072:	f44f 73f8 	mov.w	r3, #496	; 0x1f0
    1076:	f008 f88c 	bl	9192 <assert_print>
    107a:	48c1      	ldr	r0, [pc, #772]	; (1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>)
    107c:	f008 f889 	bl	9192 <assert_print>
    1080:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
					return -EINVAL;
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
					__ASSERT(false, "str_ptr_pos[] too small");
    1084:	48bc      	ldr	r0, [pc, #752]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    1086:	f008 f87d 	bl	9184 <assert_post_action>
					return -EINVAL;
    108a:	f06f 0015 	mvn.w	r0, #21
    108e:	e0fb      	b.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
		if (!parsing) {
    1090:	b941      	cbnz	r1, 10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
			if (*fmt == '%') {
    1092:	2825      	cmp	r0, #37	; 0x25
    1094:	f040 8147 	bne.w	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
				parsing = true;
    1098:	2101      	movs	r1, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
    109a:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
    109e:	f8cd 8000 	str.w	r8, [sp]
    10a2:	e140      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		switch (*fmt) {
    10a4:	282b      	cmp	r0, #43	; 0x2b
    10a6:	d825      	bhi.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    10a8:	281f      	cmp	r0, #31
    10aa:	d801      	bhi.n	10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>
			parsing = false;
    10ac:	2100      	movs	r1, #0
    10ae:	e13a      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		switch (*fmt) {
    10b0:	f1a0 0c20 	sub.w	ip, r0, #32
    10b4:	f1bc 0f0b 	cmp.w	ip, #11
    10b8:	d8f8      	bhi.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    10ba:	f20f 0e08 	addw	lr, pc, #8
    10be:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    10c2:	bf00      	nop
    10c4:	00001327 	.word	0x00001327
    10c8:	000010ad 	.word	0x000010ad
    10cc:	000010ad 	.word	0x000010ad
    10d0:	00001327 	.word	0x00001327
    10d4:	000010ad 	.word	0x000010ad
    10d8:	000010ad 	.word	0x000010ad
    10dc:	000010ad 	.word	0x000010ad
    10e0:	000010ad 	.word	0x000010ad
    10e4:	000010ad 	.word	0x000010ad
    10e8:	000010ad 	.word	0x000010ad
    10ec:	000012a3 	.word	0x000012a3
    10f0:	00001327 	.word	0x00001327
    10f4:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
    10f8:	fa5f fe8c 	uxtb.w	lr, ip
    10fc:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
    1100:	d8d4      	bhi.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1102:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
    1106:	d8d1      	bhi.n	10ac <CONFIG_FPROTECT_BLOCK_SIZE+0xac>
    1108:	f20f 0e04 	addw	lr, pc, #4
    110c:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
    1110:	00001327 	.word	0x00001327
    1114:	00001327 	.word	0x00001327
    1118:	000010ad 	.word	0x000010ad
    111c:	00001327 	.word	0x00001327
    1120:	00001327 	.word	0x00001327
    1124:	00001327 	.word	0x00001327
    1128:	00001327 	.word	0x00001327
    112c:	00001327 	.word	0x00001327
    1130:	00001327 	.word	0x00001327
    1134:	00001327 	.word	0x00001327
    1138:	00001327 	.word	0x00001327
    113c:	00001327 	.word	0x00001327
    1140:	00001327 	.word	0x00001327
    1144:	000010ad 	.word	0x000010ad
    1148:	000010ad 	.word	0x000010ad
    114c:	000010ad 	.word	0x000010ad
    1150:	000010ad 	.word	0x000010ad
    1154:	000010ad 	.word	0x000010ad
    1158:	000010ad 	.word	0x000010ad
    115c:	000010ad 	.word	0x000010ad
    1160:	00001267 	.word	0x00001267
    1164:	000010ad 	.word	0x000010ad
    1168:	000010ad 	.word	0x000010ad
    116c:	000010ad 	.word	0x000010ad
    1170:	00001267 	.word	0x00001267
    1174:	00001267 	.word	0x00001267
    1178:	00001267 	.word	0x00001267
    117c:	000010ad 	.word	0x000010ad
    1180:	000010ad 	.word	0x000010ad
    1184:	000010ad 	.word	0x000010ad
    1188:	000010ad 	.word	0x000010ad
    118c:	00001327 	.word	0x00001327
    1190:	000010ad 	.word	0x000010ad
    1194:	000010ad 	.word	0x000010ad
    1198:	000010ad 	.word	0x000010ad
    119c:	000010ad 	.word	0x000010ad
    11a0:	000010ad 	.word	0x000010ad
    11a4:	000010ad 	.word	0x000010ad
    11a8:	000010ad 	.word	0x000010ad
    11ac:	000010ad 	.word	0x000010ad
    11b0:	000010ad 	.word	0x000010ad
    11b4:	000010ad 	.word	0x000010ad
    11b8:	000010ad 	.word	0x000010ad
    11bc:	00001249 	.word	0x00001249
    11c0:	000010ad 	.word	0x000010ad
    11c4:	000010ad 	.word	0x000010ad
    11c8:	000010ad 	.word	0x000010ad
    11cc:	000010ad 	.word	0x000010ad
    11d0:	000010ad 	.word	0x000010ad
    11d4:	000010ad 	.word	0x000010ad
    11d8:	000010ad 	.word	0x000010ad
    11dc:	000010ad 	.word	0x000010ad
    11e0:	00001267 	.word	0x00001267
    11e4:	000010ad 	.word	0x000010ad
    11e8:	00001249 	.word	0x00001249
    11ec:	00001249 	.word	0x00001249
    11f0:	00001267 	.word	0x00001267
    11f4:	00001267 	.word	0x00001267
    11f8:	00001267 	.word	0x00001267
    11fc:	00001327 	.word	0x00001327
    1200:	00001249 	.word	0x00001249
    1204:	00001297 	.word	0x00001297
    1208:	000010ad 	.word	0x000010ad
    120c:	00001327 	.word	0x00001327
    1210:	000010ad 	.word	0x000010ad
    1214:	0000129d 	.word	0x0000129d
    1218:	00001249 	.word	0x00001249
    121c:	0000129d 	.word	0x0000129d
    1220:	000010ad 	.word	0x000010ad
    1224:	000010ad 	.word	0x000010ad
    1228:	0000129d 	.word	0x0000129d
    122c:	0000109b 	.word	0x0000109b
    1230:	00001249 	.word	0x00001249
    1234:	000010ad 	.word	0x000010ad
    1238:	000010ad 	.word	0x000010ad
    123c:	00001249 	.word	0x00001249
    1240:	000010ad 	.word	0x000010ad
    1244:	0000109b 	.word	0x0000109b
			if (fmt[-1] == 'l') {
    1248:	f813 1c01 	ldrb.w	r1, [r3, #-1]
    124c:	296c      	cmp	r1, #108	; 0x6c
    124e:	d127      	bne.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
				if (fmt[-2] == 'l') {
    1250:	f813 1c02 	ldrb.w	r1, [r3, #-2]
    1254:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
    1256:	f04f 0100 	mov.w	r1, #0
				if (fmt[-2] == 'l') {
    125a:	d038      	beq.n	12ce <CONFIG_FPROTECT_BLOCK_SIZE+0x2ce>
			align = VA_STACK_ALIGN(void *);
    125c:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
    1260:	f8cd 8000 	str.w	r8, [sp]
    1264:	e01d      	b.n	12a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a2>
				v.ld = va_arg(ap, long double);
    1266:	f109 0907 	add.w	r9, r9, #7
    126a:	f029 0907 	bic.w	r9, r9, #7
			buf = (void *) ROUND_UP(buf, align);
    126e:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
    1270:	e8f9 0102 	ldrd	r0, r1, [r9], #8
			buf = (void *) ROUND_UP(buf, align);
    1274:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
    1278:	b15d      	cbz	r5, 1292 <CONFIG_FPROTECT_BLOCK_SIZE+0x292>
				if (BUF_OFFSET + size > len) {
    127a:	f8dd e014 	ldr.w	lr, [sp, #20]
    127e:	44a6      	add	lr, r4
    1280:	45b6      	cmp	lr, r6
    1282:	d904      	bls.n	128e <CONFIG_FPROTECT_BLOCK_SIZE+0x28e>
					return -ENOSPC;
    1284:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1288:	b00d      	add	sp, #52	; 0x34
    128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
    128e:	e9c4 0100 	strd	r0, r1, [r4]
			buf += size;
    1292:	3408      	adds	r4, #8
			parsing = false;
    1294:	2100      	movs	r1, #0
			align = VA_STACK_ALIGN(intmax_t);
    1296:	f04f 0808 	mov.w	r8, #8
    129a:	e700      	b.n	109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
			parsing = false;
    129c:	2100      	movs	r1, #0
    129e:	e7dd      	b.n	125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>
			parsing = false;
    12a0:	2100      	movs	r1, #0
		buf = (void *) ROUND_UP(buf, align);
    12a2:	3c01      	subs	r4, #1
    12a4:	4444      	add	r4, r8
    12a6:	f1c8 0c00 	rsb	ip, r8, #0
    12aa:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    12ae:	b135      	cbz	r5, 12be <CONFIG_FPROTECT_BLOCK_SIZE+0x2be>
    12b0:	f8dd c000 	ldr.w	ip, [sp]
    12b4:	ebac 0c05 	sub.w	ip, ip, r5
    12b8:	44a4      	add	ip, r4
    12ba:	45b4      	cmp	ip, r6
    12bc:	d8e2      	bhi.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
		if (*fmt == 's') {
    12be:	2873      	cmp	r0, #115	; 0x73
    12c0:	d170      	bne.n	13a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a4>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    12c2:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
    12c4:	f859 7b04 	ldr.w	r7, [r9], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    12c8:	3801      	subs	r0, #1
    12ca:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
    12cc:	e6b1      	b.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
					align = VA_STACK_ALIGN(long long);
    12ce:	f04f 0808 	mov.w	r8, #8
    12d2:	e7c5      	b.n	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    12d4:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    12d6:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
    12da:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
    12de:	e6bc      	b.n	105a <CONFIG_FPROTECT_BLOCK_SIZE+0x5a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    12e0:	2a0f      	cmp	r2, #15
    12e2:	d90c      	bls.n	12fe <CONFIG_FPROTECT_BLOCK_SIZE+0x2fe>
					__ASSERT(false, "str_ptr_pos[] too small");
    12e4:	4923      	ldr	r1, [pc, #140]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
    12e6:	4a24      	ldr	r2, [pc, #144]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    12e8:	4824      	ldr	r0, [pc, #144]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    12ea:	f240 13f5 	movw	r3, #501	; 0x1f5
    12ee:	f007 ff50 	bl	9192 <assert_print>
    12f2:	4824      	ldr	r0, [pc, #144]	; (1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>)
    12f4:	f007 ff4d 	bl	9192 <assert_print>
    12f8:	f240 11f5 	movw	r1, #501	; 0x1f5
    12fc:	e6c2      	b.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
				if (buf0 != NULL) {
    12fe:	b375      	cbz	r5, 135e <CONFIG_FPROTECT_BLOCK_SIZE+0x35e>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1300:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
    1304:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
    1308:	4496      	add	lr, r2
    130a:	f1bc 0f00 	cmp.w	ip, #0
    130e:	d020      	beq.n	1352 <CONFIG_FPROTECT_BLOCK_SIZE+0x352>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1310:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1314:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
    1318:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
    131c:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
    131e:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
    1322:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
    1324:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
    1326:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    132a:	2800      	cmp	r0, #0
    132c:	f47f aeb0 	bne.w	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1330:	1b61      	subs	r1, r4, r5
    1332:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    1336:	d35f      	bcc.n	13f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f8>
		__ASSERT(false, "too many format args");
    1338:	490e      	ldr	r1, [pc, #56]	; (1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>)
    133a:	4a0f      	ldr	r2, [pc, #60]	; (1378 <CONFIG_FPROTECT_BLOCK_SIZE+0x378>)
    133c:	480f      	ldr	r0, [pc, #60]	; (137c <CONFIG_FPROTECT_BLOCK_SIZE+0x37c>)
    133e:	f240 233d 	movw	r3, #573	; 0x23d
    1342:	f007 ff26 	bl	9192 <assert_print>
    1346:	4810      	ldr	r0, [pc, #64]	; (1388 <CONFIG_FPROTECT_BLOCK_SIZE+0x388>)
    1348:	f007 ff23 	bl	9192 <assert_print>
    134c:	f240 213d 	movw	r1, #573	; 0x23d
    1350:	e698      	b.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1352:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
    1356:	9803      	ldr	r0, [sp, #12]
    1358:	3001      	adds	r0, #1
    135a:	9003      	str	r0, [sp, #12]
    135c:	e7de      	b.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
				} else if (is_ro || rws_pos_en) {
    135e:	f1bc 0f00 	cmp.w	ip, #0
    1362:	d101      	bne.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
    1364:	9801      	ldr	r0, [sp, #4]
    1366:	b188      	cbz	r0, 138c <CONFIG_FPROTECT_BLOCK_SIZE+0x38c>
					len += 1;
    1368:	3601      	adds	r6, #1
    136a:	e7d7      	b.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
    136c:	00009aa4 	.word	0x00009aa4
    1370:	0000be74 	.word	0x0000be74
    1374:	0000a2aa 	.word	0x0000a2aa
    1378:	0000a60d 	.word	0x0000a60d
    137c:	0000a107 	.word	0x0000a107
    1380:	0000a63b 	.word	0x0000a63b
    1384:	0000a65c 	.word	0x0000a65c
    1388:	0000a68b 	.word	0x0000a68b
					len += strlen(s) + 1 + 1;
    138c:	4638      	mov	r0, r7
    138e:	e9cd 3206 	strd	r3, r2, [sp, #24]
    1392:	9105      	str	r1, [sp, #20]
    1394:	f007 ffc4 	bl	9320 <strlen>
    1398:	3602      	adds	r6, #2
    139a:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
    139e:	9905      	ldr	r1, [sp, #20]
    13a0:	4406      	add	r6, r0
    13a2:	e7bb      	b.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
		} else if (size == sizeof(int)) {
    13a4:	9800      	ldr	r0, [sp, #0]
    13a6:	2804      	cmp	r0, #4
    13a8:	d108      	bne.n	13bc <CONFIG_FPROTECT_BLOCK_SIZE+0x3bc>
			int v = va_arg(ap, int);
    13aa:	f109 0c04 	add.w	ip, r9, #4
			if (buf0 != NULL) {
    13ae:	b115      	cbz	r5, 13b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b6>
			int v = va_arg(ap, int);
    13b0:	f8d9 0000 	ldr.w	r0, [r9]
				*(int *)buf = v;
    13b4:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
    13b6:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
    13b8:	46e1      	mov	r9, ip
    13ba:	e7b4      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
		} else if (size == sizeof(long long)) {
    13bc:	9800      	ldr	r0, [sp, #0]
    13be:	2808      	cmp	r0, #8
    13c0:	d10c      	bne.n	13dc <CONFIG_FPROTECT_BLOCK_SIZE+0x3dc>
			long long v = va_arg(ap, long long);
    13c2:	f109 0007 	add.w	r0, r9, #7
    13c6:	f020 0007 	bic.w	r0, r0, #7
    13ca:	f100 0908 	add.w	r9, r0, #8
			if (buf0 != NULL) {
    13ce:	b11d      	cbz	r5, 13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
			long long v = va_arg(ap, long long);
    13d0:	e9d0 bc00 	ldrd	fp, ip, [r0]
    13d4:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
    13d8:	3408      	adds	r4, #8
    13da:	e7a4      	b.n	1326 <CONFIG_FPROTECT_BLOCK_SIZE+0x326>
			__ASSERT(false, "unexpected size %u", size);
    13dc:	4a3a      	ldr	r2, [pc, #232]	; (14c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c8>)
    13de:	493b      	ldr	r1, [pc, #236]	; (14cc <CONFIG_FPROTECT_BLOCK_SIZE+0x4cc>)
    13e0:	483b      	ldr	r0, [pc, #236]	; (14d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d0>)
    13e2:	f240 2331 	movw	r3, #561	; 0x231
    13e6:	f007 fed4 	bl	9192 <assert_print>
    13ea:	9900      	ldr	r1, [sp, #0]
    13ec:	4839      	ldr	r0, [pc, #228]	; (14d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d4>)
    13ee:	f007 fed0 	bl	9192 <assert_print>
    13f2:	f240 2131 	movw	r1, #561	; 0x231
    13f6:	e645      	b.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
	if (buf0 == NULL) {
    13f8:	b91d      	cbnz	r5, 1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    13fa:	f1a6 0408 	sub.w	r4, r6, #8
    13fe:	1860      	adds	r0, r4, r1
    1400:	e742      	b.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
	if (rws_pos_en) {
    1402:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
    1404:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
    1406:	0889      	lsrs	r1, r1, #2
    1408:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
    140a:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
    140e:	b1a3      	cbz	r3, 143a <CONFIG_FPROTECT_BLOCK_SIZE+0x43a>
		buf0[1] = 0;
    1410:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
    1412:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
    1414:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
    1418:	f1ba 0f00 	cmp.w	sl, #0
    141c:	d006      	beq.n	142c <CONFIG_FPROTECT_BLOCK_SIZE+0x42c>
    141e:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    1420:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
    1424:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
    1428:	4562      	cmp	r2, ip
    142a:	d10a      	bne.n	1442 <CONFIG_FPROTECT_BLOCK_SIZE+0x442>
    142c:	f10d 0820 	add.w	r8, sp, #32
    1430:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
    1434:	f1c5 0b01 	rsb	fp, r5, #1
    1438:	e039      	b.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
		buf0[3] = 0;
    143a:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
    143c:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
    143e:	70eb      	strb	r3, [r5, #3]
    1440:	e7e8      	b.n	1414 <CONFIG_FPROTECT_BLOCK_SIZE+0x414>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1442:	f810 1b01 	ldrb.w	r1, [r0], #1
    1446:	060b      	lsls	r3, r1, #24
    1448:	d508      	bpl.n	145c <CONFIG_FPROTECT_BLOCK_SIZE+0x45c>
			if (BUF_OFFSET + 1 > len) {
    144a:	eb04 080e 	add.w	r8, r4, lr
    144e:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1450:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    1454:	f63f af16 	bhi.w	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
			*buf++ = pos;
    1458:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
    145c:	f10c 0c01 	add.w	ip, ip, #1
    1460:	e7e2      	b.n	1428 <CONFIG_FPROTECT_BLOCK_SIZE+0x428>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1462:	f1ba 0f00 	cmp.w	sl, #0
    1466:	d003      	beq.n	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
    1468:	f998 2000 	ldrsb.w	r2, [r8]
    146c:	2a00      	cmp	r2, #0
    146e:	db1c      	blt.n	14aa <CONFIG_FPROTECT_BLOCK_SIZE+0x4aa>
		if (rws_pos_en) {
    1470:	9b01      	ldr	r3, [sp, #4]
    1472:	bb03      	cbnz	r3, 14b6 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b6>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1474:	f898 2000 	ldrb.w	r2, [r8]
    1478:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    147c:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1480:	4638      	mov	r0, r7
    1482:	f007 ff4d 	bl	9320 <strlen>
    1486:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
    1488:	eb04 010b 	add.w	r1, r4, fp
    148c:	4411      	add	r1, r2
    148e:	42b1      	cmp	r1, r6
    1490:	f63f aef8 	bhi.w	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
		*buf++ = str_ptr_pos[i];
    1494:	f898 1000 	ldrb.w	r1, [r8]
    1498:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
    149c:	4639      	mov	r1, r7
    149e:	4620      	mov	r0, r4
    14a0:	9200      	str	r2, [sp, #0]
    14a2:	f007 ff59 	bl	9358 <memcpy>
		buf += size;
    14a6:	9a00      	ldr	r2, [sp, #0]
    14a8:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    14aa:	f108 0801 	add.w	r8, r8, #1
    14ae:	45c1      	cmp	r9, r8
    14b0:	d1d7      	bne.n	1462 <CONFIG_FPROTECT_BLOCK_SIZE+0x462>
	return BUF_OFFSET;
    14b2:	1b60      	subs	r0, r4, r5
    14b4:	e6e8      	b.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
			size = 0;
    14b6:	2200      	movs	r2, #0
    14b8:	e7e6      	b.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
		return -EFAULT;
    14ba:	f06f 000d 	mvn.w	r0, #13
    14be:	e6e3      	b.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    14c0:	2907      	cmp	r1, #7
    14c2:	f63f adab 	bhi.w	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
    14c6:	e6dd      	b.n	1284 <CONFIG_FPROTECT_BLOCK_SIZE+0x284>
    14c8:	0000a60d 	.word	0x0000a60d
    14cc:	0000a2aa 	.word	0x0000a2aa
    14d0:	0000a107 	.word	0x0000a107
    14d4:	0000a676 	.word	0x0000a676

000014d8 <sys_notify_finalize>:
	return rv;
}

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    14d8:	b538      	push	{r3, r4, r5, lr}
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    14da:	6844      	ldr	r4, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    14dc:	6081      	str	r1, [r0, #8]

	return method & SYS_NOTIFY_METHOD_MASK;
    14de:	f004 0403 	and.w	r4, r4, #3
	switch (method) {
    14e2:	2c03      	cmp	r4, #3
{
    14e4:	4605      	mov	r5, r0
	switch (method) {
    14e6:	d002      	beq.n	14ee <sys_notify_finalize+0x16>
    14e8:	b12c      	cbz	r4, 14f6 <sys_notify_finalize+0x1e>
    14ea:	2000      	movs	r0, #0
    14ec:	e000      	b.n	14f0 <sys_notify_finalize+0x18>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    14ee:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    14f0:	2300      	movs	r3, #0
    14f2:	606b      	str	r3, [r5, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    14f4:	bd38      	pop	{r3, r4, r5, pc}
		__ASSERT_NO_MSG(false);
    14f6:	4a05      	ldr	r2, [pc, #20]	; (150c <sys_notify_finalize+0x34>)
    14f8:	4905      	ldr	r1, [pc, #20]	; (1510 <sys_notify_finalize+0x38>)
    14fa:	4806      	ldr	r0, [pc, #24]	; (1514 <sys_notify_finalize+0x3c>)
    14fc:	2345      	movs	r3, #69	; 0x45
    14fe:	f007 fe48 	bl	9192 <assert_print>
    1502:	4802      	ldr	r0, [pc, #8]	; (150c <sys_notify_finalize+0x34>)
    1504:	2145      	movs	r1, #69	; 0x45
    1506:	f007 fe3d 	bl	9184 <assert_post_action>
    150a:	e7ee      	b.n	14ea <sys_notify_finalize+0x12>
    150c:	0000a6a2 	.word	0x0000a6a2
    1510:	0000a2aa 	.word	0x0000a2aa
    1514:	0000a107 	.word	0x0000a107

00001518 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
    1518:	4b01      	ldr	r3, [pc, #4]	; (1520 <__printk_hook_install+0x8>)
    151a:	6018      	str	r0, [r3, #0]
}
    151c:	4770      	bx	lr
    151e:	bf00      	nop
    1520:	20000098 	.word	0x20000098

00001524 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1524:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1528:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    152c:	9200      	str	r2, [sp, #0]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    152e:	f019 0f08 	tst.w	r9, #8
{
    1532:	4604      	mov	r4, r0
	if (processing) {
    1534:	d022      	beq.n	157c <process_event+0x58>
		if (evt == EVT_COMPLETE) {
    1536:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1538:	bf0c      	ite	eq
    153a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    153e:	f049 0920 	orrne.w	r9, r9, #32
    1542:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1546:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1548:	4620      	mov	r0, r4
    154a:	f005 fa2d 	bl	69a8 <z_spin_unlock_valid>
    154e:	b968      	cbnz	r0, 156c <process_event+0x48>
    1550:	4a9b      	ldr	r2, [pc, #620]	; (17c0 <process_event+0x29c>)
    1552:	499c      	ldr	r1, [pc, #624]	; (17c4 <process_event+0x2a0>)
    1554:	489c      	ldr	r0, [pc, #624]	; (17c8 <process_event+0x2a4>)
    1556:	23b9      	movs	r3, #185	; 0xb9
    1558:	f007 fe1b 	bl	9192 <assert_print>
    155c:	489b      	ldr	r0, [pc, #620]	; (17cc <process_event+0x2a8>)
    155e:	4621      	mov	r1, r4
    1560:	f007 fe17 	bl	9192 <assert_print>
    1564:	4896      	ldr	r0, [pc, #600]	; (17c0 <process_event+0x29c>)
    1566:	21b9      	movs	r1, #185	; 0xb9
    1568:	f007 fe0c 	bl	9184 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    156c:	9b00      	ldr	r3, [sp, #0]
    156e:	f383 8811 	msr	BASEPRI, r3
    1572:	f3bf 8f6f 	isb	sy
}
    1576:	b003      	add	sp, #12
    1578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    157c:	4f94      	ldr	r7, [pc, #592]	; (17d0 <process_event+0x2ac>)
    157e:	f8df 8248 	ldr.w	r8, [pc, #584]	; 17c8 <process_event+0x2a4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1582:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1586:	2902      	cmp	r1, #2
    1588:	d106      	bne.n	1598 <process_event+0x74>
			evt = process_recheck(mgr);
    158a:	4620      	mov	r0, r4
    158c:	f007 fd14 	bl	8fb8 <process_recheck>
		if (evt == EVT_NOP) {
    1590:	2800      	cmp	r0, #0
    1592:	d0d8      	beq.n	1546 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    1594:	2801      	cmp	r0, #1
    1596:	d164      	bne.n	1662 <process_event+0x13e>
			res = mgr->last_res;
    1598:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    159c:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    159e:	f1bb 0f00 	cmp.w	fp, #0
    15a2:	da19      	bge.n	15d8 <process_event+0xb4>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    15a4:	2600      	movs	r6, #0
		*clients = mgr->clients;
    15a6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15a8:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    15ac:	e9c4 6600 	strd	r6, r6, [r4]
    15b0:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    15b4:	83a3      	strh	r3, [r4, #28]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15b6:	8ba3      	ldrh	r3, [r4, #28]
    15b8:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    15bc:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15be:	9201      	str	r2, [sp, #4]
				   && !sys_slist_is_empty(&mgr->monitors);
    15c0:	d003      	beq.n	15ca <process_event+0xa6>
		if (do_monitors
    15c2:	68a2      	ldr	r2, [r4, #8]
    15c4:	2a00      	cmp	r2, #0
    15c6:	f040 8113 	bne.w	17f0 <process_event+0x2cc>
		    || !sys_slist_is_empty(&clients)
    15ca:	b915      	cbnz	r5, 15d2 <process_event+0xae>
		    || (transit != NULL)) {
    15cc:	2e00      	cmp	r6, #0
    15ce:	f000 8159 	beq.w	1884 <process_event+0x360>
    15d2:	f04f 0a00 	mov.w	sl, #0
    15d6:	e10d      	b.n	17f4 <process_event+0x2d0>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    15d8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    15dc:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    15de:	2901      	cmp	r1, #1
    15e0:	d820      	bhi.n	1624 <process_event+0x100>
	list->head = NULL;
    15e2:	2100      	movs	r1, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15e4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    15e8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    15ea:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15ec:	b29b      	uxth	r3, r3
	list->tail = NULL;
    15ee:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    15f2:	d10a      	bne.n	160a <process_event+0xe6>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    15f4:	b13d      	cbz	r5, 1606 <process_event+0xe2>
    15f6:	8be2      	ldrh	r2, [r4, #30]
    15f8:	4629      	mov	r1, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    15fa:	6809      	ldr	r1, [r1, #0]
				mgr->refs += 1U;
    15fc:	3201      	adds	r2, #1
    15fe:	b292      	uxth	r2, r2
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1600:	2900      	cmp	r1, #0
    1602:	d1fa      	bne.n	15fa <process_event+0xd6>
    1604:	83e2      	strh	r2, [r4, #30]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1606:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    160a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    160c:	4620      	mov	r0, r4
    160e:	f007 fcd3 	bl	8fb8 <process_recheck>
    1612:	4606      	mov	r6, r0
    1614:	2800      	cmp	r0, #0
    1616:	d0ce      	beq.n	15b6 <process_event+0x92>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1618:	8ba3      	ldrh	r3, [r4, #28]
    161a:	f043 0320 	orr.w	r3, r3, #32
    161e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1620:	2600      	movs	r6, #0
    1622:	e7c8      	b.n	15b6 <process_event+0x92>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1624:	2a04      	cmp	r2, #4
    1626:	d10d      	bne.n	1644 <process_event+0x120>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1628:	f023 0307 	bic.w	r3, r3, #7
    162c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    162e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1630:	4620      	mov	r0, r4
    1632:	f007 fcc1 	bl	8fb8 <process_recheck>
    1636:	4605      	mov	r5, r0
    1638:	b188      	cbz	r0, 165e <process_event+0x13a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    163a:	f042 0220 	orr.w	r2, r2, #32
    163e:	83a2      	strh	r2, [r4, #28]
    1640:	2500      	movs	r5, #0
    1642:	e7ed      	b.n	1620 <process_event+0xfc>
		__ASSERT_NO_MSG(false);
    1644:	4963      	ldr	r1, [pc, #396]	; (17d4 <process_event+0x2b0>)
    1646:	f240 131b 	movw	r3, #283	; 0x11b
    164a:	463a      	mov	r2, r7
    164c:	4640      	mov	r0, r8
    164e:	f007 fda0 	bl	9192 <assert_print>
    1652:	f240 111b 	movw	r1, #283	; 0x11b
    1656:	4638      	mov	r0, r7
    1658:	f007 fd94 	bl	9184 <assert_post_action>
    165c:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    165e:	462e      	mov	r6, r5
    1660:	e7a9      	b.n	15b6 <process_event+0x92>
		} else if (evt == EVT_START) {
    1662:	2803      	cmp	r0, #3
    1664:	d134      	bne.n	16d0 <process_event+0x1ac>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    1666:	f1b9 0f00 	cmp.w	r9, #0
    166a:	d00b      	beq.n	1684 <process_event+0x160>
    166c:	495a      	ldr	r1, [pc, #360]	; (17d8 <process_event+0x2b4>)
    166e:	4640      	mov	r0, r8
    1670:	f44f 73ab 	mov.w	r3, #342	; 0x156
    1674:	463a      	mov	r2, r7
    1676:	f007 fd8c 	bl	9192 <assert_print>
    167a:	f44f 71ab 	mov.w	r1, #342	; 0x156
    167e:	4638      	mov	r0, r7
    1680:	f007 fd80 	bl	9184 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    1684:	6823      	ldr	r3, [r4, #0]
    1686:	b95b      	cbnz	r3, 16a0 <process_event+0x17c>
    1688:	4954      	ldr	r1, [pc, #336]	; (17dc <process_event+0x2b8>)
    168a:	4640      	mov	r0, r8
    168c:	f240 1357 	movw	r3, #343	; 0x157
    1690:	463a      	mov	r2, r7
    1692:	f007 fd7e 	bl	9192 <assert_print>
    1696:	f240 1157 	movw	r1, #343	; 0x157
    169a:	4638      	mov	r0, r7
    169c:	f007 fd72 	bl	9184 <assert_post_action>
			transit = mgr->transitions->start;
    16a0:	6923      	ldr	r3, [r4, #16]
    16a2:	681e      	ldr	r6, [r3, #0]
			__ASSERT_NO_MSG(transit != NULL);
    16a4:	b95e      	cbnz	r6, 16be <process_event+0x19a>
    16a6:	494e      	ldr	r1, [pc, #312]	; (17e0 <process_event+0x2bc>)
    16a8:	4640      	mov	r0, r8
    16aa:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    16ae:	463a      	mov	r2, r7
    16b0:	f007 fd6f 	bl	9192 <assert_print>
    16b4:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    16b8:	4638      	mov	r0, r7
    16ba:	f007 fd63 	bl	9184 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    16be:	8ba3      	ldrh	r3, [r4, #28]
    16c0:	f023 0307 	bic.w	r3, r3, #7
    16c4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    16c8:	83a3      	strh	r3, [r4, #28]
}
    16ca:	2500      	movs	r5, #0
		res = 0;
    16cc:	46ab      	mov	fp, r5
}
    16ce:	e772      	b.n	15b6 <process_event+0x92>
		} else if (evt == EVT_STOP) {
    16d0:	2804      	cmp	r0, #4
    16d2:	d131      	bne.n	1738 <process_event+0x214>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    16d4:	f1b9 0f02 	cmp.w	r9, #2
    16d8:	d00b      	beq.n	16f2 <process_event+0x1ce>
    16da:	4942      	ldr	r1, [pc, #264]	; (17e4 <process_event+0x2c0>)
    16dc:	4640      	mov	r0, r8
    16de:	f240 135d 	movw	r3, #349	; 0x15d
    16e2:	463a      	mov	r2, r7
    16e4:	f007 fd55 	bl	9192 <assert_print>
    16e8:	f240 115d 	movw	r1, #349	; 0x15d
    16ec:	4638      	mov	r0, r7
    16ee:	f007 fd49 	bl	9184 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    16f2:	8be3      	ldrh	r3, [r4, #30]
    16f4:	b15b      	cbz	r3, 170e <process_event+0x1ea>
    16f6:	493c      	ldr	r1, [pc, #240]	; (17e8 <process_event+0x2c4>)
    16f8:	4640      	mov	r0, r8
    16fa:	f44f 73af 	mov.w	r3, #350	; 0x15e
    16fe:	463a      	mov	r2, r7
    1700:	f007 fd47 	bl	9192 <assert_print>
    1704:	f44f 71af 	mov.w	r1, #350	; 0x15e
    1708:	4638      	mov	r0, r7
    170a:	f007 fd3b 	bl	9184 <assert_post_action>
			transit = mgr->transitions->stop;
    170e:	6923      	ldr	r3, [r4, #16]
    1710:	685e      	ldr	r6, [r3, #4]
			__ASSERT_NO_MSG(transit != NULL);
    1712:	b95e      	cbnz	r6, 172c <process_event+0x208>
    1714:	4932      	ldr	r1, [pc, #200]	; (17e0 <process_event+0x2bc>)
    1716:	4640      	mov	r0, r8
    1718:	f240 1361 	movw	r3, #353	; 0x161
    171c:	463a      	mov	r2, r7
    171e:	f007 fd38 	bl	9192 <assert_print>
    1722:	f240 1161 	movw	r1, #353	; 0x161
    1726:	4638      	mov	r0, r7
    1728:	f007 fd2c 	bl	9184 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    172c:	8ba3      	ldrh	r3, [r4, #28]
    172e:	f023 0307 	bic.w	r3, r3, #7
    1732:	f043 0304 	orr.w	r3, r3, #4
    1736:	e7c7      	b.n	16c8 <process_event+0x1a4>
		} else if (evt == EVT_RESET) {
    1738:	2805      	cmp	r0, #5
    173a:	d131      	bne.n	17a0 <process_event+0x27c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    173c:	f1b9 0f01 	cmp.w	r9, #1
    1740:	d00b      	beq.n	175a <process_event+0x236>
    1742:	492a      	ldr	r1, [pc, #168]	; (17ec <process_event+0x2c8>)
    1744:	4640      	mov	r0, r8
    1746:	f44f 73b2 	mov.w	r3, #356	; 0x164
    174a:	463a      	mov	r2, r7
    174c:	f007 fd21 	bl	9192 <assert_print>
    1750:	f44f 71b2 	mov.w	r1, #356	; 0x164
    1754:	4638      	mov	r0, r7
    1756:	f007 fd15 	bl	9184 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    175a:	6823      	ldr	r3, [r4, #0]
    175c:	b95b      	cbnz	r3, 1776 <process_event+0x252>
    175e:	491f      	ldr	r1, [pc, #124]	; (17dc <process_event+0x2b8>)
    1760:	4640      	mov	r0, r8
    1762:	f240 1365 	movw	r3, #357	; 0x165
    1766:	463a      	mov	r2, r7
    1768:	f007 fd13 	bl	9192 <assert_print>
    176c:	f240 1165 	movw	r1, #357	; 0x165
    1770:	4638      	mov	r0, r7
    1772:	f007 fd07 	bl	9184 <assert_post_action>
			transit = mgr->transitions->reset;
    1776:	6923      	ldr	r3, [r4, #16]
    1778:	689e      	ldr	r6, [r3, #8]
			__ASSERT_NO_MSG(transit != NULL);
    177a:	b95e      	cbnz	r6, 1794 <process_event+0x270>
    177c:	4918      	ldr	r1, [pc, #96]	; (17e0 <process_event+0x2bc>)
    177e:	4640      	mov	r0, r8
    1780:	f44f 73b4 	mov.w	r3, #360	; 0x168
    1784:	463a      	mov	r2, r7
    1786:	f007 fd04 	bl	9192 <assert_print>
    178a:	f44f 71b4 	mov.w	r1, #360	; 0x168
    178e:	4638      	mov	r0, r7
    1790:	f007 fcf8 	bl	9184 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1794:	8ba3      	ldrh	r3, [r4, #28]
    1796:	f023 0307 	bic.w	r3, r3, #7
    179a:	f043 0305 	orr.w	r3, r3, #5
    179e:	e793      	b.n	16c8 <process_event+0x1a4>
			__ASSERT_NO_MSG(false);
    17a0:	490c      	ldr	r1, [pc, #48]	; (17d4 <process_event+0x2b0>)
    17a2:	f240 136b 	movw	r3, #363	; 0x16b
    17a6:	463a      	mov	r2, r7
    17a8:	4640      	mov	r0, r8
    17aa:	f007 fcf2 	bl	9192 <assert_print>
    17ae:	2500      	movs	r5, #0
    17b0:	f240 116b 	movw	r1, #363	; 0x16b
    17b4:	4638      	mov	r0, r7
    17b6:	f007 fce5 	bl	9184 <assert_post_action>
		onoff_transition_fn transit = NULL;
    17ba:	462e      	mov	r6, r5
    17bc:	e786      	b.n	16cc <process_event+0x1a8>
    17be:	bf00      	nop
    17c0:	0000a768 	.word	0x0000a768
    17c4:	0000a795 	.word	0x0000a795
    17c8:	0000a107 	.word	0x0000a107
    17cc:	0000a7ac 	.word	0x0000a7ac
    17d0:	0000a6c5 	.word	0x0000a6c5
    17d4:	0000a2aa 	.word	0x0000a2aa
    17d8:	0000a6e7 	.word	0x0000a6e7
    17dc:	0000a6f3 	.word	0x0000a6f3
    17e0:	0000a716 	.word	0x0000a716
    17e4:	0000a72d 	.word	0x0000a72d
    17e8:	0000a743 	.word	0x0000a743
    17ec:	0000a752 	.word	0x0000a752
				   && !sys_slist_is_empty(&mgr->monitors);
    17f0:	f04f 0a01 	mov.w	sl, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    17f4:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    17f8:	f104 0914 	add.w	r9, r4, #20
			mgr->flags = flags;
    17fc:	83a3      	strh	r3, [r4, #28]
    17fe:	4648      	mov	r0, r9
    1800:	f005 f8d2 	bl	69a8 <z_spin_unlock_valid>
    1804:	b968      	cbnz	r0, 1822 <process_event+0x2fe>
    1806:	4a38      	ldr	r2, [pc, #224]	; (18e8 <process_event+0x3c4>)
    1808:	4938      	ldr	r1, [pc, #224]	; (18ec <process_event+0x3c8>)
    180a:	23b9      	movs	r3, #185	; 0xb9
    180c:	4640      	mov	r0, r8
    180e:	f007 fcc0 	bl	9192 <assert_print>
    1812:	4837      	ldr	r0, [pc, #220]	; (18f0 <process_event+0x3cc>)
    1814:	4649      	mov	r1, r9
    1816:	f007 fcbc 	bl	9192 <assert_print>
    181a:	4833      	ldr	r0, [pc, #204]	; (18e8 <process_event+0x3c4>)
    181c:	21b9      	movs	r1, #185	; 0xb9
    181e:	f007 fcb1 	bl	9184 <assert_post_action>
    1822:	9b00      	ldr	r3, [sp, #0]
    1824:	f383 8811 	msr	BASEPRI, r3
    1828:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    182c:	f1ba 0f00 	cmp.w	sl, #0
    1830:	d137      	bne.n	18a2 <process_event+0x37e>
	while (!sys_slist_is_empty(list)) {
    1832:	2d00      	cmp	r5, #0
    1834:	d147      	bne.n	18c6 <process_event+0x3a2>
			if (transit != NULL) {
    1836:	b116      	cbz	r6, 183e <process_event+0x31a>
				transit(mgr, transition_complete);
    1838:	492e      	ldr	r1, [pc, #184]	; (18f4 <process_event+0x3d0>)
    183a:	4620      	mov	r0, r4
    183c:	47b0      	blx	r6
	__asm__ volatile(
    183e:	f04f 0320 	mov.w	r3, #32
    1842:	f3ef 8b11 	mrs	fp, BASEPRI
    1846:	f383 8812 	msr	BASEPRI_MAX, r3
    184a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    184e:	4648      	mov	r0, r9
	k.key = arch_irq_lock();
    1850:	f8cd b000 	str.w	fp, [sp]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1854:	f005 f89a 	bl	698c <z_spin_lock_valid>
    1858:	b968      	cbnz	r0, 1876 <process_event+0x352>
    185a:	4a23      	ldr	r2, [pc, #140]	; (18e8 <process_event+0x3c4>)
    185c:	4926      	ldr	r1, [pc, #152]	; (18f8 <process_event+0x3d4>)
    185e:	238e      	movs	r3, #142	; 0x8e
    1860:	4640      	mov	r0, r8
    1862:	f007 fc96 	bl	9192 <assert_print>
    1866:	4825      	ldr	r0, [pc, #148]	; (18fc <process_event+0x3d8>)
    1868:	4649      	mov	r1, r9
    186a:	f007 fc92 	bl	9192 <assert_print>
    186e:	481e      	ldr	r0, [pc, #120]	; (18e8 <process_event+0x3c4>)
    1870:	218e      	movs	r1, #142	; 0x8e
    1872:	f007 fc87 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    1876:	4648      	mov	r0, r9
    1878:	f005 f8a6 	bl	69c8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    187c:	8ba3      	ldrh	r3, [r4, #28]
    187e:	f023 0308 	bic.w	r3, r3, #8
    1882:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1884:	8ba3      	ldrh	r3, [r4, #28]
    1886:	06da      	lsls	r2, r3, #27
    1888:	d525      	bpl.n	18d6 <process_event+0x3b2>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    188a:	f023 0310 	bic.w	r3, r3, #16
    188e:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    1890:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1892:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    1896:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    189a:	2900      	cmp	r1, #0
    189c:	f47f ae73 	bne.w	1586 <process_event+0x62>
out:
    18a0:	e651      	b.n	1546 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    18a2:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    18a4:	2900      	cmp	r1, #0
    18a6:	d0c4      	beq.n	1832 <process_event+0x30e>
	return node->next;
    18a8:	f8d1 a000 	ldr.w	sl, [r1]
		mon->callback(mgr, mon, state, res);
    18ac:	684b      	ldr	r3, [r1, #4]
    18ae:	9a01      	ldr	r2, [sp, #4]
    18b0:	469c      	mov	ip, r3
    18b2:	4620      	mov	r0, r4
    18b4:	465b      	mov	r3, fp
    18b6:	47e0      	blx	ip
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    18b8:	f1ba 0f00 	cmp.w	sl, #0
    18bc:	d0b9      	beq.n	1832 <process_event+0x30e>
    18be:	4651      	mov	r1, sl
    18c0:	f8da a000 	ldr.w	sl, [sl]
    18c4:	e7f2      	b.n	18ac <process_event+0x388>
    18c6:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    18c8:	9a01      	ldr	r2, [sp, #4]
    18ca:	682d      	ldr	r5, [r5, #0]
    18cc:	465b      	mov	r3, fp
    18ce:	4620      	mov	r0, r4
    18d0:	f007 fb8e 	bl	8ff0 <notify_one>
    18d4:	e7ad      	b.n	1832 <process_event+0x30e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    18d6:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    18da:	bf1e      	ittt	ne
    18dc:	f023 0320 	bicne.w	r3, r3, #32
    18e0:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    18e2:	2102      	movne	r1, #2
    18e4:	e7d5      	b.n	1892 <process_event+0x36e>
    18e6:	bf00      	nop
    18e8:	0000a768 	.word	0x0000a768
    18ec:	0000a795 	.word	0x0000a795
    18f0:	0000a7ac 	.word	0x0000a7ac
    18f4:	00001901 	.word	0x00001901
    18f8:	0000a7c1 	.word	0x0000a7c1
    18fc:	0000a7d6 	.word	0x0000a7d6

00001900 <transition_complete>:
{
    1900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1902:	4604      	mov	r4, r0
    1904:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1906:	f100 0614 	add.w	r6, r0, #20
    190a:	f04f 0320 	mov.w	r3, #32
    190e:	f3ef 8711 	mrs	r7, BASEPRI
    1912:	f383 8812 	msr	BASEPRI_MAX, r3
    1916:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    191a:	4630      	mov	r0, r6
    191c:	f005 f836 	bl	698c <z_spin_lock_valid>
    1920:	b968      	cbnz	r0, 193e <transition_complete+0x3e>
    1922:	4a0c      	ldr	r2, [pc, #48]	; (1954 <transition_complete+0x54>)
    1924:	490c      	ldr	r1, [pc, #48]	; (1958 <transition_complete+0x58>)
    1926:	480d      	ldr	r0, [pc, #52]	; (195c <transition_complete+0x5c>)
    1928:	238e      	movs	r3, #142	; 0x8e
    192a:	f007 fc32 	bl	9192 <assert_print>
    192e:	480c      	ldr	r0, [pc, #48]	; (1960 <transition_complete+0x60>)
    1930:	4631      	mov	r1, r6
    1932:	f007 fc2e 	bl	9192 <assert_print>
    1936:	4807      	ldr	r0, [pc, #28]	; (1954 <transition_complete+0x54>)
    1938:	218e      	movs	r1, #142	; 0x8e
    193a:	f007 fc23 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    193e:	4630      	mov	r0, r6
    1940:	f005 f842 	bl	69c8 <z_spin_lock_set_owner>
	mgr->last_res = res;
    1944:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    1946:	463a      	mov	r2, r7
    1948:	4620      	mov	r0, r4
    194a:	2101      	movs	r1, #1
}
    194c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    1950:	f7ff bde8 	b.w	1524 <process_event>
    1954:	0000a768 	.word	0x0000a768
    1958:	0000a7c1 	.word	0x0000a7c1
    195c:	0000a107 	.word	0x0000a107
    1960:	0000a7d6 	.word	0x0000a7d6

00001964 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    1964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1968:	4604      	mov	r4, r0
    196a:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    196c:	f007 fb56 	bl	901c <validate_args>

	if (rv < 0) {
    1970:	1e05      	subs	r5, r0, #0
    1972:	db5e      	blt.n	1a32 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    1974:	f104 0914 	add.w	r9, r4, #20
    1978:	f04f 0320 	mov.w	r3, #32
    197c:	f3ef 8a11 	mrs	sl, BASEPRI
    1980:	f383 8812 	msr	BASEPRI_MAX, r3
    1984:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    1988:	4648      	mov	r0, r9
    198a:	f004 ffff 	bl	698c <z_spin_lock_valid>
    198e:	b968      	cbnz	r0, 19ac <onoff_request+0x48>
    1990:	4a38      	ldr	r2, [pc, #224]	; (1a74 <onoff_request+0x110>)
    1992:	4939      	ldr	r1, [pc, #228]	; (1a78 <onoff_request+0x114>)
    1994:	4839      	ldr	r0, [pc, #228]	; (1a7c <onoff_request+0x118>)
    1996:	238e      	movs	r3, #142	; 0x8e
    1998:	f007 fbfb 	bl	9192 <assert_print>
    199c:	4838      	ldr	r0, [pc, #224]	; (1a80 <onoff_request+0x11c>)
    199e:	4649      	mov	r1, r9
    19a0:	f007 fbf7 	bl	9192 <assert_print>
    19a4:	4833      	ldr	r0, [pc, #204]	; (1a74 <onoff_request+0x110>)
    19a6:	218e      	movs	r1, #142	; 0x8e
    19a8:	f007 fbec 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    19ac:	4648      	mov	r0, r9
    19ae:	f005 f80b 	bl	69c8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    19b2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    19b4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    19b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    19ba:	428b      	cmp	r3, r1
    19bc:	f002 0607 	and.w	r6, r2, #7
    19c0:	d050      	beq.n	1a64 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    19c2:	2e02      	cmp	r6, #2
    19c4:	d124      	bne.n	1a10 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    19c6:	3301      	adds	r3, #1
    19c8:	83e3      	strh	r3, [r4, #30]
	rv = state;
    19ca:	4635      	mov	r5, r6
		notify = true;
    19cc:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    19d0:	4648      	mov	r0, r9
    19d2:	f004 ffe9 	bl	69a8 <z_spin_unlock_valid>
    19d6:	b968      	cbnz	r0, 19f4 <onoff_request+0x90>
    19d8:	4a26      	ldr	r2, [pc, #152]	; (1a74 <onoff_request+0x110>)
    19da:	492a      	ldr	r1, [pc, #168]	; (1a84 <onoff_request+0x120>)
    19dc:	4827      	ldr	r0, [pc, #156]	; (1a7c <onoff_request+0x118>)
    19de:	23b9      	movs	r3, #185	; 0xb9
    19e0:	f007 fbd7 	bl	9192 <assert_print>
    19e4:	4828      	ldr	r0, [pc, #160]	; (1a88 <onoff_request+0x124>)
    19e6:	4649      	mov	r1, r9
    19e8:	f007 fbd3 	bl	9192 <assert_print>
    19ec:	4821      	ldr	r0, [pc, #132]	; (1a74 <onoff_request+0x110>)
    19ee:	21b9      	movs	r1, #185	; 0xb9
    19f0:	f007 fbc8 	bl	9184 <assert_post_action>
	__asm__ volatile(
    19f4:	f38a 8811 	msr	BASEPRI, sl
    19f8:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    19fc:	f1b8 0f00 	cmp.w	r8, #0
    1a00:	d017      	beq.n	1a32 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    1a02:	2300      	movs	r3, #0
    1a04:	4632      	mov	r2, r6
    1a06:	4639      	mov	r1, r7
    1a08:	4620      	mov	r0, r4
    1a0a:	f007 faf1 	bl	8ff0 <notify_one>
    1a0e:	e010      	b.n	1a32 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    1a10:	0793      	lsls	r3, r2, #30
    1a12:	d001      	beq.n	1a18 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    1a14:	2e06      	cmp	r6, #6
    1a16:	d10f      	bne.n	1a38 <onoff_request+0xd4>
	parent->next = child;
    1a18:	2300      	movs	r3, #0
    1a1a:	603b      	str	r3, [r7, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    1a1c:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    1a1e:	b9f3      	cbnz	r3, 1a5e <onoff_request+0xfa>
	list->head = node;
    1a20:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    1a24:	4635      	mov	r5, r6
    1a26:	b9fe      	cbnz	r6, 1a68 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    1a28:	4652      	mov	r2, sl
    1a2a:	2102      	movs	r1, #2
    1a2c:	4620      	mov	r0, r4
    1a2e:	f7ff fd79 	bl	1524 <process_event>
		}
	}

	return rv;
}
    1a32:	4628      	mov	r0, r5
    1a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    1a38:	2e05      	cmp	r6, #5
    1a3a:	d018      	beq.n	1a6e <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    1a3c:	2e01      	cmp	r6, #1
    1a3e:	d00b      	beq.n	1a58 <onoff_request+0xf4>
    1a40:	4912      	ldr	r1, [pc, #72]	; (1a8c <onoff_request+0x128>)
    1a42:	480e      	ldr	r0, [pc, #56]	; (1a7c <onoff_request+0x118>)
    1a44:	4a12      	ldr	r2, [pc, #72]	; (1a90 <onoff_request+0x12c>)
    1a46:	f240 13c9 	movw	r3, #457	; 0x1c9
    1a4a:	f007 fba2 	bl	9192 <assert_print>
    1a4e:	4810      	ldr	r0, [pc, #64]	; (1a90 <onoff_request+0x12c>)
    1a50:	f240 11c9 	movw	r1, #457	; 0x1c9
    1a54:	f007 fb96 	bl	9184 <assert_post_action>
		rv = -EIO;
    1a58:	f06f 0504 	mvn.w	r5, #4
    1a5c:	e004      	b.n	1a68 <onoff_request+0x104>
	parent->next = child;
    1a5e:	601f      	str	r7, [r3, #0]
	list->tail = node;
    1a60:	6067      	str	r7, [r4, #4]
}
    1a62:	e7df      	b.n	1a24 <onoff_request+0xc0>
		rv = -EAGAIN;
    1a64:	f06f 050a 	mvn.w	r5, #10
    1a68:	f04f 0800 	mov.w	r8, #0
    1a6c:	e7b0      	b.n	19d0 <onoff_request+0x6c>
		rv = -ENOTSUP;
    1a6e:	f06f 0585 	mvn.w	r5, #133	; 0x85
    1a72:	e7f9      	b.n	1a68 <onoff_request+0x104>
    1a74:	0000a768 	.word	0x0000a768
    1a78:	0000a7c1 	.word	0x0000a7c1
    1a7c:	0000a107 	.word	0x0000a107
    1a80:	0000a7d6 	.word	0x0000a7d6
    1a84:	0000a795 	.word	0x0000a795
    1a88:	0000a7ac 	.word	0x0000a7ac
    1a8c:	0000a752 	.word	0x0000a752
    1a90:	0000a6c5 	.word	0x0000a6c5

00001a94 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1a94:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
    1a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a9c:	4604      	mov	r4, r0
    1a9e:	460e      	mov	r6, r1
    1aa0:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
    1aa2:	d36a      	bcc.n	1b7a <sys_heap_init+0xe6>
    1aa4:	493e      	ldr	r1, [pc, #248]	; (1ba0 <sys_heap_init+0x10c>)
    1aa6:	4a3f      	ldr	r2, [pc, #252]	; (1ba4 <sys_heap_init+0x110>)
    1aa8:	483f      	ldr	r0, [pc, #252]	; (1ba8 <sys_heap_init+0x114>)
    1aaa:	f240 13e3 	movw	r3, #483	; 0x1e3
    1aae:	f007 fb70 	bl	9192 <assert_print>
    1ab2:	483e      	ldr	r0, [pc, #248]	; (1bac <sys_heap_init+0x118>)
    1ab4:	f007 fb6d 	bl	9192 <assert_print>
    1ab8:	f240 11e3 	movw	r1, #483	; 0x1e3
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1abc:	4839      	ldr	r0, [pc, #228]	; (1ba4 <sys_heap_init+0x110>)
    1abe:	f007 fb61 	bl	9184 <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
    1ac2:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1ac4:	1df5      	adds	r5, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1ac6:	443e      	add	r6, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    1ac8:	f025 0507 	bic.w	r5, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    1acc:	f026 0607 	bic.w	r6, r6, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1ad0:	1b76      	subs	r6, r6, r5

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1ad2:	2e17      	cmp	r6, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    1ad4:	ea4f 07d6 	mov.w	r7, r6, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
    1ad8:	d80e      	bhi.n	1af8 <sys_heap_init+0x64>
    1ada:	4935      	ldr	r1, [pc, #212]	; (1bb0 <sys_heap_init+0x11c>)
    1adc:	4a31      	ldr	r2, [pc, #196]	; (1ba4 <sys_heap_init+0x110>)
    1ade:	4832      	ldr	r0, [pc, #200]	; (1ba8 <sys_heap_init+0x114>)
    1ae0:	f240 13f3 	movw	r3, #499	; 0x1f3
    1ae4:	f007 fb55 	bl	9192 <assert_print>
    1ae8:	4832      	ldr	r0, [pc, #200]	; (1bb4 <sys_heap_init+0x120>)
    1aea:	f007 fb52 	bl	9192 <assert_print>
    1aee:	482d      	ldr	r0, [pc, #180]	; (1ba4 <sys_heap_init+0x110>)
    1af0:	f240 11f3 	movw	r1, #499	; 0x1f3
    1af4:	f007 fb46 	bl	9184 <assert_post_action>

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    1af8:	6025      	str	r5, [r4, #0]
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    1afa:	fab7 f487 	clz	r4, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    1afe:	f1c4 0820 	rsb	r8, r4, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    1b02:	f1c4 0424 	rsb	r4, r4, #36	; 0x24
    1b06:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    1b08:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    1b0a:	2300      	movs	r3, #0
    1b0c:	08e4      	lsrs	r4, r4, #3
    1b0e:	60eb      	str	r3, [r5, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1b10:	1c63      	adds	r3, r4, #1
    1b12:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
    1b14:	60af      	str	r7, [r5, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
    1b16:	d90e      	bls.n	1b36 <sys_heap_init+0xa2>
    1b18:	4927      	ldr	r1, [pc, #156]	; (1bb8 <sys_heap_init+0x124>)
    1b1a:	4a22      	ldr	r2, [pc, #136]	; (1ba4 <sys_heap_init+0x110>)
    1b1c:	4822      	ldr	r0, [pc, #136]	; (1ba8 <sys_heap_init+0x114>)
    1b1e:	f44f 7301 	mov.w	r3, #516	; 0x204
    1b22:	f007 fb36 	bl	9192 <assert_print>
    1b26:	4823      	ldr	r0, [pc, #140]	; (1bb4 <sys_heap_init+0x120>)
    1b28:	f007 fb33 	bl	9192 <assert_print>
    1b2c:	481d      	ldr	r0, [pc, #116]	; (1ba4 <sys_heap_init+0x110>)
    1b2e:	f44f 7101 	mov.w	r1, #516	; 0x204
    1b32:	f007 fb27 	bl	9184 <assert_post_action>
    1b36:	f105 0310 	add.w	r3, r5, #16
    1b3a:	eb03 0888 	add.w	r8, r3, r8, lsl #2
    1b3e:	2200      	movs	r2, #0

	for (int i = 0; i < nb_buckets; i++) {
    1b40:	4598      	cmp	r8, r3
    1b42:	d129      	bne.n	1b98 <sys_heap_init+0x104>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1b44:	0063      	lsls	r3, r4, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1b46:	f043 0301 	orr.w	r3, r3, #1
    1b4a:	806b      	strh	r3, [r5, #2]
		((uint16_t *)cmem)[f] = val;
    1b4c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    1b50:	1b3b      	subs	r3, r7, r4
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    1b52:	0058      	lsls	r0, r3, #1
		((uint16_t *)cmem)[f] = val;
    1b54:	802a      	strh	r2, [r5, #0]
    1b56:	8048      	strh	r0, [r1, #2]
    1b58:	19a9      	adds	r1, r5, r6
    1b5a:	f825 4034 	strh.w	r4, [r5, r4, lsl #3]
    1b5e:	804a      	strh	r2, [r1, #2]
    1b60:	53ab      	strh	r3, [r5, r6]
	void *cmem = &buf[c];
    1b62:	eb05 03c7 	add.w	r3, r5, r7, lsl #3
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    1b66:	4621      	mov	r1, r4
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    1b68:	885a      	ldrh	r2, [r3, #2]
    1b6a:	f042 0201 	orr.w	r2, r2, #1
    1b6e:	4628      	mov	r0, r5
    1b70:	805a      	strh	r2, [r3, #2]
}
    1b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
    1b76:	f007 ba82 	b.w	907e <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
    1b7a:	2a04      	cmp	r2, #4
    1b7c:	d8a1      	bhi.n	1ac2 <sys_heap_init+0x2e>
    1b7e:	490f      	ldr	r1, [pc, #60]	; (1bbc <sys_heap_init+0x128>)
    1b80:	4a08      	ldr	r2, [pc, #32]	; (1ba4 <sys_heap_init+0x110>)
    1b82:	4809      	ldr	r0, [pc, #36]	; (1ba8 <sys_heap_init+0x114>)
    1b84:	f44f 73f5 	mov.w	r3, #490	; 0x1ea
    1b88:	f007 fb03 	bl	9192 <assert_print>
    1b8c:	4809      	ldr	r0, [pc, #36]	; (1bb4 <sys_heap_init+0x120>)
    1b8e:	f007 fb00 	bl	9192 <assert_print>
    1b92:	f44f 71f5 	mov.w	r1, #490	; 0x1ea
    1b96:	e791      	b.n	1abc <sys_heap_init+0x28>
		h->buckets[i].next = 0;
    1b98:	f843 2b04 	str.w	r2, [r3], #4
	for (int i = 0; i < nb_buckets; i++) {
    1b9c:	e7d0      	b.n	1b40 <sys_heap_init+0xac>
    1b9e:	bf00      	nop
    1ba0:	0000a8ba 	.word	0x0000a8ba
    1ba4:	0000a7ee 	.word	0x0000a7ee
    1ba8:	0000a107 	.word	0x0000a107
    1bac:	0000a8d0 	.word	0x0000a8d0
    1bb0:	0000a921 	.word	0x0000a921
    1bb4:	0000a908 	.word	0x0000a908
    1bb8:	0000a94a 	.word	0x0000a94a
    1bbc:	0000a8e7 	.word	0x0000a8e7

00001bc0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1bc4:	b091      	sub	sp, #68	; 0x44
    1bc6:	468b      	mov	fp, r1
    1bc8:	9002      	str	r0, [sp, #8]
    1bca:	4692      	mov	sl, r2
    1bcc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1bce:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1bd0:	f89a 0000 	ldrb.w	r0, [sl]
    1bd4:	b908      	cbnz	r0, 1bda <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1bd6:	4628      	mov	r0, r5
    1bd8:	e35f      	b.n	229a <cbvprintf+0x6da>
		if (*fp != '%') {
    1bda:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1bdc:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    1be0:	d007      	beq.n	1bf2 <cbvprintf+0x32>
			OUTC('%');
    1be2:	9b02      	ldr	r3, [sp, #8]
    1be4:	4659      	mov	r1, fp
    1be6:	4798      	blx	r3
    1be8:	2800      	cmp	r0, #0
    1bea:	f2c0 8356 	blt.w	229a <cbvprintf+0x6da>
    1bee:	3501      	adds	r5, #1
			break;
    1bf0:	e212      	b.n	2018 <cbvprintf+0x458>
		} state = {
    1bf2:	2218      	movs	r2, #24
    1bf4:	2100      	movs	r1, #0
    1bf6:	a80a      	add	r0, sp, #40	; 0x28
    1bf8:	f007 fbb9 	bl	936e <memset>
	if (*sp == '%') {
    1bfc:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1c00:	2b25      	cmp	r3, #37	; 0x25
    1c02:	d078      	beq.n	1cf6 <cbvprintf+0x136>
    1c04:	2200      	movs	r2, #0
    1c06:	4610      	mov	r0, r2
    1c08:	4696      	mov	lr, r2
    1c0a:	4694      	mov	ip, r2
    1c0c:	4616      	mov	r6, r2
    1c0e:	4639      	mov	r1, r7
		switch (*sp) {
    1c10:	f817 3b01 	ldrb.w	r3, [r7], #1
    1c14:	2b2b      	cmp	r3, #43	; 0x2b
    1c16:	f000 809d 	beq.w	1d54 <cbvprintf+0x194>
    1c1a:	f200 8094 	bhi.w	1d46 <cbvprintf+0x186>
    1c1e:	2b20      	cmp	r3, #32
    1c20:	f000 809b 	beq.w	1d5a <cbvprintf+0x19a>
    1c24:	2b23      	cmp	r3, #35	; 0x23
    1c26:	f000 809b 	beq.w	1d60 <cbvprintf+0x1a0>
    1c2a:	b12e      	cbz	r6, 1c38 <cbvprintf+0x78>
    1c2c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1c30:	f046 0604 	orr.w	r6, r6, #4
    1c34:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1c38:	f1bc 0f00 	cmp.w	ip, #0
    1c3c:	d005      	beq.n	1c4a <cbvprintf+0x8a>
    1c3e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1c42:	f046 0608 	orr.w	r6, r6, #8
    1c46:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1c4a:	f1be 0f00 	cmp.w	lr, #0
    1c4e:	d005      	beq.n	1c5c <cbvprintf+0x9c>
    1c50:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1c54:	f046 0610 	orr.w	r6, r6, #16
    1c58:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1c5c:	b128      	cbz	r0, 1c6a <cbvprintf+0xaa>
    1c5e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1c62:	f040 0020 	orr.w	r0, r0, #32
    1c66:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1c6a:	b12a      	cbz	r2, 1c78 <cbvprintf+0xb8>
    1c6c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1c74:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1c78:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1c7c:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1c80:	2844      	cmp	r0, #68	; 0x44
    1c82:	d103      	bne.n	1c8c <cbvprintf+0xcc>
		conv->flag_zero = false;
    1c84:	f36f 1286 	bfc	r2, #6, #1
    1c88:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1c8c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1c90:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1c92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    1c96:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1c9a:	d17b      	bne.n	1d94 <cbvprintf+0x1d4>
		conv->width_star = true;
    1c9c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1ca0:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    1ca4:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1ca6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    1caa:	781a      	ldrb	r2, [r3, #0]
    1cac:	2a2e      	cmp	r2, #46	; 0x2e
    1cae:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1cb2:	bf0c      	ite	eq
    1cb4:	2101      	moveq	r1, #1
    1cb6:	2100      	movne	r1, #0
    1cb8:	f361 0241 	bfi	r2, r1, #1, #1
    1cbc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1cc0:	d174      	bne.n	1dac <cbvprintf+0x1ec>
	if (*sp == '*') {
    1cc2:	785a      	ldrb	r2, [r3, #1]
    1cc4:	2a2a      	cmp	r2, #42	; 0x2a
    1cc6:	d06a      	beq.n	1d9e <cbvprintf+0x1de>
	++sp;
    1cc8:	3301      	adds	r3, #1
	size_t val = 0;
    1cca:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1ccc:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1cce:	4618      	mov	r0, r3
    1cd0:	f810 2b01 	ldrb.w	r2, [r0], #1
    1cd4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1cd8:	2f09      	cmp	r7, #9
    1cda:	f240 808e 	bls.w	1dfa <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    1cde:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    1ce2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    1ce4:	f3c2 0040 	ubfx	r0, r2, #1, #1
    1ce8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    1cec:	f361 0241 	bfi	r2, r1, #1, #1
    1cf0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1cf4:	e05a      	b.n	1dac <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    1cf6:	f10a 0702 	add.w	r7, sl, #2
    1cfa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    1cfe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1d02:	07d9      	lsls	r1, r3, #31
    1d04:	f140 8149 	bpl.w	1f9a <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1d08:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1d0c:	f1b9 0f00 	cmp.w	r9, #0
    1d10:	da07      	bge.n	1d22 <cbvprintf+0x162>
				conv->flag_dash = true;
    1d12:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1d16:	f042 0204 	orr.w	r2, r2, #4
    1d1a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1d1e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1d22:	075a      	lsls	r2, r3, #29
    1d24:	f140 8142 	bpl.w	1fac <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1d28:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1d2c:	f1b8 0f00 	cmp.w	r8, #0
    1d30:	f280 8141 	bge.w	1fb6 <cbvprintf+0x3f6>
				conv->prec_present = false;
    1d34:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1d38:	f36f 0341 	bfc	r3, #1, #1
    1d3c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1d40:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    1d44:	e137      	b.n	1fb6 <cbvprintf+0x3f6>
		switch (*sp) {
    1d46:	2b2d      	cmp	r3, #45	; 0x2d
    1d48:	d00c      	beq.n	1d64 <cbvprintf+0x1a4>
    1d4a:	2b30      	cmp	r3, #48	; 0x30
    1d4c:	f47f af6d 	bne.w	1c2a <cbvprintf+0x6a>
			conv->flag_zero = true;
    1d50:	2201      	movs	r2, #1
	} while (loop);
    1d52:	e75c      	b.n	1c0e <cbvprintf+0x4e>
			conv->flag_plus = true;
    1d54:	f04f 0c01 	mov.w	ip, #1
    1d58:	e759      	b.n	1c0e <cbvprintf+0x4e>
			conv->flag_space = true;
    1d5a:	f04f 0e01 	mov.w	lr, #1
    1d5e:	e756      	b.n	1c0e <cbvprintf+0x4e>
			conv->flag_hash = true;
    1d60:	2001      	movs	r0, #1
    1d62:	e754      	b.n	1c0e <cbvprintf+0x4e>
		switch (*sp) {
    1d64:	2601      	movs	r6, #1
    1d66:	e752      	b.n	1c0e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1d68:	fb0c 0202 	mla	r2, ip, r2, r0
    1d6c:	3a30      	subs	r2, #48	; 0x30
    1d6e:	4633      	mov	r3, r6
    1d70:	461e      	mov	r6, r3
    1d72:	f816 0b01 	ldrb.w	r0, [r6], #1
    1d76:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1d7a:	2f09      	cmp	r7, #9
    1d7c:	d9f4      	bls.n	1d68 <cbvprintf+0x1a8>
	if (sp != wp) {
    1d7e:	4299      	cmp	r1, r3
    1d80:	d093      	beq.n	1caa <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1d82:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1d86:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1d88:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1d8a:	f362 0141 	bfi	r1, r2, #1, #1
    1d8e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1d92:	e78a      	b.n	1caa <cbvprintf+0xea>
    1d94:	460b      	mov	r3, r1
	size_t val = 0;
    1d96:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1d98:	f04f 0c0a 	mov.w	ip, #10
    1d9c:	e7e8      	b.n	1d70 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1d9e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1da2:	f042 0204 	orr.w	r2, r2, #4
    1da6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    1daa:	3302      	adds	r3, #2
	switch (*sp) {
    1dac:	461f      	mov	r7, r3
    1dae:	f817 2b01 	ldrb.w	r2, [r7], #1
    1db2:	2a6c      	cmp	r2, #108	; 0x6c
    1db4:	d041      	beq.n	1e3a <cbvprintf+0x27a>
    1db6:	d825      	bhi.n	1e04 <cbvprintf+0x244>
    1db8:	2a68      	cmp	r2, #104	; 0x68
    1dba:	d02b      	beq.n	1e14 <cbvprintf+0x254>
    1dbc:	2a6a      	cmp	r2, #106	; 0x6a
    1dbe:	d046      	beq.n	1e4e <cbvprintf+0x28e>
    1dc0:	2a4c      	cmp	r2, #76	; 0x4c
    1dc2:	d04c      	beq.n	1e5e <cbvprintf+0x29e>
    1dc4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1dc6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1dca:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    1dce:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1dd2:	2a78      	cmp	r2, #120	; 0x78
    1dd4:	f200 80d9 	bhi.w	1f8a <cbvprintf+0x3ca>
    1dd8:	2a57      	cmp	r2, #87	; 0x57
    1dda:	d84d      	bhi.n	1e78 <cbvprintf+0x2b8>
    1ddc:	2a41      	cmp	r2, #65	; 0x41
    1dde:	d003      	beq.n	1de8 <cbvprintf+0x228>
    1de0:	3a45      	subs	r2, #69	; 0x45
    1de2:	2a02      	cmp	r2, #2
    1de4:	f200 80d1 	bhi.w	1f8a <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    1de8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1dec:	2204      	movs	r2, #4
    1dee:	f362 0302 	bfi	r3, r2, #0, #3
    1df2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    1df6:	2301      	movs	r3, #1
			break;
    1df8:	e09e      	b.n	1f38 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    1dfa:	fb06 2101 	mla	r1, r6, r1, r2
    1dfe:	3930      	subs	r1, #48	; 0x30
    1e00:	4603      	mov	r3, r0
    1e02:	e764      	b.n	1cce <cbvprintf+0x10e>
	switch (*sp) {
    1e04:	2a74      	cmp	r2, #116	; 0x74
    1e06:	d026      	beq.n	1e56 <cbvprintf+0x296>
    1e08:	2a7a      	cmp	r2, #122	; 0x7a
    1e0a:	d1db      	bne.n	1dc4 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1e0c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1e10:	2206      	movs	r2, #6
    1e12:	e00d      	b.n	1e30 <cbvprintf+0x270>
		if (*++sp == 'h') {
    1e14:	785a      	ldrb	r2, [r3, #1]
    1e16:	2a68      	cmp	r2, #104	; 0x68
    1e18:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1e1c:	d106      	bne.n	1e2c <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1e1e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1e20:	f361 02c6 	bfi	r2, r1, #3, #4
    1e24:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1e28:	1c9f      	adds	r7, r3, #2
    1e2a:	e7cc      	b.n	1dc6 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1e2c:	4613      	mov	r3, r2
    1e2e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1e30:	f362 03c6 	bfi	r3, r2, #3, #4
    1e34:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1e38:	e7c5      	b.n	1dc6 <cbvprintf+0x206>
		if (*++sp == 'l') {
    1e3a:	785a      	ldrb	r2, [r3, #1]
    1e3c:	2a6c      	cmp	r2, #108	; 0x6c
    1e3e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1e42:	d101      	bne.n	1e48 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1e44:	2104      	movs	r1, #4
    1e46:	e7eb      	b.n	1e20 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1e48:	4613      	mov	r3, r2
    1e4a:	2203      	movs	r2, #3
    1e4c:	e7f0      	b.n	1e30 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1e4e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1e52:	2205      	movs	r2, #5
    1e54:	e7ec      	b.n	1e30 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    1e56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1e5a:	2207      	movs	r2, #7
    1e5c:	e7e8      	b.n	1e30 <cbvprintf+0x270>
		conv->unsupported = true;
    1e5e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1e62:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1e66:	f023 0302 	bic.w	r3, r3, #2
    1e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1e6e:	f043 0302 	orr.w	r3, r3, #2
    1e72:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1e76:	e7a6      	b.n	1dc6 <cbvprintf+0x206>
	switch (conv->specifier) {
    1e78:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1e7c:	2920      	cmp	r1, #32
    1e7e:	f200 8084 	bhi.w	1f8a <cbvprintf+0x3ca>
    1e82:	a001      	add	r0, pc, #4	; (adr r0, 1e88 <cbvprintf+0x2c8>)
    1e84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1e88:	00001f4d 	.word	0x00001f4d
    1e8c:	00001f8b 	.word	0x00001f8b
    1e90:	00001f8b 	.word	0x00001f8b
    1e94:	00001f8b 	.word	0x00001f8b
    1e98:	00001f8b 	.word	0x00001f8b
    1e9c:	00001f8b 	.word	0x00001f8b
    1ea0:	00001f8b 	.word	0x00001f8b
    1ea4:	00001f8b 	.word	0x00001f8b
    1ea8:	00001f8b 	.word	0x00001f8b
    1eac:	00001de9 	.word	0x00001de9
    1eb0:	00001f8b 	.word	0x00001f8b
    1eb4:	00001f4d 	.word	0x00001f4d
    1eb8:	00001f0d 	.word	0x00001f0d
    1ebc:	00001de9 	.word	0x00001de9
    1ec0:	00001de9 	.word	0x00001de9
    1ec4:	00001de9 	.word	0x00001de9
    1ec8:	00001f8b 	.word	0x00001f8b
    1ecc:	00001f0d 	.word	0x00001f0d
    1ed0:	00001f8b 	.word	0x00001f8b
    1ed4:	00001f8b 	.word	0x00001f8b
    1ed8:	00001f8b 	.word	0x00001f8b
    1edc:	00001f8b 	.word	0x00001f8b
    1ee0:	00001f55 	.word	0x00001f55
    1ee4:	00001f4d 	.word	0x00001f4d
    1ee8:	00001f71 	.word	0x00001f71
    1eec:	00001f8b 	.word	0x00001f8b
    1ef0:	00001f8b 	.word	0x00001f8b
    1ef4:	00001f71 	.word	0x00001f71
    1ef8:	00001f8b 	.word	0x00001f8b
    1efc:	00001f4d 	.word	0x00001f4d
    1f00:	00001f8b 	.word	0x00001f8b
    1f04:	00001f8b 	.word	0x00001f8b
    1f08:	00001f4d 	.word	0x00001f4d
		conv->specifier_cat = SPECIFIER_SINT;
    1f0c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1f10:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f12:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1f16:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f1a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1f1c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1f20:	bf02      	ittt	eq
    1f22:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1f26:	f041 0101 	orreq.w	r1, r1, #1
    1f2a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1f2e:	2a63      	cmp	r2, #99	; 0x63
    1f30:	d131      	bne.n	1f96 <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1f32:	3b00      	subs	r3, #0
    1f34:	bf18      	it	ne
    1f36:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1f38:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1f3c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1f40:	430b      	orrs	r3, r1
    1f42:	f363 0241 	bfi	r2, r3, #1, #1
    1f46:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1f4a:	e6d8      	b.n	1cfe <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1f4c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1f50:	2002      	movs	r0, #2
    1f52:	e7de      	b.n	1f12 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1f54:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f58:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1f5c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1f60:	2103      	movs	r1, #3
    1f62:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f66:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1f68:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1f6c:	4143      	adcs	r3, r0
    1f6e:	e7e3      	b.n	1f38 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1f70:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1f74:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1f76:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1f7a:	f361 0202 	bfi	r2, r1, #0, #3
    1f7e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1f82:	bf14      	ite	ne
    1f84:	2301      	movne	r3, #1
    1f86:	2300      	moveq	r3, #0
    1f88:	e7d6      	b.n	1f38 <cbvprintf+0x378>
		conv->invalid = true;
    1f8a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1f8e:	f043 0301 	orr.w	r3, r3, #1
    1f92:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1f96:	2300      	movs	r3, #0
    1f98:	e7ce      	b.n	1f38 <cbvprintf+0x378>
		} else if (conv->width_present) {
    1f9a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1f9e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1fa0:	bfb4      	ite	lt
    1fa2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1fa6:	f04f 39ff 	movge.w	r9, #4294967295	; 0xffffffff
    1faa:	e6ba      	b.n	1d22 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1fac:	079b      	lsls	r3, r3, #30
    1fae:	f57f aec7 	bpl.w	1d40 <cbvprintf+0x180>
			precision = conv->prec_value;
    1fb2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1fb6:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1fba:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1fbc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1fc0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1fc4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1fc8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1fca:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1fce:	d138      	bne.n	2042 <cbvprintf+0x482>
			switch (length_mod) {
    1fd0:	1ecb      	subs	r3, r1, #3
    1fd2:	2b04      	cmp	r3, #4
    1fd4:	d822      	bhi.n	201c <cbvprintf+0x45c>
    1fd6:	e8df f003 	tbb	[pc, r3]
    1fda:	0903      	.short	0x0903
    1fdc:	2109      	.short	0x2109
    1fde:	21          	.byte	0x21
    1fdf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1fe0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    1fe4:	17da      	asrs	r2, r3, #31
    1fe6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    1fea:	e006      	b.n	1ffa <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    1fec:	3407      	adds	r4, #7
    1fee:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    1ff2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1ff6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1ffa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1ffe:	f013 0603 	ands.w	r6, r3, #3
    2002:	d056      	beq.n	20b2 <cbvprintf+0x4f2>
			OUTS(sp, fp);
    2004:	9802      	ldr	r0, [sp, #8]
    2006:	463b      	mov	r3, r7
    2008:	4652      	mov	r2, sl
    200a:	4659      	mov	r1, fp
    200c:	f007 f8a4 	bl	9158 <outs>
    2010:	2800      	cmp	r0, #0
    2012:	f2c0 8142 	blt.w	229a <cbvprintf+0x6da>
    2016:	4405      	add	r5, r0
			continue;
    2018:	46ba      	mov	sl, r7
    201a:	e5d9      	b.n	1bd0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    201c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    2020:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2022:	ea4f 72e3 	mov.w	r2, r3, asr #31
    2026:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    202a:	d105      	bne.n	2038 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    202c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    2030:	930a      	str	r3, [sp, #40]	; 0x28
    2032:	2300      	movs	r3, #0
    2034:	930b      	str	r3, [sp, #44]	; 0x2c
    2036:	e7e0      	b.n	1ffa <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    2038:	2902      	cmp	r1, #2
    203a:	d1de      	bne.n	1ffa <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    203c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    2040:	e7d0      	b.n	1fe4 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2042:	2b02      	cmp	r3, #2
    2044:	d123      	bne.n	208e <cbvprintf+0x4ce>
			switch (length_mod) {
    2046:	1ecb      	subs	r3, r1, #3
    2048:	2b04      	cmp	r3, #4
    204a:	d813      	bhi.n	2074 <cbvprintf+0x4b4>
    204c:	e8df f003 	tbb	[pc, r3]
    2050:	120a0a03 	.word	0x120a0a03
    2054:	12          	.byte	0x12
    2055:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    2056:	6822      	ldr	r2, [r4, #0]
    2058:	920a      	str	r2, [sp, #40]	; 0x28
    205a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    205c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    205e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    2060:	4604      	mov	r4, r0
    2062:	e7ca      	b.n	1ffa <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    2064:	1de0      	adds	r0, r4, #7
    2066:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    206a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    206e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    2072:	e7f5      	b.n	2060 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    2074:	f854 3b04 	ldr.w	r3, [r4], #4
    2078:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    207a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    207c:	f04f 0300 	mov.w	r3, #0
    2080:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    2082:	d0d3      	beq.n	202c <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    2084:	2902      	cmp	r1, #2
    2086:	d1b8      	bne.n	1ffa <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    2088:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    208c:	e7d0      	b.n	2030 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    208e:	2b04      	cmp	r3, #4
    2090:	d109      	bne.n	20a6 <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    2092:	1de3      	adds	r3, r4, #7
    2094:	f023 0307 	bic.w	r3, r3, #7
    2098:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    209c:	e9d3 2300 	ldrd	r2, r3, [r3]
    20a0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    20a4:	e7a9      	b.n	1ffa <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    20a6:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    20a8:	bf04      	itt	eq
    20aa:	f854 3b04 	ldreq.w	r3, [r4], #4
    20ae:	930a      	streq	r3, [sp, #40]	; 0x28
    20b0:	e7a3      	b.n	1ffa <cbvprintf+0x43a>
		switch (conv->specifier) {
    20b2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    20b6:	2878      	cmp	r0, #120	; 0x78
    20b8:	d8ae      	bhi.n	2018 <cbvprintf+0x458>
    20ba:	2862      	cmp	r0, #98	; 0x62
    20bc:	d822      	bhi.n	2104 <cbvprintf+0x544>
    20be:	2825      	cmp	r0, #37	; 0x25
    20c0:	f43f ad8f 	beq.w	1be2 <cbvprintf+0x22>
    20c4:	2858      	cmp	r0, #88	; 0x58
    20c6:	d1a7      	bne.n	2018 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    20c8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    20cc:	9300      	str	r3, [sp, #0]
    20ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    20d2:	ab04      	add	r3, sp, #16
    20d4:	aa0c      	add	r2, sp, #48	; 0x30
    20d6:	f006 fff9 	bl	90cc <encode_uint>
    20da:	4682      	mov	sl, r0
			if (precision >= 0) {
    20dc:	f1b8 0f00 	cmp.w	r8, #0
    20e0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    20e4:	db0c      	blt.n	2100 <cbvprintf+0x540>
				conv->flag_zero = false;
    20e6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    20ea:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    20ee:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    20f2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    20f4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    20f8:	d902      	bls.n	2100 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    20fa:	eba8 0303 	sub.w	r3, r8, r3
    20fe:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    2100:	4680      	mov	r8, r0
    2102:	e03d      	b.n	2180 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    2104:	3863      	subs	r0, #99	; 0x63
    2106:	2815      	cmp	r0, #21
    2108:	d886      	bhi.n	2018 <cbvprintf+0x458>
    210a:	a201      	add	r2, pc, #4	; (adr r2, 2110 <cbvprintf+0x550>)
    210c:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    2110:	00002191 	.word	0x00002191
    2114:	000021f5 	.word	0x000021f5
    2118:	00002019 	.word	0x00002019
    211c:	00002019 	.word	0x00002019
    2120:	00002019 	.word	0x00002019
    2124:	00002019 	.word	0x00002019
    2128:	000021f5 	.word	0x000021f5
    212c:	00002019 	.word	0x00002019
    2130:	00002019 	.word	0x00002019
    2134:	00002019 	.word	0x00002019
    2138:	00002019 	.word	0x00002019
    213c:	0000224f 	.word	0x0000224f
    2140:	0000221d 	.word	0x0000221d
    2144:	00002221 	.word	0x00002221
    2148:	00002019 	.word	0x00002019
    214c:	00002019 	.word	0x00002019
    2150:	00002169 	.word	0x00002169
    2154:	00002019 	.word	0x00002019
    2158:	0000221d 	.word	0x0000221d
    215c:	00002019 	.word	0x00002019
    2160:	00002019 	.word	0x00002019
    2164:	0000221d 	.word	0x0000221d
			if (precision >= 0) {
    2168:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    216c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    2170:	db0a      	blt.n	2188 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    2172:	4641      	mov	r1, r8
    2174:	4650      	mov	r0, sl
    2176:	f007 f8da 	bl	932e <strnlen>
			bpe = bps + len;
    217a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    217e:	2600      	movs	r6, #0
		if (bps == NULL) {
    2180:	f1ba 0f00 	cmp.w	sl, #0
    2184:	d10c      	bne.n	21a0 <cbvprintf+0x5e0>
    2186:	e747      	b.n	2018 <cbvprintf+0x458>
				len = strlen(bps);
    2188:	4650      	mov	r0, sl
    218a:	f007 f8c9 	bl	9320 <strlen>
    218e:	e7f4      	b.n	217a <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2192:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    2196:	2600      	movs	r6, #0
			bps = buf;
    2198:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    219c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    21a0:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    21a4:	b106      	cbz	r6, 21a8 <cbvprintf+0x5e8>
			nj_len += 1U;
    21a6:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    21a8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    21ac:	06d0      	lsls	r0, r2, #27
    21ae:	d568      	bpl.n	2282 <cbvprintf+0x6c2>
			nj_len += 2U;
    21b0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    21b2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    21b4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    21b6:	bf48      	it	mi
    21b8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    21ba:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    21bc:	bf48      	it	mi
    21be:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    21c0:	f1b9 0f00 	cmp.w	r9, #0
    21c4:	dd76      	ble.n	22b4 <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    21c6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    21ca:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    21ce:	f3c2 0380 	ubfx	r3, r2, #2, #1
    21d2:	9303      	str	r3, [sp, #12]
    21d4:	0753      	lsls	r3, r2, #29
    21d6:	d46d      	bmi.n	22b4 <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    21d8:	0650      	lsls	r0, r2, #25
    21da:	d561      	bpl.n	22a0 <cbvprintf+0x6e0>
					if (sign != 0) {
    21dc:	b146      	cbz	r6, 21f0 <cbvprintf+0x630>
						OUTC(sign);
    21de:	9b02      	ldr	r3, [sp, #8]
    21e0:	4659      	mov	r1, fp
    21e2:	4630      	mov	r0, r6
    21e4:	4798      	blx	r3
    21e6:	2800      	cmp	r0, #0
    21e8:	db57      	blt.n	229a <cbvprintf+0x6da>
						sign = 0;
    21ea:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    21ec:	3501      	adds	r5, #1
						sign = 0;
    21ee:	461e      	mov	r6, r3
					pad = '0';
    21f0:	2330      	movs	r3, #48	; 0x30
    21f2:	e056      	b.n	22a2 <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    21f4:	071e      	lsls	r6, r3, #28
    21f6:	d40f      	bmi.n	2218 <cbvprintf+0x658>
				sign = ' ';
    21f8:	f013 0610 	ands.w	r6, r3, #16
    21fc:	bf18      	it	ne
    21fe:	2620      	movne	r6, #32
			sint = value->sint;
    2200:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    2204:	2b00      	cmp	r3, #0
    2206:	f6bf af5f 	bge.w	20c8 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    220a:	4252      	negs	r2, r2
    220c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2210:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    2214:	262d      	movs	r6, #45	; 0x2d
    2216:	e757      	b.n	20c8 <cbvprintf+0x508>
				sign = '+';
    2218:	262b      	movs	r6, #43	; 0x2b
    221a:	e7f1      	b.n	2200 <cbvprintf+0x640>
		switch (conv->specifier) {
    221c:	2600      	movs	r6, #0
    221e:	e753      	b.n	20c8 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    2220:	980a      	ldr	r0, [sp, #40]	; 0x28
    2222:	b340      	cbz	r0, 2276 <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2224:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    2228:	9300      	str	r3, [sp, #0]
    222a:	aa0c      	add	r2, sp, #48	; 0x30
    222c:	ab04      	add	r3, sp, #16
    222e:	2100      	movs	r1, #0
    2230:	f006 ff4c 	bl	90cc <encode_uint>
				conv->altform_0c = true;
    2234:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    2238:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    223c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2240:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2244:	4682      	mov	sl, r0
				conv->altform_0c = true;
    2246:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    224a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    224c:	e746      	b.n	20dc <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    224e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    2250:	2907      	cmp	r1, #7
    2252:	f63f aee1 	bhi.w	2018 <cbvprintf+0x458>
    2256:	e8df f001 	tbb	[pc, r1]
    225a:	040c      	.short	0x040c
    225c:	08080c06 	.word	0x08080c06
    2260:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    2262:	701d      	strb	r5, [r3, #0]
		break;
    2264:	e6d8      	b.n	2018 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    2266:	801d      	strh	r5, [r3, #0]
		break;
    2268:	e6d6      	b.n	2018 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    226a:	17ea      	asrs	r2, r5, #31
    226c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    2270:	e6d2      	b.n	2018 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2272:	601d      	str	r5, [r3, #0]
		break;
    2274:	e6d0      	b.n	2018 <cbvprintf+0x458>
			bps = "(nil)";
    2276:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2340 <cbvprintf+0x780>
    227a:	4606      	mov	r6, r0
			bpe = bps + 5;
    227c:	f10a 0805 	add.w	r8, sl, #5
    2280:	e78e      	b.n	21a0 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    2282:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    2284:	bf48      	it	mi
    2286:	3301      	addmi	r3, #1
    2288:	e793      	b.n	21b2 <cbvprintf+0x5f2>
					OUTC(pad);
    228a:	4618      	mov	r0, r3
    228c:	9303      	str	r3, [sp, #12]
    228e:	4659      	mov	r1, fp
    2290:	9b02      	ldr	r3, [sp, #8]
    2292:	4798      	blx	r3
    2294:	2800      	cmp	r0, #0
    2296:	9b03      	ldr	r3, [sp, #12]
    2298:	da04      	bge.n	22a4 <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    229a:	b011      	add	sp, #68	; 0x44
    229c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    22a0:	2320      	movs	r3, #32
    22a2:	444d      	add	r5, r9
    22a4:	464a      	mov	r2, r9
				while (width-- > 0) {
    22a6:	2a00      	cmp	r2, #0
    22a8:	eba5 0109 	sub.w	r1, r5, r9
    22ac:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    22b0:	dceb      	bgt.n	228a <cbvprintf+0x6ca>
    22b2:	460d      	mov	r5, r1
		if (sign != 0) {
    22b4:	b136      	cbz	r6, 22c4 <cbvprintf+0x704>
			OUTC(sign);
    22b6:	9b02      	ldr	r3, [sp, #8]
    22b8:	4659      	mov	r1, fp
    22ba:	4630      	mov	r0, r6
    22bc:	4798      	blx	r3
    22be:	2800      	cmp	r0, #0
    22c0:	dbeb      	blt.n	229a <cbvprintf+0x6da>
    22c2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    22c4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    22c8:	06d9      	lsls	r1, r3, #27
    22ca:	d401      	bmi.n	22d0 <cbvprintf+0x710>
    22cc:	071a      	lsls	r2, r3, #28
    22ce:	d506      	bpl.n	22de <cbvprintf+0x71e>
				OUTC('0');
    22d0:	9b02      	ldr	r3, [sp, #8]
    22d2:	4659      	mov	r1, fp
    22d4:	2030      	movs	r0, #48	; 0x30
    22d6:	4798      	blx	r3
    22d8:	2800      	cmp	r0, #0
    22da:	dbde      	blt.n	229a <cbvprintf+0x6da>
    22dc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    22de:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    22e2:	06db      	lsls	r3, r3, #27
    22e4:	d507      	bpl.n	22f6 <cbvprintf+0x736>
				OUTC(conv->specifier);
    22e6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    22ea:	9b02      	ldr	r3, [sp, #8]
    22ec:	4659      	mov	r1, fp
    22ee:	4798      	blx	r3
    22f0:	2800      	cmp	r0, #0
    22f2:	dbd2      	blt.n	229a <cbvprintf+0x6da>
    22f4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    22f6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    22f8:	442e      	add	r6, r5
    22fa:	1b73      	subs	r3, r6, r5
    22fc:	2b00      	cmp	r3, #0
    22fe:	dc16      	bgt.n	232e <cbvprintf+0x76e>
			OUTS(bps, bpe);
    2300:	9802      	ldr	r0, [sp, #8]
    2302:	4643      	mov	r3, r8
    2304:	4652      	mov	r2, sl
    2306:	4659      	mov	r1, fp
    2308:	f006 ff26 	bl	9158 <outs>
    230c:	2800      	cmp	r0, #0
    230e:	dbc4      	blt.n	229a <cbvprintf+0x6da>
    2310:	4405      	add	r5, r0
		while (width > 0) {
    2312:	44a9      	add	r9, r5
    2314:	eba9 0305 	sub.w	r3, r9, r5
    2318:	2b00      	cmp	r3, #0
    231a:	f77f ae7d 	ble.w	2018 <cbvprintf+0x458>
			OUTC(' ');
    231e:	9b02      	ldr	r3, [sp, #8]
    2320:	4659      	mov	r1, fp
    2322:	2020      	movs	r0, #32
    2324:	4798      	blx	r3
    2326:	2800      	cmp	r0, #0
    2328:	dbb7      	blt.n	229a <cbvprintf+0x6da>
    232a:	3501      	adds	r5, #1
			--width;
    232c:	e7f2      	b.n	2314 <cbvprintf+0x754>
				OUTC('0');
    232e:	9b02      	ldr	r3, [sp, #8]
    2330:	4659      	mov	r1, fp
    2332:	2030      	movs	r0, #48	; 0x30
    2334:	4798      	blx	r3
    2336:	2800      	cmp	r0, #0
    2338:	dbaf      	blt.n	229a <cbvprintf+0x6da>
    233a:	3501      	adds	r5, #1
    233c:	e7dd      	b.n	22fa <cbvprintf+0x73a>
    233e:	bf00      	nop
    2340:	0000a975 	.word	0x0000a975

00002344 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2344:	b508      	push	{r3, lr}
	__asm__ volatile(
    2346:	f04f 0220 	mov.w	r2, #32
    234a:	f3ef 8311 	mrs	r3, BASEPRI
    234e:	f382 8812 	msr	BASEPRI_MAX, r2
    2352:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2356:	f001 fd39 	bl	3dcc <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    235a:	4803      	ldr	r0, [pc, #12]	; (2368 <sys_reboot+0x24>)
    235c:	f006 fe1f 	bl	8f9e <printk>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2360:	f000 fe6c 	bl	303c <arch_cpu_idle>
    2364:	e7fc      	b.n	2360 <sys_reboot+0x1c>
    2366:	bf00      	nop
    2368:	0000a97b 	.word	0x0000a97b

0000236c <msg_process>:

	return (level <= backend_level);
}

static void msg_process(union log_msgs msg, bool bypass)
{
    236c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2370:	4606      	mov	r6, r0
	struct log_backend const *backend;

	if (!bypass) {
    2372:	460c      	mov	r4, r1
    2374:	b959      	cbnz	r1, 238e <msg_process+0x22>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    2376:	4d12      	ldr	r5, [pc, #72]	; (23c0 <msg_process+0x54>)
    2378:	4b12      	ldr	r3, [pc, #72]	; (23c4 <msg_process+0x58>)
	__ASSERT_NO_MSG(msg != NULL);
    237a:	4f13      	ldr	r7, [pc, #76]	; (23c8 <msg_process+0x5c>)
    237c:	f8df 904c 	ldr.w	r9, [pc, #76]	; 23cc <msg_process+0x60>
    2380:	f8df a04c 	ldr.w	sl, [pc, #76]	; 23d0 <msg_process+0x64>
	return __log_backends_end - __log_backends_start;
    2384:	1b5b      	subs	r3, r3, r5
    2386:	ea4f 1823 	mov.w	r8, r3, asr #4
		    IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
		    !panic_mode) {
			detect_missed_strdup(msg.msg);
		}

		for (int i = 0; i < log_backend_count_get(); i++) {
    238a:	4544      	cmp	r4, r8
    238c:	db01      	blt.n	2392 <msg_process+0x26>
	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_free(msg.msg2);
	} else if (IS_ENABLED(CONFIG_LOG1_DEFERRED)) {
		log_msg_put(msg.msg);
	}
}
    238e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (log_backend_is_active(backend) &&
    2392:	4628      	mov	r0, r5
    2394:	f006 ff0b 	bl	91ae <log_backend_is_active>
    2398:	b178      	cbz	r0, 23ba <msg_process+0x4e>
	__ASSERT_NO_MSG(msg != NULL);
    239a:	b94e      	cbnz	r6, 23b0 <msg_process+0x44>
    239c:	4649      	mov	r1, r9
    239e:	4650      	mov	r0, sl
    23a0:	2386      	movs	r3, #134	; 0x86
    23a2:	463a      	mov	r2, r7
    23a4:	f006 fef5 	bl	9192 <assert_print>
    23a8:	2186      	movs	r1, #134	; 0x86
    23aa:	4638      	mov	r0, r7
    23ac:	f006 feea 	bl	9184 <assert_post_action>
	backend->api->process(backend, msg);
    23b0:	682b      	ldr	r3, [r5, #0]
    23b2:	4631      	mov	r1, r6
    23b4:	681b      	ldr	r3, [r3, #0]
    23b6:	4628      	mov	r0, r5
    23b8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    23ba:	3401      	adds	r4, #1
    23bc:	3510      	adds	r5, #16
    23be:	e7e4      	b.n	238a <msg_process+0x1e>
    23c0:	00009d7c 	.word	0x00009d7c
    23c4:	00009d9c 	.word	0x00009d9c
    23c8:	0000a9a4 	.word	0x0000a9a4
    23cc:	0000a9dc 	.word	0x0000a9dc
    23d0:	0000a107 	.word	0x0000a107

000023d4 <log_format_func_t_get>:
}
    23d4:	4b01      	ldr	r3, [pc, #4]	; (23dc <log_format_func_t_get+0x8>)
    23d6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    23da:	4770      	bx	lr
    23dc:	00009df0 	.word	0x00009df0

000023e0 <log_core_init>:
	panic_mode = false;
    23e0:	4a05      	ldr	r2, [pc, #20]	; (23f8 <log_core_init+0x18>)
    23e2:	2300      	movs	r3, #0
    23e4:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    23e6:	4a05      	ldr	r2, [pc, #20]	; (23fc <log_core_init+0x1c>)
    23e8:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    23ea:	4b05      	ldr	r3, [pc, #20]	; (2400 <log_core_init+0x20>)
    23ec:	4a05      	ldr	r2, [pc, #20]	; (2404 <log_core_init+0x24>)
    23ee:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    23f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    23f4:	f000 ba8c 	b.w	2910 <log_output_timestamp_freq_set>
    23f8:	20000eef 	.word	0x20000eef
    23fc:	200005d4 	.word	0x200005d4
    2400:	2000009c 	.word	0x2000009c
    2404:	000091b5 	.word	0x000091b5

00002408 <log_init>:
{
    2408:	b570      	push	{r4, r5, r6, lr}
	return __log_backends_end - __log_backends_start;
    240a:	4b19      	ldr	r3, [pc, #100]	; (2470 <log_init+0x68>)
    240c:	4c19      	ldr	r4, [pc, #100]	; (2474 <log_init+0x6c>)
    240e:	1ae4      	subs	r4, r4, r3
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
    2410:	2c90      	cmp	r4, #144	; 0x90
    2412:	d90b      	bls.n	242c <log_init+0x24>
    2414:	4918      	ldr	r1, [pc, #96]	; (2478 <log_init+0x70>)
    2416:	4819      	ldr	r0, [pc, #100]	; (247c <log_init+0x74>)
    2418:	4a19      	ldr	r2, [pc, #100]	; (2480 <log_init+0x78>)
    241a:	f240 2373 	movw	r3, #627	; 0x273
    241e:	f006 feb8 	bl	9192 <assert_print>
    2422:	4817      	ldr	r0, [pc, #92]	; (2480 <log_init+0x78>)
    2424:	f240 2173 	movw	r1, #627	; 0x273
    2428:	f006 feac 	bl	9184 <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    242c:	f3bf 8f5b 	dmb	ish
    2430:	4b14      	ldr	r3, [pc, #80]	; (2484 <log_init+0x7c>)
    2432:	e853 6f00 	ldrex	r6, [r3]
    2436:	1c72      	adds	r2, r6, #1
    2438:	e843 2100 	strex	r1, r2, [r3]
    243c:	2900      	cmp	r1, #0
    243e:	d1f8      	bne.n	2432 <log_init+0x2a>
    2440:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2444:	b91e      	cbnz	r6, 244e <log_init+0x46>
    2446:	1125      	asrs	r5, r4, #4
    2448:	4c09      	ldr	r4, [pc, #36]	; (2470 <log_init+0x68>)
	for (i = 0; i < log_backend_count_get(); i++) {
    244a:	42ae      	cmp	r6, r5
    244c:	db00      	blt.n	2450 <log_init+0x48>
}
    244e:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    2450:	7b23      	ldrb	r3, [r4, #12]
    2452:	b153      	cbz	r3, 246a <log_init+0x62>
			if (backend->api->init != NULL) {
    2454:	6823      	ldr	r3, [r4, #0]
    2456:	699b      	ldr	r3, [r3, #24]
    2458:	b10b      	cbz	r3, 245e <log_init+0x56>
				backend->api->init(backend);
    245a:	4620      	mov	r0, r4
    245c:	4798      	blx	r3
			log_backend_enable(backend,
    245e:	6863      	ldr	r3, [r4, #4]
    2460:	2204      	movs	r2, #4
    2462:	6819      	ldr	r1, [r3, #0]
    2464:	4620      	mov	r0, r4
    2466:	f000 f86f 	bl	2548 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    246a:	3601      	adds	r6, #1
    246c:	3410      	adds	r4, #16
    246e:	e7ec      	b.n	244a <log_init+0x42>
    2470:	00009d7c 	.word	0x00009d7c
    2474:	00009d9c 	.word	0x00009d9c
    2478:	0000aa34 	.word	0x0000aa34
    247c:	0000a107 	.word	0x0000a107
    2480:	0000a9ef 	.word	0x0000a9ef
    2484:	200005d8 	.word	0x200005d8

00002488 <z_impl_log_panic>:
{
    2488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    248a:	4f0c      	ldr	r7, [pc, #48]	; (24bc <z_impl_log_panic+0x34>)
    248c:	783d      	ldrb	r5, [r7, #0]
    248e:	b94d      	cbnz	r5, 24a4 <z_impl_log_panic+0x1c>
    2490:	4c0b      	ldr	r4, [pc, #44]	; (24c0 <z_impl_log_panic+0x38>)
    2492:	4e0c      	ldr	r6, [pc, #48]	; (24c4 <z_impl_log_panic+0x3c>)
	log_init();
    2494:	f7ff ffb8 	bl	2408 <log_init>
    2498:	1b36      	subs	r6, r6, r4
    249a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    249c:	42b5      	cmp	r5, r6
    249e:	db02      	blt.n	24a6 <z_impl_log_panic+0x1e>
	panic_mode = true;
    24a0:	2301      	movs	r3, #1
    24a2:	703b      	strb	r3, [r7, #0]
}
    24a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
    24a6:	4620      	mov	r0, r4
    24a8:	f006 fe81 	bl	91ae <log_backend_is_active>
    24ac:	b118      	cbz	r0, 24b6 <z_impl_log_panic+0x2e>
	backend->api->panic(backend);
    24ae:	6823      	ldr	r3, [r4, #0]
    24b0:	4620      	mov	r0, r4
    24b2:	695b      	ldr	r3, [r3, #20]
    24b4:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    24b6:	3501      	adds	r5, #1
    24b8:	3410      	adds	r4, #16
    24ba:	e7ef      	b.n	249c <z_impl_log_panic+0x14>
    24bc:	20000eef 	.word	0x20000eef
    24c0:	00009d7c 	.word	0x00009d7c
    24c4:	00009d9c 	.word	0x00009d9c

000024c8 <z_log_notify_backend_enabled>:
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
		k_sem_give(&log_process_thread_sem);
	}

	backend_attached = true;
    24c8:	4b01      	ldr	r3, [pc, #4]	; (24d0 <z_log_notify_backend_enabled+0x8>)
    24ca:	2201      	movs	r2, #1
    24cc:	701a      	strb	r2, [r3, #0]
}
    24ce:	4770      	bx	lr
    24d0:	20000eee 	.word	0x20000eee

000024d4 <z_log_dropped>:
    24d4:	4b0c      	ldr	r3, [pc, #48]	; (2508 <z_log_dropped+0x34>)
    24d6:	f3bf 8f5b 	dmb	ish
    24da:	e853 2f00 	ldrex	r2, [r3]
    24de:	3201      	adds	r2, #1
    24e0:	e843 2100 	strex	r1, r2, [r3]
    24e4:	2900      	cmp	r1, #0
    24e6:	d1f8      	bne.n	24da <z_log_dropped+0x6>
    24e8:	f3bf 8f5b 	dmb	ish
#endif

void z_log_dropped(bool buffered)
{
	atomic_inc(&dropped_cnt);
	if (buffered) {
    24ec:	b158      	cbz	r0, 2506 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    24ee:	f3bf 8f5b 	dmb	ish
    24f2:	4b06      	ldr	r3, [pc, #24]	; (250c <z_log_dropped+0x38>)
    24f4:	e853 2f00 	ldrex	r2, [r3]
    24f8:	3a01      	subs	r2, #1
    24fa:	e843 2100 	strex	r1, r2, [r3]
    24fe:	2900      	cmp	r1, #0
    2500:	d1f8      	bne.n	24f4 <z_log_dropped+0x20>
    2502:	f3bf 8f5b 	dmb	ish
		atomic_dec(&buffered_cnt);
	}
}
    2506:	4770      	bx	lr
    2508:	200005d4 	.word	0x200005d4
    250c:	200005d0 	.word	0x200005d0

00002510 <z_log_msg2_commit>:
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
}

void z_log_msg2_commit(struct log_msg2 *msg)
{
	msg->hdr.timestamp = timestamp_func();
    2510:	4b05      	ldr	r3, [pc, #20]	; (2528 <z_log_msg2_commit+0x18>)
{
    2512:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2514:	681b      	ldr	r3, [r3, #0]
{
    2516:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    2518:	4798      	blx	r3
	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		union log_msgs msgs = {
			.msg2 = (union log_msg2_generic *)msg
		};

		msg_process(msgs, false);
    251a:	2100      	movs	r1, #0
	msg->hdr.timestamp = timestamp_func();
    251c:	60a0      	str	r0, [r4, #8]
		msg_process(msgs, false);
    251e:	4620      	mov	r0, r4
		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
	z_log_msg_post_finalize();
}
    2520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_process(msgs, false);
    2524:	f7ff bf22 	b.w	236c <msg_process>
    2528:	2000009c 	.word	0x2000009c

0000252c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    252c:	4a04      	ldr	r2, [pc, #16]	; (2540 <log_source_name_get+0x14>)
    252e:	4b05      	ldr	r3, [pc, #20]	; (2544 <log_source_name_get+0x18>)
    2530:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    2532:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    2536:	bf34      	ite	cc
    2538:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    253c:	2000      	movcs	r0, #0
}
    253e:	4770      	bx	lr
    2540:	00009d2c 	.word	0x00009d2c
    2544:	00009d7c 	.word	0x00009d7c

00002548 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2548:	b570      	push	{r4, r5, r6, lr}
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    254a:	6803      	ldr	r3, [r0, #0]
	id += backend - log_backend_get(0);
    254c:	4c0e      	ldr	r4, [pc, #56]	; (2588 <log_backend_enable+0x40>)
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    254e:	681b      	ldr	r3, [r3, #0]
	id += backend - log_backend_get(0);
    2550:	1b04      	subs	r4, r0, r4
    2552:	1124      	asrs	r4, r4, #4
{
    2554:	4605      	mov	r5, r0
    2556:	460e      	mov	r6, r1
	id += backend - log_backend_get(0);
    2558:	3401      	adds	r4, #1
		__ASSERT(backend->api->process, "Backend does not support v2 API");
    255a:	b963      	cbnz	r3, 2576 <log_backend_enable+0x2e>
    255c:	490b      	ldr	r1, [pc, #44]	; (258c <log_backend_enable+0x44>)
    255e:	4a0c      	ldr	r2, [pc, #48]	; (2590 <log_backend_enable+0x48>)
    2560:	480c      	ldr	r0, [pc, #48]	; (2594 <log_backend_enable+0x4c>)
    2562:	23bb      	movs	r3, #187	; 0xbb
    2564:	f006 fe15 	bl	9192 <assert_print>
    2568:	480b      	ldr	r0, [pc, #44]	; (2598 <log_backend_enable+0x50>)
    256a:	f006 fe12 	bl	9192 <assert_print>
    256e:	4808      	ldr	r0, [pc, #32]	; (2590 <log_backend_enable+0x48>)
    2570:	21bb      	movs	r1, #187	; 0xbb
    2572:	f006 fe07 	bl	9184 <assert_post_action>
	backend->cb->id = id;
    2576:	686b      	ldr	r3, [r5, #4]
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
	backend->cb->active = true;
    2578:	2201      	movs	r2, #1
	}

	log_backend_id_set(backend, id);
    257a:	711c      	strb	r4, [r3, #4]
	backend->cb->ctx = ctx;
    257c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
    257e:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    2580:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_notify_backend_enabled();
    2584:	f7ff bfa0 	b.w	24c8 <z_log_notify_backend_enabled>
    2588:	00009d7c 	.word	0x00009d7c
    258c:	0000aab4 	.word	0x0000aab4
    2590:	0000aa5c 	.word	0x0000aa5c
    2594:	0000a107 	.word	0x0000a107
    2598:	0000aaca 	.word	0x0000aaca

0000259c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    259c:	b40e      	push	{r1, r2, r3}
    259e:	b503      	push	{r0, r1, lr}
    25a0:	ab03      	add	r3, sp, #12
    25a2:	4601      	mov	r1, r0
    25a4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    25a8:	4804      	ldr	r0, [pc, #16]	; (25bc <print_formatted+0x20>)
	va_start(args, fmt);
    25aa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    25ac:	f7ff fb08 	bl	1bc0 <cbvprintf>
	va_end(args);

	return length;
}
    25b0:	b002      	add	sp, #8
    25b2:	f85d eb04 	ldr.w	lr, [sp], #4
    25b6:	b003      	add	sp, #12
    25b8:	4770      	bx	lr
    25ba:	bf00      	nop
    25bc:	000091e7 	.word	0x000091e7

000025c0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    25c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25c4:	b087      	sub	sp, #28
    25c6:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    25c8:	f001 0301 	and.w	r3, r1, #1
{
    25cc:	9205      	str	r2, [sp, #20]
    25ce:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    25d2:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    25d6:	9304      	str	r3, [sp, #16]
{
    25d8:	4607      	mov	r7, r0
    25da:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    25dc:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    25e0:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    25e4:	f006 fdfd 	bl	91e2 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    25e8:	4602      	mov	r2, r0
    25ea:	2800      	cmp	r0, #0
    25ec:	d044      	beq.n	2678 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    25ee:	493a      	ldr	r1, [pc, #232]	; (26d8 <prefix_print+0x118>)
    25f0:	4638      	mov	r0, r7
    25f2:	f7ff ffd3 	bl	259c <print_formatted>
    25f6:	4605      	mov	r5, r0
	}

	if (stamp) {
    25f8:	f1bb 0f00 	cmp.w	fp, #0
    25fc:	d008      	beq.n	2610 <prefix_print+0x50>
	if (!format) {
    25fe:	f018 0f44 	tst.w	r8, #68	; 0x44
    2602:	d13b      	bne.n	267c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2604:	4935      	ldr	r1, [pc, #212]	; (26dc <prefix_print+0x11c>)
    2606:	4622      	mov	r2, r4
    2608:	4638      	mov	r0, r7
    260a:	f7ff ffc7 	bl	259c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    260e:	4405      	add	r5, r0
	if (color) {
    2610:	9b04      	ldr	r3, [sp, #16]
    2612:	b153      	cbz	r3, 262a <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    2614:	4b32      	ldr	r3, [pc, #200]	; (26e0 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    2616:	4933      	ldr	r1, [pc, #204]	; (26e4 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    2618:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    261c:	4b32      	ldr	r3, [pc, #200]	; (26e8 <prefix_print+0x128>)
    261e:	4638      	mov	r0, r7
    2620:	2a00      	cmp	r2, #0
    2622:	bf08      	it	eq
    2624:	461a      	moveq	r2, r3
    2626:	f7ff ffb9 	bl	259c <print_formatted>
	if (level_on) {
    262a:	b13e      	cbz	r6, 263c <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    262c:	4b2f      	ldr	r3, [pc, #188]	; (26ec <prefix_print+0x12c>)
    262e:	4930      	ldr	r1, [pc, #192]	; (26f0 <prefix_print+0x130>)
    2630:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    2634:	4638      	mov	r0, r7
    2636:	f7ff ffb1 	bl	259c <print_formatted>
    263a:	4606      	mov	r6, r0
	if (source_id >= 0) {
    263c:	f1ba 0f00 	cmp.w	sl, #0
    2640:	db16      	blt.n	2670 <prefix_print+0xb0>
		total += print_formatted(output,
    2642:	9b05      	ldr	r3, [sp, #20]
    2644:	2b00      	cmp	r3, #0
    2646:	d045      	beq.n	26d4 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    2648:	2301      	movs	r3, #1
    264a:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    264e:	4b29      	ldr	r3, [pc, #164]	; (26f4 <prefix_print+0x134>)
    2650:	4c29      	ldr	r4, [pc, #164]	; (26f8 <prefix_print+0x138>)
    2652:	f019 0f10 	tst.w	r9, #16
    2656:	bf18      	it	ne
    2658:	461c      	movne	r4, r3
    265a:	4651      	mov	r1, sl
    265c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    2660:	f7ff ff64 	bl	252c <log_source_name_get>
    2664:	4621      	mov	r1, r4
    2666:	4602      	mov	r2, r0
    2668:	4638      	mov	r0, r7
    266a:	f7ff ff97 	bl	259c <print_formatted>
    266e:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    2670:	1970      	adds	r0, r6, r5
    2672:	b007      	add	sp, #28
    2674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    2678:	4605      	mov	r5, r0
    267a:	e7bd      	b.n	25f8 <prefix_print+0x38>
	} else if (freq != 0U) {
    267c:	4b1f      	ldr	r3, [pc, #124]	; (26fc <prefix_print+0x13c>)
    267e:	6818      	ldr	r0, [r3, #0]
    2680:	2800      	cmp	r0, #0
    2682:	d0c4      	beq.n	260e <prefix_print+0x4e>
		timestamp /= timestamp_div;
    2684:	4b1e      	ldr	r3, [pc, #120]	; (2700 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    2686:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    268a:	681b      	ldr	r3, [r3, #0]
    268c:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    2690:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    2694:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    2698:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    269c:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    26a0:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    26a4:	fbb3 f2f1 	udiv	r2, r3, r1
    26a8:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26ac:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    26b0:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26b4:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    26b8:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26bc:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    26c0:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    26c2:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    26c6:	490f      	ldr	r1, [pc, #60]	; (2704 <prefix_print+0x144>)
    26c8:	e9cd e001 	strd	lr, r0, [sp, #4]
    26cc:	4638      	mov	r0, r7
    26ce:	f7ff ff65 	bl	259c <print_formatted>
    26d2:	e79c      	b.n	260e <prefix_print+0x4e>
		total += print_formatted(output,
    26d4:	4c08      	ldr	r4, [pc, #32]	; (26f8 <prefix_print+0x138>)
    26d6:	e7c0      	b.n	265a <prefix_print+0x9a>
    26d8:	0000aafa 	.word	0x0000aafa
    26dc:	0000aafe 	.word	0x0000aafe
    26e0:	00009dfc 	.word	0x00009dfc
    26e4:	0000ab23 	.word	0x0000ab23
    26e8:	0000aaec 	.word	0x0000aaec
    26ec:	00009e10 	.word	0x00009e10
    26f0:	0000ab26 	.word	0x0000ab26
    26f4:	0000aaf6 	.word	0x0000aaf6
    26f8:	0000aaf1 	.word	0x0000aaf1
    26fc:	200005dc 	.word	0x200005dc
    2700:	200005e0 	.word	0x200005e0
    2704:	0000ab07 	.word	0x0000ab07

00002708 <hexdump_line_print>:
{
    2708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    270c:	461d      	mov	r5, r3
    270e:	9b08      	ldr	r3, [sp, #32]
    2710:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2712:	06da      	lsls	r2, r3, #27
{
    2714:	4604      	mov	r4, r0
    2716:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    2718:	d405      	bmi.n	2726 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    271a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    271c:	bf4c      	ite	mi
    271e:	492a      	ldrmi	r1, [pc, #168]	; (27c8 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    2720:	492a      	ldrpl	r1, [pc, #168]	; (27cc <hexdump_line_print+0xc4>)
    2722:	f7ff ff3b 	bl	259c <print_formatted>
		print_formatted(output, " ");
    2726:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 27d0 <hexdump_line_print+0xc8>
{
    272a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    272e:	45a8      	cmp	r8, r5
    2730:	db2a      	blt.n	2788 <hexdump_line_print+0x80>
			print_formatted(output, "   ");
    2732:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 27d4 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    2736:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 27d8 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    273a:	f8df a094 	ldr.w	sl, [pc, #148]	; 27d0 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    273e:	2500      	movs	r5, #0
		if (i < length) {
    2740:	42bd      	cmp	r5, r7
    2742:	d22f      	bcs.n	27a4 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    2744:	5d72      	ldrb	r2, [r6, r5]
    2746:	4649      	mov	r1, r9
    2748:	4620      	mov	r0, r4
    274a:	f7ff ff27 	bl	259c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    274e:	3501      	adds	r5, #1
    2750:	2d10      	cmp	r5, #16
    2752:	d120      	bne.n	2796 <hexdump_line_print+0x8e>
	print_formatted(output, "|");
    2754:	4921      	ldr	r1, [pc, #132]	; (27dc <hexdump_line_print+0xd4>)
			print_formatted(output, " ");
    2756:	f8df 8078 	ldr.w	r8, [pc, #120]	; 27d0 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    275a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 27e0 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    275e:	4620      	mov	r0, r4
    2760:	f7ff ff1c 	bl	259c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2764:	2500      	movs	r5, #0
		if (i < length) {
    2766:	42af      	cmp	r7, r5
    2768:	d928      	bls.n	27bc <hexdump_line_print+0xb4>
			char c = (char)data[i];
    276a:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    276c:	f1a2 0320 	sub.w	r3, r2, #32
    2770:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    2772:	bf28      	it	cs
    2774:	222e      	movcs	r2, #46	; 0x2e
    2776:	4649      	mov	r1, r9
    2778:	4620      	mov	r0, r4
    277a:	f7ff ff0f 	bl	259c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    277e:	3501      	adds	r5, #1
    2780:	2d10      	cmp	r5, #16
    2782:	d114      	bne.n	27ae <hexdump_line_print+0xa6>
}
    2784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    2788:	4649      	mov	r1, r9
    278a:	4620      	mov	r0, r4
    278c:	f7ff ff06 	bl	259c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2790:	f108 0801 	add.w	r8, r8, #1
    2794:	e7cb      	b.n	272e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    2796:	076a      	lsls	r2, r5, #29
    2798:	d1d2      	bne.n	2740 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    279a:	4651      	mov	r1, sl
    279c:	4620      	mov	r0, r4
    279e:	f7ff fefd 	bl	259c <print_formatted>
    27a2:	e7cd      	b.n	2740 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    27a4:	4641      	mov	r1, r8
    27a6:	4620      	mov	r0, r4
    27a8:	f7ff fef8 	bl	259c <print_formatted>
    27ac:	e7cf      	b.n	274e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    27ae:	076b      	lsls	r3, r5, #29
    27b0:	d1d9      	bne.n	2766 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    27b2:	4641      	mov	r1, r8
    27b4:	4620      	mov	r0, r4
    27b6:	f7ff fef1 	bl	259c <print_formatted>
    27ba:	e7d4      	b.n	2766 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    27bc:	4641      	mov	r1, r8
    27be:	4620      	mov	r0, r4
    27c0:	f7ff feec 	bl	259c <print_formatted>
    27c4:	e7db      	b.n	277e <hexdump_line_print+0x76>
    27c6:	bf00      	nop
    27c8:	0000bc0f 	.word	0x0000bc0f
    27cc:	0000ab2c 	.word	0x0000ab2c
    27d0:	0000ab37 	.word	0x0000ab37
    27d4:	0000ab35 	.word	0x0000ab35
    27d8:	0000ab2f 	.word	0x0000ab2f
    27dc:	0000ab39 	.word	0x0000ab39
    27e0:	0000ab3b 	.word	0x0000ab3b

000027e4 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    27e4:	b538      	push	{r3, r4, r5, lr}
    27e6:	460c      	mov	r4, r1
	if (color) {
    27e8:	07e1      	lsls	r1, r4, #31
{
    27ea:	4605      	mov	r5, r0
	if (color) {
    27ec:	d503      	bpl.n	27f6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    27ee:	4a08      	ldr	r2, [pc, #32]	; (2810 <postfix_print+0x2c>)
    27f0:	4908      	ldr	r1, [pc, #32]	; (2814 <postfix_print+0x30>)
    27f2:	f7ff fed3 	bl	259c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    27f6:	06e2      	lsls	r2, r4, #27
    27f8:	d408      	bmi.n	280c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    27fa:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    27fc:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    27fe:	bf4c      	ite	mi
    2800:	4905      	ldrmi	r1, [pc, #20]	; (2818 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    2802:	4906      	ldrpl	r1, [pc, #24]	; (281c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    2804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    2808:	f7ff bec8 	b.w	259c <print_formatted>
}
    280c:	bd38      	pop	{r3, r4, r5, pc}
    280e:	bf00      	nop
    2810:	0000aaec 	.word	0x0000aaec
    2814:	0000ab23 	.word	0x0000ab23
    2818:	0000bc0f 	.word	0x0000bc0f
    281c:	0000ab2c 	.word	0x0000ab2c

00002820 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    2820:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    2824:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    2826:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    282a:	4606      	mov	r6, r0
    282c:	460c      	mov	r4, r1
    282e:	4690      	mov	r8, r2
    2830:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    2834:	d05b      	beq.n	28ee <log_output_msg2_process+0xce>
	return msg->hdr.desc.domain;
    2836:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    2838:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    283a:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    283e:	2b00      	cmp	r3, #0
    2840:	d052      	beq.n	28e8 <log_output_msg2_process+0xc8>
    2842:	492c      	ldr	r1, [pc, #176]	; (28f4 <log_output_msg2_process+0xd4>)
    2844:	1a5b      	subs	r3, r3, r1
    2846:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    284a:	e9cd 2301 	strd	r2, r3, [sp, #4]
    284e:	f8cd 9000 	str.w	r9, [sp]
    2852:	68a3      	ldr	r3, [r4, #8]
    2854:	2200      	movs	r2, #0
    2856:	4641      	mov	r1, r8
    2858:	4630      	mov	r0, r6
    285a:	f7ff feb1 	bl	25c0 <prefix_print>
    285e:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    2860:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    2862:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    2866:	f3c3 2349 	ubfx	r3, r3, #9, #10
    286a:	b1c3      	cbz	r3, 289e <log_output_msg2_process+0x7e>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    286c:	4f22      	ldr	r7, [pc, #136]	; (28f8 <log_output_msg2_process+0xd8>)
    286e:	4823      	ldr	r0, [pc, #140]	; (28fc <log_output_msg2_process+0xdc>)
    2870:	4923      	ldr	r1, [pc, #140]	; (2900 <log_output_msg2_process+0xe0>)
    2872:	f1b9 0f00 	cmp.w	r9, #0
    2876:	bf08      	it	eq
    2878:	4638      	moveq	r0, r7
    287a:	462b      	mov	r3, r5
    287c:	4632      	mov	r2, r6
    287e:	f006 fb4c 	bl	8f1a <cbpprintf_external>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
				    (void *)output, data);

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
    2882:	2800      	cmp	r0, #0
    2884:	da0b      	bge.n	289e <log_output_msg2_process+0x7e>
    2886:	491f      	ldr	r1, [pc, #124]	; (2904 <log_output_msg2_process+0xe4>)
    2888:	481f      	ldr	r0, [pc, #124]	; (2908 <log_output_msg2_process+0xe8>)
    288a:	4a20      	ldr	r2, [pc, #128]	; (290c <log_output_msg2_process+0xec>)
    288c:	f240 23b7 	movw	r3, #695	; 0x2b7
    2890:	f006 fc7f 	bl	9192 <assert_print>
    2894:	481d      	ldr	r0, [pc, #116]	; (290c <log_output_msg2_process+0xec>)
    2896:	f240 21b7 	movw	r1, #695	; 0x2b7
    289a:	f006 fc73 	bl	9184 <assert_post_action>
	*len = msg->hdr.desc.data_len;
    289e:	8867      	ldrh	r7, [r4, #2]
    28a0:	f3c7 07cb 	ubfx	r7, r7, #3, #12
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    28a4:	b197      	cbz	r7, 28cc <log_output_msg2_process+0xac>
	return msg->data + msg->hdr.desc.package_len;
    28a6:	6821      	ldr	r1, [r4, #0]
    28a8:	f3c1 2149 	ubfx	r1, r1, #9, #10
    28ac:	440d      	add	r5, r1
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    28ae:	2f10      	cmp	r7, #16
    28b0:	463c      	mov	r4, r7
    28b2:	bf28      	it	cs
    28b4:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    28b6:	4629      	mov	r1, r5
    28b8:	f8cd 8000 	str.w	r8, [sp]
    28bc:	4653      	mov	r3, sl
    28be:	4622      	mov	r2, r4
    28c0:	4630      	mov	r0, r6
    28c2:	f7ff ff21 	bl	2708 <hexdump_line_print>
	} while (len);
    28c6:	1b3f      	subs	r7, r7, r4
		data += length;
    28c8:	4425      	add	r5, r4
	} while (len);
    28ca:	d1f0      	bne.n	28ae <log_output_msg2_process+0x8e>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    28cc:	f1b9 0f00 	cmp.w	r9, #0
    28d0:	d004      	beq.n	28dc <log_output_msg2_process+0xbc>
		postfix_print(output, flags, level);
    28d2:	464a      	mov	r2, r9
    28d4:	4641      	mov	r1, r8
    28d6:	4630      	mov	r0, r6
    28d8:	f7ff ff84 	bl	27e4 <postfix_print>
	}

	log_output_flush(output);
    28dc:	4630      	mov	r0, r6
}
    28de:	b004      	add	sp, #16
    28e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    28e4:	f006 bca7 	b.w	9236 <log_output_flush>
		int16_t source_id = source ?
    28e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    28ec:	e7ad      	b.n	284a <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    28ee:	46ca      	mov	sl, r9
    28f0:	e7b6      	b.n	2860 <log_output_msg2_process+0x40>
    28f2:	bf00      	nop
    28f4:	00009d2c 	.word	0x00009d2c
    28f8:	00009203 	.word	0x00009203
    28fc:	000091e7 	.word	0x000091e7
    2900:	00001bc1 	.word	0x00001bc1
    2904:	0000ab7a 	.word	0x0000ab7a
    2908:	0000a107 	.word	0x0000a107
    290c:	0000ab3e 	.word	0x0000ab3e

00002910 <log_output_timestamp_freq_set>:
		     output->control_block->ctx);
}

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2910:	4a08      	ldr	r2, [pc, #32]	; (2934 <log_output_timestamp_freq_set+0x24>)
{
    2912:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    2914:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2916:	4c08      	ldr	r4, [pc, #32]	; (2938 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    2918:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    291a:	2100      	movs	r1, #0
    291c:	42a0      	cmp	r0, r4
    291e:	d804      	bhi.n	292a <log_output_timestamp_freq_set+0x1a>
    2920:	b101      	cbz	r1, 2924 <log_output_timestamp_freq_set+0x14>
    2922:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2924:	4b05      	ldr	r3, [pc, #20]	; (293c <log_output_timestamp_freq_set+0x2c>)
    2926:	6018      	str	r0, [r3, #0]
}
    2928:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    292a:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    292c:	005b      	lsls	r3, r3, #1
    292e:	2101      	movs	r1, #1
    2930:	e7f4      	b.n	291c <log_output_timestamp_freq_set+0xc>
    2932:	bf00      	nop
    2934:	200005e0 	.word	0x200005e0
    2938:	000f4240 	.word	0x000f4240
    293c:	200005dc 	.word	0x200005dc

00002940 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2944:	b085      	sub	sp, #20
    2946:	af02      	add	r7, sp, #8
    2948:	e9d7 b80d 	ldrd	fp, r8, [r7, #52]	; 0x34
    294c:	4605      	mov	r5, r0
    294e:	4689      	mov	r9, r1
    2950:	4614      	mov	r4, r2
    2952:	469a      	mov	sl, r3
	int plen;

	if (fmt) {
    2954:	f1b8 0f00 	cmp.w	r8, #0
    2958:	d04e      	beq.n	29f8 <z_impl_z_log_msg2_runtime_vcreate+0xb8>
		va_list ap2;

		va_copy(ap2, ap);
    295a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    295c:	607b      	str	r3, [r7, #4]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    295e:	9300      	str	r3, [sp, #0]
    2960:	465a      	mov	r2, fp
    2962:	4643      	mov	r3, r8
    2964:	2110      	movs	r1, #16
    2966:	2000      	movs	r0, #0
    2968:	f7fe fb3c 	bl	fe4 <cbvprintf_package>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
    296c:	1e06      	subs	r6, r0, #0
    296e:	da09      	bge.n	2984 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    2970:	4922      	ldr	r1, [pc, #136]	; (29fc <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    2972:	4823      	ldr	r0, [pc, #140]	; (2a00 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    2974:	4a23      	ldr	r2, [pc, #140]	; (2a04 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    2976:	2367      	movs	r3, #103	; 0x67
    2978:	f006 fc0b 	bl	9192 <assert_print>
    297c:	4821      	ldr	r0, [pc, #132]	; (2a04 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    297e:	2167      	movs	r1, #103	; 0x67
    2980:	f006 fc00 	bl	9184 <assert_post_action>
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    2984:	f004 0207 	and.w	r2, r4, #7
    2988:	f005 0407 	and.w	r4, r5, #7
    298c:	00e4      	lsls	r4, r4, #3
    298e:	4d1e      	ldr	r5, [pc, #120]	; (2a08 <z_impl_z_log_msg2_runtime_vcreate+0xc8>)
    2990:	4b1e      	ldr	r3, [pc, #120]	; (2a0c <z_impl_z_log_msg2_runtime_vcreate+0xcc>)
    2992:	ea44 1482 	orr.w	r4, r4, r2, lsl #6
    2996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2998:	ea05 2546 	and.w	r5, r5, r6, lsl #9
    299c:	432c      	orrs	r4, r5
    299e:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
    29a2:	431c      	orrs	r4, r3
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    29a4:	4613      	mov	r3, r2
    29a6:	3317      	adds	r3, #23
    29a8:	4433      	add	r3, r6
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
		}
	} else {
		msg = alloca(msg_wlen * sizeof(int));
    29aa:	f023 0307 	bic.w	r3, r3, #7
    29ae:	ebad 0d03 	sub.w	sp, sp, r3
    29b2:	ad02      	add	r5, sp, #8
		pkg = msg->data;
	}

	if (pkg && fmt) {
    29b4:	f1b8 0f00 	cmp.w	r8, #0
    29b8:	d014      	beq.n	29e4 <z_impl_z_log_msg2_runtime_vcreate+0xa4>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    29ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    29bc:	9300      	str	r3, [sp, #0]
    29be:	465a      	mov	r2, fp
    29c0:	4643      	mov	r3, r8
    29c2:	4631      	mov	r1, r6
    29c4:	f105 0010 	add.w	r0, r5, #16
    29c8:	f7fe fb0c 	bl	fe4 <cbvprintf_package>
		__ASSERT_NO_MSG(plen >= 0);
    29cc:	2800      	cmp	r0, #0
    29ce:	da09      	bge.n	29e4 <z_impl_z_log_msg2_runtime_vcreate+0xa4>
    29d0:	490a      	ldr	r1, [pc, #40]	; (29fc <z_impl_z_log_msg2_runtime_vcreate+0xbc>)
    29d2:	480b      	ldr	r0, [pc, #44]	; (2a00 <z_impl_z_log_msg2_runtime_vcreate+0xc0>)
    29d4:	4a0b      	ldr	r2, [pc, #44]	; (2a04 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    29d6:	2381      	movs	r3, #129	; 0x81
    29d8:	f006 fbdb 	bl	9192 <assert_print>
    29dc:	4809      	ldr	r0, [pc, #36]	; (2a04 <z_impl_z_log_msg2_runtime_vcreate+0xc4>)
    29de:	2181      	movs	r1, #129	; 0x81
    29e0:	f006 fbd0 	bl	9184 <assert_post_action>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    29e4:	4653      	mov	r3, sl
    29e6:	4622      	mov	r2, r4
    29e8:	4649      	mov	r1, r9
    29ea:	4628      	mov	r0, r5
    29ec:	f006 fc30 	bl	9250 <z_log_msg2_finalize>
	}
}
    29f0:	370c      	adds	r7, #12
    29f2:	46bd      	mov	sp, r7
    29f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		plen = 0;
    29f8:	4646      	mov	r6, r8
    29fa:	e7c3      	b.n	2984 <z_impl_z_log_msg2_runtime_vcreate+0x44>
    29fc:	0000abd0 	.word	0x0000abd0
    2a00:	0000a107 	.word	0x0000a107
    2a04:	0000aba3 	.word	0x0000aba3
    2a08:	0007fe00 	.word	0x0007fe00
    2a0c:	7ff80000 	.word	0x7ff80000

00002a10 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    2a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    2a12:	4f07      	ldr	r7, [pc, #28]	; (2a30 <char_out+0x20>)
{
    2a14:	460d      	mov	r5, r1
    2a16:	4604      	mov	r4, r0
    2a18:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    2a1a:	42b4      	cmp	r4, r6
    2a1c:	d101      	bne.n	2a22 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    2a1e:	4628      	mov	r0, r5
    2a20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    2a22:	6838      	ldr	r0, [r7, #0]
    2a24:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    2a28:	6883      	ldr	r3, [r0, #8]
    2a2a:	685b      	ldr	r3, [r3, #4]
    2a2c:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    2a2e:	e7f4      	b.n	2a1a <char_out+0xa>
    2a30:	200005fc 	.word	0x200005fc

00002a34 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2a34:	4b01      	ldr	r3, [pc, #4]	; (2a3c <format_set+0x8>)
	return 0;
}
    2a36:	2000      	movs	r0, #0
	log_format_current = log_type;
    2a38:	6019      	str	r1, [r3, #0]
}
    2a3a:	4770      	bx	lr
    2a3c:	200005ec 	.word	0x200005ec

00002a40 <panic>:
	}
}

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    2a40:	4b02      	ldr	r3, [pc, #8]	; (2a4c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2a42:	4803      	ldr	r0, [pc, #12]	; (2a50 <panic+0x10>)
    2a44:	2201      	movs	r2, #1
    2a46:	701a      	strb	r2, [r3, #0]
    2a48:	f006 bbf5 	b.w	9236 <log_output_flush>
    2a4c:	20000ef0 	.word	0x20000ef0
    2a50:	00009e44 	.word	0x00009e44

00002a54 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2a54:	4b06      	ldr	r3, [pc, #24]	; (2a70 <process+0x1c>)
{
    2a56:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2a58:	6818      	ldr	r0, [r3, #0]
{
    2a5a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2a5c:	f7ff fcba 	bl	23d4 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    2a60:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2a62:	4603      	mov	r3, r0
}
    2a64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    2a68:	4802      	ldr	r0, [pc, #8]	; (2a74 <process+0x20>)
    2a6a:	220f      	movs	r2, #15
    2a6c:	4718      	bx	r3
    2a6e:	bf00      	nop
    2a70:	200005ec 	.word	0x200005ec
    2a74:	00009e44 	.word	0x00009e44

00002a78 <log_backend_uart_init>:
{
    2a78:	b508      	push	{r3, lr}
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2a7a:	4b09      	ldr	r3, [pc, #36]	; (2aa0 <log_backend_uart_init+0x28>)
    2a7c:	4809      	ldr	r0, [pc, #36]	; (2aa4 <log_backend_uart_init+0x2c>)
    2a7e:	6018      	str	r0, [r3, #0]
    2a80:	f006 ff5a 	bl	9938 <z_device_is_ready>
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2a84:	b958      	cbnz	r0, 2a9e <log_backend_uart_init+0x26>
    2a86:	4908      	ldr	r1, [pc, #32]	; (2aa8 <log_backend_uart_init+0x30>)
    2a88:	4808      	ldr	r0, [pc, #32]	; (2aac <log_backend_uart_init+0x34>)
    2a8a:	4a09      	ldr	r2, [pc, #36]	; (2ab0 <log_backend_uart_init+0x38>)
    2a8c:	2379      	movs	r3, #121	; 0x79
    2a8e:	f006 fb80 	bl	9192 <assert_print>
}
    2a92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT_NO_MSG(device_is_ready(uart_dev));
    2a96:	4806      	ldr	r0, [pc, #24]	; (2ab0 <log_backend_uart_init+0x38>)
    2a98:	2179      	movs	r1, #121	; 0x79
    2a9a:	f006 bb73 	b.w	9184 <assert_post_action>
}
    2a9e:	bd08      	pop	{r3, pc}
    2aa0:	200005fc 	.word	0x200005fc
    2aa4:	00009b7c 	.word	0x00009b7c
    2aa8:	0000ac0f 	.word	0x0000ac0f
    2aac:	0000a107 	.word	0x0000a107
    2ab0:	0000abda 	.word	0x0000abda

00002ab4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2ab4:	4b01      	ldr	r3, [pc, #4]	; (2abc <log_backend_rtt_init+0x8>)
    2ab6:	2201      	movs	r2, #1
    2ab8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2aba:	4770      	bx	lr
    2abc:	20000ef3 	.word	0x20000ef3

00002ac0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2ac0:	4b01      	ldr	r3, [pc, #4]	; (2ac8 <format_set+0x8>)
	return 0;
}
    2ac2:	2000      	movs	r0, #0
	log_format_current = log_type;
    2ac4:	6019      	str	r1, [r3, #0]
}
    2ac6:	4770      	bx	lr
    2ac8:	20000608 	.word	0x20000608

00002acc <panic>:
	panic_mode = true;
    2acc:	4b02      	ldr	r3, [pc, #8]	; (2ad8 <panic+0xc>)
    2ace:	4803      	ldr	r0, [pc, #12]	; (2adc <panic+0x10>)
    2ad0:	2201      	movs	r2, #1
    2ad2:	701a      	strb	r2, [r3, #0]
    2ad4:	f006 bbaf 	b.w	9236 <log_output_flush>
    2ad8:	20000ef4 	.word	0x20000ef4
    2adc:	00009e74 	.word	0x00009e74

00002ae0 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2ae0:	4b06      	ldr	r3, [pc, #24]	; (2afc <process+0x1c>)
{
    2ae2:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2ae4:	6818      	ldr	r0, [r3, #0]
{
    2ae6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2ae8:	f7ff fc74 	bl	23d4 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2aec:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2aee:	4603      	mov	r3, r0
}
    2af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2af4:	4802      	ldr	r0, [pc, #8]	; (2b00 <process+0x20>)
    2af6:	220f      	movs	r2, #15
    2af8:	4718      	bx	r3
    2afa:	bf00      	nop
    2afc:	20000608 	.word	0x20000608
    2b00:	00009e74 	.word	0x00009e74

00002b04 <data_out_block_mode>:
{
    2b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2b06:	4d19      	ldr	r5, [pc, #100]	; (2b6c <data_out_block_mode+0x68>)
    2b08:	4607      	mov	r7, r0
    2b0a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2b0c:	2404      	movs	r4, #4
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2b0e:	4632      	mov	r2, r6
    2b10:	4639      	mov	r1, r7
    2b12:	2000      	movs	r0, #0
    2b14:	f003 fb0e 	bl	6134 <SEGGER_RTT_WriteSkipNoLock>
		if (ret) {
    2b18:	b1c8      	cbz	r0, 2b4e <data_out_block_mode+0x4a>
	host_present = true;
    2b1a:	2301      	movs	r3, #1
    2b1c:	702b      	strb	r3, [r5, #0]
	return panic_mode;
    2b1e:	4b14      	ldr	r3, [pc, #80]	; (2b70 <data_out_block_mode+0x6c>)
	if (is_panic_mode()) {
    2b20:	781b      	ldrb	r3, [r3, #0]
    2b22:	b92b      	cbnz	r3, 2b30 <data_out_block_mode+0x2c>
}
    2b24:	4630      	mov	r0, r6
    2b26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (retry_cnt == 0) {
    2b28:	b95c      	cbnz	r4, 2b42 <data_out_block_mode+0x3e>
		host_present = false;
    2b2a:	702c      	strb	r4, [r5, #0]
    2b2c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2b30:	2000      	movs	r0, #0
    2b32:	f003 fb4b 	bl	61cc <SEGGER_RTT_HasDataUp>
    2b36:	2800      	cmp	r0, #0
    2b38:	d0f4      	beq.n	2b24 <data_out_block_mode+0x20>
    2b3a:	782b      	ldrb	r3, [r5, #0]
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d1f3      	bne.n	2b28 <data_out_block_mode+0x24>
    2b40:	e7f0      	b.n	2b24 <data_out_block_mode+0x20>
			on_failed_write(retry_cnt--);
    2b42:	3c01      	subs	r4, #1
	z_impl_k_busy_wait(usec_to_wait);
    2b44:	f241 3088 	movw	r0, #5000	; 0x1388
    2b48:	f006 ff7c 	bl	9a44 <z_impl_k_busy_wait>
}
    2b4c:	e7f0      	b.n	2b30 <data_out_block_mode+0x2c>
		} else if (host_present) {
    2b4e:	782b      	ldrb	r3, [r5, #0]
    2b50:	b113      	cbz	r3, 2b58 <data_out_block_mode+0x54>
	if (retry_cnt == 0) {
    2b52:	3c01      	subs	r4, #1
    2b54:	d104      	bne.n	2b60 <data_out_block_mode+0x5c>
		host_present = false;
    2b56:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    2b58:	782b      	ldrb	r3, [r5, #0]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d1d7      	bne.n	2b0e <data_out_block_mode+0xa>
    2b5e:	e7e1      	b.n	2b24 <data_out_block_mode+0x20>
	z_impl_k_busy_wait(usec_to_wait);
    2b60:	f241 3088 	movw	r0, #5000	; 0x1388
    2b64:	f006 ff6e 	bl	9a44 <z_impl_k_busy_wait>
}
    2b68:	e7f6      	b.n	2b58 <data_out_block_mode+0x54>
    2b6a:	bf00      	nop
    2b6c:	20000ef3 	.word	0x20000ef3
    2b70:	20000ef4 	.word	0x20000ef4

00002b74 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2b78:	4605      	mov	r5, r0
    2b7a:	f04f 0320 	mov.w	r3, #32
    2b7e:	f3ef 8611 	mrs	r6, BASEPRI
    2b82:	f383 8812 	msr	BASEPRI_MAX, r3
    2b86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2b8a:	4822      	ldr	r0, [pc, #136]	; (2c14 <pm_state_notify+0xa0>)
    2b8c:	f003 fefe 	bl	698c <z_spin_lock_valid>
    2b90:	b968      	cbnz	r0, 2bae <pm_state_notify+0x3a>
    2b92:	4a21      	ldr	r2, [pc, #132]	; (2c18 <pm_state_notify+0xa4>)
    2b94:	4921      	ldr	r1, [pc, #132]	; (2c1c <pm_state_notify+0xa8>)
    2b96:	4822      	ldr	r0, [pc, #136]	; (2c20 <pm_state_notify+0xac>)
    2b98:	238e      	movs	r3, #142	; 0x8e
    2b9a:	f006 fafa 	bl	9192 <assert_print>
    2b9e:	491d      	ldr	r1, [pc, #116]	; (2c14 <pm_state_notify+0xa0>)
    2ba0:	4820      	ldr	r0, [pc, #128]	; (2c24 <pm_state_notify+0xb0>)
    2ba2:	f006 faf6 	bl	9192 <assert_print>
    2ba6:	481c      	ldr	r0, [pc, #112]	; (2c18 <pm_state_notify+0xa4>)
    2ba8:	218e      	movs	r1, #142	; 0x8e
    2baa:	f006 faeb 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    2bae:	4819      	ldr	r0, [pc, #100]	; (2c14 <pm_state_notify+0xa0>)
    2bb0:	f003 ff0a 	bl	69c8 <z_spin_lock_set_owner>
	return list->head;
    2bb4:	4b1c      	ldr	r3, [pc, #112]	; (2c28 <pm_state_notify+0xb4>)
    2bb6:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2bb8:	b19c      	cbz	r4, 2be2 <pm_state_notify+0x6e>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2bba:	4f1c      	ldr	r7, [pc, #112]	; (2c2c <pm_state_notify+0xb8>)
    2bbc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 2c30 <pm_state_notify+0xbc>
    2bc0:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2bc4:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2bc8:	2d00      	cmp	r5, #0
    2bca:	bf08      	it	eq
    2bcc:	4613      	moveq	r3, r2
		if (callback) {
    2bce:	b12b      	cbz	r3, 2bdc <pm_state_notify+0x68>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2bd0:	f898 2014 	ldrb.w	r2, [r8, #20]
    2bd4:	fb09 f202 	mul.w	r2, r9, r2
    2bd8:	5cb8      	ldrb	r0, [r7, r2]
    2bda:	4798      	blx	r3
	return node->next;
    2bdc:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2bde:	2c00      	cmp	r4, #0
    2be0:	d1f0      	bne.n	2bc4 <pm_state_notify+0x50>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    2be2:	480c      	ldr	r0, [pc, #48]	; (2c14 <pm_state_notify+0xa0>)
    2be4:	f003 fee0 	bl	69a8 <z_spin_unlock_valid>
    2be8:	b968      	cbnz	r0, 2c06 <pm_state_notify+0x92>
    2bea:	4a0b      	ldr	r2, [pc, #44]	; (2c18 <pm_state_notify+0xa4>)
    2bec:	4911      	ldr	r1, [pc, #68]	; (2c34 <pm_state_notify+0xc0>)
    2bee:	480c      	ldr	r0, [pc, #48]	; (2c20 <pm_state_notify+0xac>)
    2bf0:	23b9      	movs	r3, #185	; 0xb9
    2bf2:	f006 face 	bl	9192 <assert_print>
    2bf6:	4907      	ldr	r1, [pc, #28]	; (2c14 <pm_state_notify+0xa0>)
    2bf8:	480f      	ldr	r0, [pc, #60]	; (2c38 <pm_state_notify+0xc4>)
    2bfa:	f006 faca 	bl	9192 <assert_print>
    2bfe:	4806      	ldr	r0, [pc, #24]	; (2c18 <pm_state_notify+0xa4>)
    2c00:	21b9      	movs	r1, #185	; 0xb9
    2c02:	f006 fabf 	bl	9184 <assert_post_action>
	__asm__ volatile(
    2c06:	f386 8811 	msr	BASEPRI, r6
    2c0a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2c12:	bf00      	nop
    2c14:	20000618 	.word	0x20000618
    2c18:	0000a768 	.word	0x0000a768
    2c1c:	0000a7c1 	.word	0x0000a7c1
    2c20:	0000a107 	.word	0x0000a107
    2c24:	0000a7d6 	.word	0x0000a7d6
    2c28:	2000061c 	.word	0x2000061c
    2c2c:	20000624 	.word	0x20000624
    2c30:	20000cc8 	.word	0x20000cc8
    2c34:	0000a795 	.word	0x0000a795
    2c38:	0000a7ac 	.word	0x0000a7ac

00002c3c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c3c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c3e:	2301      	movs	r3, #1
    2c40:	f000 001f 	and.w	r0, r0, #31
    2c44:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2c48:	4b07      	ldr	r3, [pc, #28]	; (2c68 <atomic_clear_bit.constprop.0+0x2c>)
    2c4a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c4e:	43c0      	mvns	r0, r0
    2c50:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2c54:	e853 2f00 	ldrex	r2, [r3]
    2c58:	4002      	ands	r2, r0
    2c5a:	e843 2100 	strex	r1, r2, [r3]
    2c5e:	2900      	cmp	r1, #0
    2c60:	d1f8      	bne.n	2c54 <atomic_clear_bit.constprop.0+0x18>
    2c62:	f3bf 8f5b 	dmb	ish
}
    2c66:	4770      	bx	lr
    2c68:	20000630 	.word	0x20000630

00002c6c <pm_system_resume>:

void pm_system_resume(void)
{
    2c6c:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2c6e:	4b1a      	ldr	r3, [pc, #104]	; (2cd8 <pm_system_resume+0x6c>)
    2c70:	7d1c      	ldrb	r4, [r3, #20]
    2c72:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2c76:	f004 031f 	and.w	r3, r4, #31
    2c7a:	2201      	movs	r2, #1
    2c7c:	409a      	lsls	r2, r3
    2c7e:	4b17      	ldr	r3, [pc, #92]	; (2cdc <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2c80:	0961      	lsrs	r1, r4, #5
    2c82:	43d0      	mvns	r0, r2
    2c84:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2c88:	e853 1f00 	ldrex	r1, [r3]
    2c8c:	ea01 0500 	and.w	r5, r1, r0
    2c90:	e843 5c00 	strex	ip, r5, [r3]
    2c94:	f1bc 0f00 	cmp.w	ip, #0
    2c98:	d1f6      	bne.n	2c88 <pm_system_resume+0x1c>
    2c9a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2c9e:	4211      	tst	r1, r2
    2ca0:	d013      	beq.n	2cca <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    2ca2:	4b0f      	ldr	r3, [pc, #60]	; (2ce0 <pm_system_resume+0x74>)
    2ca4:	4d0f      	ldr	r5, [pc, #60]	; (2ce4 <pm_system_resume+0x78>)
    2ca6:	b18b      	cbz	r3, 2ccc <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2ca8:	230c      	movs	r3, #12
    2caa:	4363      	muls	r3, r4
    2cac:	18ea      	adds	r2, r5, r3
    2cae:	5ce8      	ldrb	r0, [r5, r3]
    2cb0:	7851      	ldrb	r1, [r2, #1]
    2cb2:	f006 fb74 	bl	939e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2cb6:	2000      	movs	r0, #0
    2cb8:	f7ff ff5c 	bl	2b74 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2cbc:	230c      	movs	r3, #12
    2cbe:	435c      	muls	r4, r3
    2cc0:	192a      	adds	r2, r5, r4
    2cc2:	2300      	movs	r3, #0
    2cc4:	512b      	str	r3, [r5, r4]
    2cc6:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2cca:	bd38      	pop	{r3, r4, r5, pc}
    2ccc:	f383 8811 	msr	BASEPRI, r3
    2cd0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2cd4:	e7ef      	b.n	2cb6 <pm_system_resume+0x4a>
    2cd6:	bf00      	nop
    2cd8:	20000cc8 	.word	0x20000cc8
    2cdc:	20000634 	.word	0x20000634
    2ce0:	0000939f 	.word	0x0000939f
    2ce4:	20000624 	.word	0x20000624

00002ce8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    2ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2cec:	4b32      	ldr	r3, [pc, #200]	; (2db8 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2cee:	4a33      	ldr	r2, [pc, #204]	; (2dbc <pm_system_suspend+0xd4>)
    2cf0:	7d1c      	ldrb	r4, [r3, #20]
    2cf2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2cf6:	0963      	lsrs	r3, r4, #5
    2cf8:	ea4f 0983 	mov.w	r9, r3, lsl #2
    2cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2d00:	4e2f      	ldr	r6, [pc, #188]	; (2dc0 <pm_system_suspend+0xd8>)
    2d02:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2d06:	f004 081f 	and.w	r8, r4, #31
    2d0a:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2d0e:	f013 0f01 	tst.w	r3, #1
{
    2d12:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2d14:	d10a      	bne.n	2d2c <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    2d16:	4601      	mov	r1, r0
    2d18:	4620      	mov	r0, r4
    2d1a:	f000 f869 	bl	2df0 <pm_policy_next_state>
		if (info != NULL) {
    2d1e:	b128      	cbz	r0, 2d2c <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2d20:	c807      	ldmia	r0, {r0, r1, r2}
    2d22:	230c      	movs	r3, #12
    2d24:	fb03 6304 	mla	r3, r3, r4, r6
    2d28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2d2c:	230c      	movs	r3, #12
    2d2e:	4363      	muls	r3, r4
    2d30:	18f2      	adds	r2, r6, r3
    2d32:	5cf5      	ldrb	r5, [r6, r3]
    2d34:	b92d      	cbnz	r5, 2d42 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    2d36:	4620      	mov	r0, r4
    2d38:	f7ff ff80 	bl	2c3c <atomic_clear_bit.constprop.0>
		ret = false;
    2d3c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    2d42:	1c7b      	adds	r3, r7, #1
    2d44:	d00f      	beq.n	2d66 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2d46:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2d4a:	481e      	ldr	r0, [pc, #120]	; (2dc4 <pm_system_suspend+0xdc>)
    2d4c:	4a1e      	ldr	r2, [pc, #120]	; (2dc8 <pm_system_suspend+0xe0>)
    2d4e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2d52:	2100      	movs	r1, #0
    2d54:	2300      	movs	r3, #0
    2d56:	fbec 0105 	umlal	r0, r1, ip, r5
    2d5a:	f7fd fbb3 	bl	4c4 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2d5e:	2101      	movs	r1, #1
    2d60:	1a38      	subs	r0, r7, r0
    2d62:	f005 fc57 	bl	8614 <z_set_timeout_expiry>
	k_sched_lock();
    2d66:	f004 f9f5 	bl	7154 <k_sched_lock>
	pm_state_notify(true);
    2d6a:	2001      	movs	r0, #1
    2d6c:	f7ff ff02 	bl	2b74 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2d70:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2d74:	2301      	movs	r3, #1
    2d76:	fa03 f808 	lsl.w	r8, r3, r8
    2d7a:	4b14      	ldr	r3, [pc, #80]	; (2dcc <pm_system_suspend+0xe4>)
    2d7c:	4499      	add	r9, r3
    2d7e:	e859 3f00 	ldrex	r3, [r9]
    2d82:	ea43 0308 	orr.w	r3, r3, r8
    2d86:	e849 3200 	strex	r2, r3, [r9]
    2d8a:	2a00      	cmp	r2, #0
    2d8c:	d1f7      	bne.n	2d7e <pm_system_suspend+0x96>
    2d8e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2d92:	4b0f      	ldr	r3, [pc, #60]	; (2dd0 <pm_system_suspend+0xe8>)
    2d94:	b133      	cbz	r3, 2da4 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    2d96:	230c      	movs	r3, #12
    2d98:	4363      	muls	r3, r4
    2d9a:	18f2      	adds	r2, r6, r3
    2d9c:	5cf0      	ldrb	r0, [r6, r3]
    2d9e:	7851      	ldrb	r1, [r2, #1]
    2da0:	f006 faf1 	bl	9386 <pm_state_set>
	pm_system_resume();
    2da4:	f7ff ff62 	bl	2c6c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    2da8:	4620      	mov	r0, r4
    2daa:	f7ff ff47 	bl	2c3c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    2dae:	f004 ff0f 	bl	7bd0 <k_sched_unlock>
	bool ret = true;
    2db2:	2001      	movs	r0, #1
    2db4:	e7c3      	b.n	2d3e <pm_system_suspend+0x56>
    2db6:	bf00      	nop
    2db8:	20000cc8 	.word	0x20000cc8
    2dbc:	20000630 	.word	0x20000630
    2dc0:	20000624 	.word	0x20000624
    2dc4:	000f423f 	.word	0x000f423f
    2dc8:	000f4240 	.word	0x000f4240
    2dcc:	20000634 	.word	0x20000634
    2dd0:	00009387 	.word	0x00009387

00002dd4 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2dd4:	4b05      	ldr	r3, [pc, #20]	; (2dec <pm_policy_state_lock_is_active+0x18>)
    2dd6:	f3bf 8f5b 	dmb	ish
    2dda:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2dde:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2de2:	3800      	subs	r0, #0
    2de4:	bf18      	it	ne
    2de6:	2001      	movne	r0, #1
    2de8:	4770      	bx	lr
    2dea:	bf00      	nop
    2dec:	20000638 	.word	0x20000638

00002df0 <pm_policy_next_state>:
{
    2df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2df4:	b085      	sub	sp, #20
    2df6:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2df8:	a903      	add	r1, sp, #12
    2dfa:	f000 f847 	bl	2e8c <pm_state_cpu_get_all>
    2dfe:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2e80 <pm_policy_next_state+0x90>
    2e02:	f8df a080 	ldr.w	sl, [pc, #128]	; 2e84 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2e06:	1e44      	subs	r4, r0, #1
    2e08:	b224      	sxth	r4, r4
    2e0a:	f04f 0b00 	mov.w	fp, #0
    2e0e:	1c63      	adds	r3, r4, #1
    2e10:	d104      	bne.n	2e1c <pm_policy_next_state+0x2c>
	return NULL;
    2e12:	2600      	movs	r6, #0
}
    2e14:	4630      	mov	r0, r6
    2e16:	b005      	add	sp, #20
    2e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2e1c:	9a03      	ldr	r2, [sp, #12]
    2e1e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2e22:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2e26:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2e2a:	f7ff ffd3 	bl	2dd4 <pm_policy_state_lock_is_active>
    2e2e:	4605      	mov	r5, r0
    2e30:	bb10      	cbnz	r0, 2e78 <pm_policy_next_state+0x88>
    2e32:	6870      	ldr	r0, [r6, #4]
    2e34:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2e38:	46c4      	mov	ip, r8
    2e3a:	4629      	mov	r1, r5
    2e3c:	fbe0 c109 	umlal	ip, r1, r0, r9
    2e40:	4652      	mov	r2, sl
    2e42:	465b      	mov	r3, fp
    2e44:	4660      	mov	r0, ip
    2e46:	f7fd fb3d 	bl	4c4 <__aeabi_uldivmod>
    2e4a:	9001      	str	r0, [sp, #4]
    2e4c:	68b0      	ldr	r0, [r6, #8]
    2e4e:	46c4      	mov	ip, r8
    2e50:	4629      	mov	r1, r5
    2e52:	fbe0 c109 	umlal	ip, r1, r0, r9
    2e56:	465b      	mov	r3, fp
    2e58:	4652      	mov	r2, sl
    2e5a:	4660      	mov	r0, ip
    2e5c:	f7fd fb32 	bl	4c4 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2e60:	4b09      	ldr	r3, [pc, #36]	; (2e88 <pm_policy_next_state+0x98>)
    2e62:	681b      	ldr	r3, [r3, #0]
    2e64:	1c59      	adds	r1, r3, #1
    2e66:	d001      	beq.n	2e6c <pm_policy_next_state+0x7c>
    2e68:	4283      	cmp	r3, r0
    2e6a:	d905      	bls.n	2e78 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    2e6c:	1c7a      	adds	r2, r7, #1
    2e6e:	d0d1      	beq.n	2e14 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    2e70:	9b01      	ldr	r3, [sp, #4]
    2e72:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2e74:	42b8      	cmp	r0, r7
    2e76:	d9cd      	bls.n	2e14 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2e78:	3c01      	subs	r4, #1
    2e7a:	b224      	sxth	r4, r4
    2e7c:	e7c7      	b.n	2e0e <pm_policy_next_state+0x1e>
    2e7e:	bf00      	nop
    2e80:	000f423f 	.word	0x000f423f
    2e84:	000f4240 	.word	0x000f4240
    2e88:	200000a0 	.word	0x200000a0

00002e8c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2e8c:	b908      	cbnz	r0, 2e92 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2e8e:	4b02      	ldr	r3, [pc, #8]	; (2e98 <pm_state_cpu_get_all+0xc>)
    2e90:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2e92:	2000      	movs	r0, #0
    2e94:	4770      	bx	lr
    2e96:	bf00      	nop
    2e98:	00009e84 	.word	0x00009e84

00002e9c <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    2e9c:	4801      	ldr	r0, [pc, #4]	; (2ea4 <nrf_cc3xx_platform_abort_init+0x8>)
    2e9e:	f005 be9f 	b.w	8be0 <nrf_cc3xx_platform_set_abort>
    2ea2:	bf00      	nop
    2ea4:	00009e84 	.word	0x00009e84

00002ea8 <mutex_free_platform>:
}


/** @brief Static function to free a mutex
 */
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ea8:	b510      	push	{r4, lr}
    /* Ensure that the mutex is valid (not NULL) */
    if (mutex == NULL) {
    2eaa:	4604      	mov	r4, r0
    2eac:	b918      	cbnz	r0, 2eb6 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    2eae:	4b0d      	ldr	r3, [pc, #52]	; (2ee4 <mutex_free_platform+0x3c>)
    2eb0:	480d      	ldr	r0, [pc, #52]	; (2ee8 <mutex_free_platform+0x40>)
    2eb2:	685b      	ldr	r3, [r3, #4]
    2eb4:	4798      	blx	r3
            "mutex_init called with NULL parameter");
    }

    /* Check if we are freeing a mutex that is atomic */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2eb6:	6861      	ldr	r1, [r4, #4]
    2eb8:	2908      	cmp	r1, #8
    2eba:	d00d      	beq.n	2ed8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if we are freeing a mutex that isn't initialized */
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2ebc:	f031 0304 	bics.w	r3, r1, #4
    2ec0:	d00a      	beq.n	2ed8 <mutex_free_platform+0x30>
        /*Nothing to free*/
        return;
    }

    /* Check if the mutex was allocated or being statically defined */
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    2ec2:	f011 0102 	ands.w	r1, r1, #2
    2ec6:	d008      	beq.n	2eda <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    2ec8:	4808      	ldr	r0, [pc, #32]	; (2eec <mutex_free_platform+0x44>)
    2eca:	4621      	mov	r1, r4
    2ecc:	f003 fbbe 	bl	664c <k_mem_slab_free>
        mutex->mutex = NULL;
    2ed0:	2300      	movs	r3, #0
    2ed2:	6023      	str	r3, [r4, #0]
    else {
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    }

    /* Reset the mutex to invalid state */
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    2ed4:	2300      	movs	r3, #0
    2ed6:	6063      	str	r3, [r4, #4]
}
    2ed8:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2eda:	6820      	ldr	r0, [r4, #0]
    2edc:	2214      	movs	r2, #20
    2ede:	f006 fa46 	bl	936e <memset>
    2ee2:	e7f7      	b.n	2ed4 <mutex_free_platform+0x2c>
    2ee4:	2000017c 	.word	0x2000017c
    2ee8:	0000ac56 	.word	0x0000ac56
    2eec:	20000654 	.word	0x20000654

00002ef0 <mutex_lock_platform>:


/** @brief Static function to lock a mutex
 */
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2ef0:	b508      	push	{r3, lr}
    int ret;
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2ef2:	b308      	cbz	r0, 2f38 <mutex_lock_platform+0x48>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags) {
    2ef4:	6843      	ldr	r3, [r0, #4]
    2ef6:	2b04      	cmp	r3, #4
    2ef8:	d110      	bne.n	2f1c <mutex_lock_platform+0x2c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2efa:	2201      	movs	r2, #1
    2efc:	6803      	ldr	r3, [r0, #0]
    2efe:	f3bf 8f5b 	dmb	ish
    2f02:	e853 1f00 	ldrex	r1, [r3]
    2f06:	2900      	cmp	r1, #0
    2f08:	d103      	bne.n	2f12 <mutex_lock_platform+0x22>
    2f0a:	e843 2000 	strex	r0, r2, [r3]
    2f0e:	2800      	cmp	r0, #0
    2f10:	d1f7      	bne.n	2f02 <mutex_lock_platform+0x12>
    2f12:	f3bf 8f5b 	dmb	ish
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f16:	d10b      	bne.n	2f30 <mutex_lock_platform+0x40>
    2f18:	2000      	movs	r0, #0
            return NRF_CC3XX_PLATFORM_SUCCESS;
        } else {
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
        }
    }
}
    2f1a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2f1c:	b153      	cbz	r3, 2f34 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2f1e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    2f20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2f24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2f28:	f003 fd88 	bl	6a3c <z_impl_k_mutex_lock>
        if (ret == 0) {
    2f2c:	2800      	cmp	r0, #0
    2f2e:	d0f3      	beq.n	2f18 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f30:	4803      	ldr	r0, [pc, #12]	; (2f40 <mutex_lock_platform+0x50>)
    2f32:	e7f2      	b.n	2f1a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2f34:	4803      	ldr	r0, [pc, #12]	; (2f44 <mutex_lock_platform+0x54>)
    2f36:	e7f0      	b.n	2f1a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2f38:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2f3c:	e7ed      	b.n	2f1a <mutex_lock_platform+0x2a>
    2f3e:	bf00      	nop
    2f40:	ffff8fe9 	.word	0xffff8fe9
    2f44:	ffff8fea 	.word	0xffff8fea

00002f48 <mutex_unlock_platform>:

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2f48:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    2f4a:	b1d0      	cbz	r0, 2f82 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    2f4c:	6843      	ldr	r3, [r0, #4]
    2f4e:	2b04      	cmp	r3, #4
    2f50:	d111      	bne.n	2f76 <mutex_unlock_platform+0x2e>
    2f52:	2200      	movs	r2, #0
    2f54:	6803      	ldr	r3, [r0, #0]
    2f56:	f3bf 8f5b 	dmb	ish
    2f5a:	e853 1f00 	ldrex	r1, [r3]
    2f5e:	2901      	cmp	r1, #1
    2f60:	d103      	bne.n	2f6a <mutex_unlock_platform+0x22>
    2f62:	e843 2000 	strex	r0, r2, [r3]
    2f66:	2800      	cmp	r0, #0
    2f68:	d1f7      	bne.n	2f5a <mutex_unlock_platform+0x12>
    2f6a:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    2f6e:	4807      	ldr	r0, [pc, #28]	; (2f8c <mutex_unlock_platform+0x44>)
    2f70:	bf08      	it	eq
    2f72:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    2f74:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    2f76:	b13b      	cbz	r3, 2f88 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    2f78:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    2f7a:	f003 fe59 	bl	6c30 <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    2f7e:	2000      	movs	r0, #0
    2f80:	e7f8      	b.n	2f74 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    2f82:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    2f86:	e7f5      	b.n	2f74 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    2f88:	4801      	ldr	r0, [pc, #4]	; (2f90 <mutex_unlock_platform+0x48>)
    2f8a:	e7f3      	b.n	2f74 <mutex_unlock_platform+0x2c>
    2f8c:	ffff8fe9 	.word	0xffff8fe9
    2f90:	ffff8fea 	.word	0xffff8fea

00002f94 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    2f94:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    2f96:	4604      	mov	r4, r0
    2f98:	b918      	cbnz	r0, 2fa2 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    2f9a:	4b16      	ldr	r3, [pc, #88]	; (2ff4 <mutex_init_platform+0x60>)
    2f9c:	4816      	ldr	r0, [pc, #88]	; (2ff8 <mutex_init_platform+0x64>)
    2f9e:	685b      	ldr	r3, [r3, #4]
    2fa0:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    2fa2:	6863      	ldr	r3, [r4, #4]
    2fa4:	2b04      	cmp	r3, #4
    2fa6:	d023      	beq.n	2ff0 <mutex_init_platform+0x5c>
    2fa8:	2b08      	cmp	r3, #8
    2faa:	d021      	beq.n	2ff0 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    2fac:	b9cb      	cbnz	r3, 2fe2 <mutex_init_platform+0x4e>
    2fae:	6823      	ldr	r3, [r4, #0]
    2fb0:	b9bb      	cbnz	r3, 2fe2 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    2fb2:	4812      	ldr	r0, [pc, #72]	; (2ffc <mutex_init_platform+0x68>)
    2fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2fbc:	4621      	mov	r1, r4
    2fbe:	f003 fad9 	bl	6574 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    2fc2:	b908      	cbnz	r0, 2fc8 <mutex_init_platform+0x34>
    2fc4:	6823      	ldr	r3, [r4, #0]
    2fc6:	b91b      	cbnz	r3, 2fd0 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    2fc8:	4b0a      	ldr	r3, [pc, #40]	; (2ff4 <mutex_init_platform+0x60>)
    2fca:	480d      	ldr	r0, [pc, #52]	; (3000 <mutex_init_platform+0x6c>)
    2fcc:	685b      	ldr	r3, [r3, #4]
    2fce:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    2fd0:	6820      	ldr	r0, [r4, #0]
    2fd2:	2214      	movs	r2, #20
    2fd4:	2100      	movs	r1, #0
    2fd6:	f006 f9ca 	bl	936e <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    2fda:	6863      	ldr	r3, [r4, #4]
    2fdc:	f043 0302 	orr.w	r3, r3, #2
    2fe0:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    2fe2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    2fe4:	f006 fcf9 	bl	99da <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    2fe8:	6863      	ldr	r3, [r4, #4]
    2fea:	f043 0301 	orr.w	r3, r3, #1
    2fee:	6063      	str	r3, [r4, #4]
}
    2ff0:	bd10      	pop	{r4, pc}
    2ff2:	bf00      	nop
    2ff4:	2000017c 	.word	0x2000017c
    2ff8:	0000ac56 	.word	0x0000ac56
    2ffc:	20000654 	.word	0x20000654
    3000:	0000ac7c 	.word	0x0000ac7c

00003004 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3004:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3006:	4906      	ldr	r1, [pc, #24]	; (3020 <nrf_cc3xx_platform_mutex_init+0x1c>)
    3008:	4806      	ldr	r0, [pc, #24]	; (3024 <nrf_cc3xx_platform_mutex_init+0x20>)
    300a:	2340      	movs	r3, #64	; 0x40
    300c:	2214      	movs	r2, #20
    300e:	f006 fcb1 	bl	9974 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    3012:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3016:	4904      	ldr	r1, [pc, #16]	; (3028 <nrf_cc3xx_platform_mutex_init+0x24>)
    3018:	4804      	ldr	r0, [pc, #16]	; (302c <nrf_cc3xx_platform_mutex_init+0x28>)
    301a:	f005 be41 	b.w	8ca0 <nrf_cc3xx_platform_set_mutexes>
    301e:	bf00      	nop
    3020:	20000674 	.word	0x20000674
    3024:	20000654 	.word	0x20000654
    3028:	00009e9c 	.word	0x00009e9c
    302c:	00009e8c 	.word	0x00009e8c

00003030 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3030:	4901      	ldr	r1, [pc, #4]	; (3038 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3032:	2210      	movs	r2, #16
	str	r2, [r1]
    3034:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3036:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3038:	e000ed10 	.word	0xe000ed10

0000303c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    303c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    303e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3040:	f380 8811 	msr	BASEPRI, r0
	isb
    3044:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3048:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    304c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    304e:	b662      	cpsie	i
	isb
    3050:	f3bf 8f6f 	isb	sy

	bx	lr
    3054:	4770      	bx	lr
    3056:	bf00      	nop

00003058 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3058:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    305a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    305c:	f381 8811 	msr	BASEPRI, r1

	wfe
    3060:	bf20      	wfe

	msr	BASEPRI, r0
    3062:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3066:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3068:	4770      	bx	lr
    306a:	bf00      	nop

0000306c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    306c:	b570      	push	{r4, r5, r6, lr}
    306e:	4606      	mov	r6, r0
    3070:	b086      	sub	sp, #24

	if (esf != NULL) {
    3072:	460d      	mov	r5, r1
    3074:	2900      	cmp	r1, #0
    3076:	d038      	beq.n	30ea <z_arm_fatal_error+0x7e>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3078:	688b      	ldr	r3, [r1, #8]
    307a:	9305      	str	r3, [sp, #20]
    307c:	684b      	ldr	r3, [r1, #4]
    307e:	9304      	str	r3, [sp, #16]
    3080:	680b      	ldr	r3, [r1, #0]
    3082:	9303      	str	r3, [sp, #12]
    3084:	2400      	movs	r4, #0
    3086:	4b1c      	ldr	r3, [pc, #112]	; (30f8 <z_arm_fatal_error+0x8c>)
    3088:	491c      	ldr	r1, [pc, #112]	; (30fc <z_arm_fatal_error+0x90>)
    308a:	9302      	str	r3, [sp, #8]
    308c:	2201      	movs	r2, #1
    308e:	4623      	mov	r3, r4
    3090:	4620      	mov	r0, r4
    3092:	e9cd 4400 	strd	r4, r4, [sp]
    3096:	f006 f8fa 	bl	928e <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    309a:	696b      	ldr	r3, [r5, #20]
    309c:	9305      	str	r3, [sp, #20]
    309e:	692b      	ldr	r3, [r5, #16]
    30a0:	9304      	str	r3, [sp, #16]
    30a2:	68eb      	ldr	r3, [r5, #12]
    30a4:	9303      	str	r3, [sp, #12]
    30a6:	4b16      	ldr	r3, [pc, #88]	; (3100 <z_arm_fatal_error+0x94>)
    30a8:	4914      	ldr	r1, [pc, #80]	; (30fc <z_arm_fatal_error+0x90>)
    30aa:	9400      	str	r4, [sp, #0]
    30ac:	e9cd 4301 	strd	r4, r3, [sp, #4]
    30b0:	2201      	movs	r2, #1
    30b2:	4623      	mov	r3, r4
    30b4:	4620      	mov	r0, r4
    30b6:	f006 f8ea 	bl	928e <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    30ba:	69eb      	ldr	r3, [r5, #28]
    30bc:	9303      	str	r3, [sp, #12]
    30be:	4b11      	ldr	r3, [pc, #68]	; (3104 <z_arm_fatal_error+0x98>)
    30c0:	490e      	ldr	r1, [pc, #56]	; (30fc <z_arm_fatal_error+0x90>)
    30c2:	9400      	str	r4, [sp, #0]
    30c4:	e9cd 4301 	strd	r4, r3, [sp, #4]
    30c8:	2201      	movs	r2, #1
    30ca:	4623      	mov	r3, r4
    30cc:	4620      	mov	r0, r4
    30ce:	f006 f8de 	bl	928e <z_log_msg2_runtime_create.constprop.0>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    30d2:	69ab      	ldr	r3, [r5, #24]
    30d4:	9303      	str	r3, [sp, #12]
    30d6:	4b0c      	ldr	r3, [pc, #48]	; (3108 <z_arm_fatal_error+0x9c>)
    30d8:	4908      	ldr	r1, [pc, #32]	; (30fc <z_arm_fatal_error+0x90>)
    30da:	9400      	str	r4, [sp, #0]
    30dc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    30e0:	2201      	movs	r2, #1
    30e2:	4623      	mov	r3, r4
    30e4:	4620      	mov	r0, r4
    30e6:	f006 f8d2 	bl	928e <z_log_msg2_runtime_create.constprop.0>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    30ea:	4629      	mov	r1, r5
    30ec:	4630      	mov	r0, r6
}
    30ee:	b006      	add	sp, #24
    30f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    30f4:	f003 b8be 	b.w	6274 <z_fatal_error>
    30f8:	0000aca9 	.word	0x0000aca9
    30fc:	00009d5c 	.word	0x00009d5c
    3100:	0000acd8 	.word	0x0000acd8
    3104:	0000ad07 	.word	0x0000ad07
    3108:	0000ad16 	.word	0x0000ad16

0000310c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    310c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    310e:	2b00      	cmp	r3, #0
    3110:	db08      	blt.n	3124 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3112:	2201      	movs	r2, #1
    3114:	f000 001f 	and.w	r0, r0, #31
    3118:	fa02 f000 	lsl.w	r0, r2, r0
    311c:	095b      	lsrs	r3, r3, #5
    311e:	4a02      	ldr	r2, [pc, #8]	; (3128 <arch_irq_enable+0x1c>)
    3120:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3124:	4770      	bx	lr
    3126:	bf00      	nop
    3128:	e000e100 	.word	0xe000e100

0000312c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    312c:	4b05      	ldr	r3, [pc, #20]	; (3144 <arch_irq_is_enabled+0x18>)
    312e:	0942      	lsrs	r2, r0, #5
    3130:	f000 001f 	and.w	r0, r0, #31
    3134:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3138:	2301      	movs	r3, #1
    313a:	fa03 f000 	lsl.w	r0, r3, r0
}
    313e:	4010      	ands	r0, r2
    3140:	4770      	bx	lr
    3142:	bf00      	nop
    3144:	e000e100 	.word	0xe000e100

00003148 <z_arm_irq_priority_set>:
 * The priority is verified if ASSERT_ON is enabled. The maximum number
 * of priority levels is a little complex, as there are some hardware
 * priority levels which are reserved.
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    3148:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    314a:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    314c:	2c07      	cmp	r4, #7
{
    314e:	4605      	mov	r5, r0
    3150:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    3152:	d90f      	bls.n	3174 <z_arm_irq_priority_set+0x2c>
    3154:	4a11      	ldr	r2, [pc, #68]	; (319c <z_arm_irq_priority_set+0x54>)
    3156:	4912      	ldr	r1, [pc, #72]	; (31a0 <z_arm_irq_priority_set+0x58>)
    3158:	4812      	ldr	r0, [pc, #72]	; (31a4 <z_arm_irq_priority_set+0x5c>)
    315a:	2357      	movs	r3, #87	; 0x57
    315c:	f006 f819 	bl	9192 <assert_print>
    3160:	4811      	ldr	r0, [pc, #68]	; (31a8 <z_arm_irq_priority_set+0x60>)
    3162:	4631      	mov	r1, r6
    3164:	2307      	movs	r3, #7
    3166:	462a      	mov	r2, r5
    3168:	f006 f813 	bl	9192 <assert_print>
    316c:	480b      	ldr	r0, [pc, #44]	; (319c <z_arm_irq_priority_set+0x54>)
    316e:	2157      	movs	r1, #87	; 0x57
    3170:	f006 f808 	bl	9184 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3174:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3176:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3178:	bfac      	ite	ge
    317a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    317e:	4b0b      	ldrlt	r3, [pc, #44]	; (31ac <z_arm_irq_priority_set+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3180:	ea4f 1444 	mov.w	r4, r4, lsl #5
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3184:	bfb8      	it	lt
    3186:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    318a:	b2e4      	uxtb	r4, r4
    318c:	bfaa      	itet	ge
    318e:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3192:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3194:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    3198:	bd70      	pop	{r4, r5, r6, pc}
    319a:	bf00      	nop
    319c:	0000ad44 	.word	0x0000ad44
    31a0:	0000ad7a 	.word	0x0000ad7a
    31a4:	0000a107 	.word	0x0000a107
    31a8:	0000ad95 	.word	0x0000ad95
    31ac:	e000ed14 	.word	0xe000ed14

000031b0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    31b0:	bf30      	wfi
    b z_SysNmiOnReset
    31b2:	f7ff bffd 	b.w	31b0 <z_SysNmiOnReset>
    31b6:	bf00      	nop

000031b8 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    31b8:	4a0b      	ldr	r2, [pc, #44]	; (31e8 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    31ba:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    31bc:	4b0b      	ldr	r3, [pc, #44]	; (31ec <z_arm_prep_c+0x34>)
    31be:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    31c2:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    31c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    31c8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    31cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    31d0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    31d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    31d8:	f003 f8e0 	bl	639c <z_bss_zero>
	z_data_copy();
    31dc:	f005 f858 	bl	8290 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    31e0:	f000 fbe6 	bl	39b0 <z_arm_interrupt_init>
	z_cstart();
    31e4:	f003 f91e 	bl	6424 <z_cstart>
    31e8:	00000000 	.word	0x00000000
    31ec:	e000ed00 	.word	0xe000ed00

000031f0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    31f0:	4a09      	ldr	r2, [pc, #36]	; (3218 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    31f2:	490a      	ldr	r1, [pc, #40]	; (321c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    31f4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    31f6:	6809      	ldr	r1, [r1, #0]
    31f8:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    31fa:	4909      	ldr	r1, [pc, #36]	; (3220 <arch_swap+0x30>)
	_current->arch.basepri = key;
    31fc:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    31fe:	684b      	ldr	r3, [r1, #4]
    3200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3204:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    3206:	2300      	movs	r3, #0
    3208:	f383 8811 	msr	BASEPRI, r3
    320c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3210:	6893      	ldr	r3, [r2, #8]
}
    3212:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3214:	4770      	bx	lr
    3216:	bf00      	nop
    3218:	20000cc8 	.word	0x20000cc8
    321c:	00009ff0 	.word	0x00009ff0
    3220:	e000ed00 	.word	0xe000ed00

00003224 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3224:	4912      	ldr	r1, [pc, #72]	; (3270 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3226:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3228:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    322c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    322e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3232:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3236:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3238:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    323c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3240:	4f0c      	ldr	r7, [pc, #48]	; (3274 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3242:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3246:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3248:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    324a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    324c:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    324e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3250:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3252:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3256:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3258:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    325a:	f000 fc45 	bl	3ae8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    325e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3262:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3266:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    326a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    326e:	4770      	bx	lr
    ldr r1, =_kernel
    3270:	20000cc8 	.word	0x20000cc8
    ldr v4, =_SCS_ICSR
    3274:	e000ed04 	.word	0xe000ed04

00003278 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3278:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    327c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    327e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3282:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3286:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3288:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    328c:	2902      	cmp	r1, #2
    beq _oops
    328e:	d0ff      	beq.n	3290 <_oops>

00003290 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3290:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3292:	f006 f80c 	bl	92ae <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3296:	bd01      	pop	{r0, pc}

00003298 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3298:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    329c:	9b00      	ldr	r3, [sp, #0]
    329e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    32a2:	490a      	ldr	r1, [pc, #40]	; (32cc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    32a4:	9b01      	ldr	r3, [sp, #4]
    32a6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    32aa:	9b02      	ldr	r3, [sp, #8]
    32ac:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    32b0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    32b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    32b8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    32bc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    32c0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    32c2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    32c4:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    32c6:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    32c8:	4770      	bx	lr
    32ca:	bf00      	nop
    32cc:	00009061 	.word	0x00009061

000032d0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    32d0:	4a09      	ldr	r2, [pc, #36]	; (32f8 <z_check_thread_stack_fail+0x28>)
{
    32d2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    32d4:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    32d6:	b170      	cbz	r0, 32f6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    32d8:	f113 0f16 	cmn.w	r3, #22
    32dc:	6e40      	ldr	r0, [r0, #100]	; 0x64
    32de:	d005      	beq.n	32ec <z_check_thread_stack_fail+0x1c>
    32e0:	f1a0 0220 	sub.w	r2, r0, #32
    32e4:	429a      	cmp	r2, r3
    32e6:	d805      	bhi.n	32f4 <z_check_thread_stack_fail+0x24>
    32e8:	4283      	cmp	r3, r0
    32ea:	d203      	bcs.n	32f4 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    32ec:	4281      	cmp	r1, r0
    32ee:	bf28      	it	cs
    32f0:	2000      	movcs	r0, #0
    32f2:	4770      	bx	lr
    32f4:	2000      	movs	r0, #0
}
    32f6:	4770      	bx	lr
    32f8:	20000cc8 	.word	0x20000cc8

000032fc <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    32fc:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    32fe:	4b09      	ldr	r3, [pc, #36]	; (3324 <arch_switch_to_main_thread+0x28>)
    3300:	6098      	str	r0, [r3, #8]
{
    3302:	460d      	mov	r5, r1
    3304:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3306:	f000 fbef 	bl	3ae8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    330a:	4620      	mov	r0, r4
    330c:	f385 8809 	msr	PSP, r5
    3310:	2100      	movs	r1, #0
    3312:	b663      	cpsie	if
    3314:	f381 8811 	msr	BASEPRI, r1
    3318:	f3bf 8f6f 	isb	sy
    331c:	2200      	movs	r2, #0
    331e:	2300      	movs	r3, #0
    3320:	f005 fe9e 	bl	9060 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3324:	20000cc8 	.word	0x20000cc8

00003328 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3328:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    332a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    332c:	4a0b      	ldr	r2, [pc, #44]	; (335c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    332e:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3330:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3332:	bf1e      	ittt	ne
	movne	r1, #0
    3334:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3336:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3338:	f006 fb40 	blne	99bc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    333c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    333e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3342:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3346:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    334a:	4905      	ldr	r1, [pc, #20]	; (3360 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    334c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    334e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3350:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3352:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3356:	4903      	ldr	r1, [pc, #12]	; (3364 <_isr_wrapper+0x3c>)
	bx r1
    3358:	4708      	bx	r1
    335a:	0000      	.short	0x0000
	ldr r2, =_kernel
    335c:	20000cc8 	.word	0x20000cc8
	ldr r1, =_sw_isr_table
    3360:	00009bac 	.word	0x00009bac
	ldr r1, =z_arm_int_exit
    3364:	00003369 	.word	0x00003369

00003368 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3368:	4b04      	ldr	r3, [pc, #16]	; (337c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    336a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    336c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    336e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3370:	d003      	beq.n	337a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3372:	4903      	ldr	r1, [pc, #12]	; (3380 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3378:	600a      	str	r2, [r1, #0]

0000337a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    337a:	4770      	bx	lr
	ldr r3, =_kernel
    337c:	20000cc8 	.word	0x20000cc8
	ldr r1, =_SCS_ICSR
    3380:	e000ed04 	.word	0xe000ed04

00003384 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3384:	b5f0      	push	{r4, r5, r6, r7, lr}
    3386:	b085      	sub	sp, #20
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3388:	2400      	movs	r4, #0
    338a:	4b3b      	ldr	r3, [pc, #236]	; (3478 <bus_fault.constprop.0+0xf4>)
    338c:	9302      	str	r3, [sp, #8]
    338e:	e9cd 4400 	strd	r4, r4, [sp]
    3392:	4623      	mov	r3, r4
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3394:	4607      	mov	r7, r0
    3396:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    3398:	2201      	movs	r2, #1
    339a:	4938      	ldr	r1, [pc, #224]	; (347c <bus_fault.constprop.0+0xf8>)
    339c:	4620      	mov	r0, r4
    339e:	f005 ff95 	bl	92cc <z_log_msg2_runtime_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    33a2:	4b37      	ldr	r3, [pc, #220]	; (3480 <bus_fault.constprop.0+0xfc>)
    33a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33a6:	04db      	lsls	r3, r3, #19
    33a8:	d509      	bpl.n	33be <bus_fault.constprop.0+0x3a>
		PR_FAULT_INFO("  Stacking error");
    33aa:	4b36      	ldr	r3, [pc, #216]	; (3484 <bus_fault.constprop.0+0x100>)
    33ac:	4933      	ldr	r1, [pc, #204]	; (347c <bus_fault.constprop.0+0xf8>)
    33ae:	9400      	str	r4, [sp, #0]
    33b0:	e9cd 4301 	strd	r4, r3, [sp, #4]
    33b4:	2201      	movs	r2, #1
    33b6:	4623      	mov	r3, r4
    33b8:	4620      	mov	r0, r4
    33ba:	f005 ff87 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    33be:	4b30      	ldr	r3, [pc, #192]	; (3480 <bus_fault.constprop.0+0xfc>)
    33c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    33c2:	051d      	lsls	r5, r3, #20
    33c4:	d509      	bpl.n	33da <bus_fault.constprop.0+0x56>
		PR_FAULT_INFO("  Unstacking error");
    33c6:	4b30      	ldr	r3, [pc, #192]	; (3488 <bus_fault.constprop.0+0x104>)
    33c8:	9302      	str	r3, [sp, #8]
    33ca:	2300      	movs	r3, #0
    33cc:	e9cd 3300 	strd	r3, r3, [sp]
    33d0:	492a      	ldr	r1, [pc, #168]	; (347c <bus_fault.constprop.0+0xf8>)
    33d2:	2201      	movs	r2, #1
    33d4:	4618      	mov	r0, r3
    33d6:	f005 ff79 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    33da:	4d29      	ldr	r5, [pc, #164]	; (3480 <bus_fault.constprop.0+0xfc>)
    33dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    33de:	059c      	lsls	r4, r3, #22
    33e0:	d51e      	bpl.n	3420 <bus_fault.constprop.0+0x9c>
		PR_FAULT_INFO("  Precise data bus error");
    33e2:	2400      	movs	r4, #0
    33e4:	4b29      	ldr	r3, [pc, #164]	; (348c <bus_fault.constprop.0+0x108>)
    33e6:	9302      	str	r3, [sp, #8]
    33e8:	2201      	movs	r2, #1
    33ea:	4623      	mov	r3, r4
    33ec:	4620      	mov	r0, r4
    33ee:	e9cd 4400 	strd	r4, r4, [sp]
    33f2:	4922      	ldr	r1, [pc, #136]	; (347c <bus_fault.constprop.0+0xf8>)
    33f4:	f005 ff6a 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    33f8:	6bab      	ldr	r3, [r5, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    33fa:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    33fc:	0410      	lsls	r0, r2, #16
    33fe:	d50f      	bpl.n	3420 <bus_fault.constprop.0+0x9c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3400:	9303      	str	r3, [sp, #12]
    3402:	4b23      	ldr	r3, [pc, #140]	; (3490 <bus_fault.constprop.0+0x10c>)
    3404:	491d      	ldr	r1, [pc, #116]	; (347c <bus_fault.constprop.0+0xf8>)
    3406:	9400      	str	r4, [sp, #0]
    3408:	e9cd 4301 	strd	r4, r3, [sp, #4]
    340c:	2201      	movs	r2, #1
    340e:	4623      	mov	r3, r4
    3410:	4620      	mov	r0, r4
    3412:	f005 ff5b 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    3416:	b11f      	cbz	r7, 3420 <bus_fault.constprop.0+0x9c>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3418:	6aab      	ldr	r3, [r5, #40]	; 0x28
    341a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    341e:	62ab      	str	r3, [r5, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3420:	4b17      	ldr	r3, [pc, #92]	; (3480 <bus_fault.constprop.0+0xfc>)
    3422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3424:	0559      	lsls	r1, r3, #21
    3426:	d509      	bpl.n	343c <bus_fault.constprop.0+0xb8>
		PR_FAULT_INFO("  Imprecise data bus error");
    3428:	4b1a      	ldr	r3, [pc, #104]	; (3494 <bus_fault.constprop.0+0x110>)
    342a:	9302      	str	r3, [sp, #8]
    342c:	2300      	movs	r3, #0
    342e:	e9cd 3300 	strd	r3, r3, [sp]
    3432:	4912      	ldr	r1, [pc, #72]	; (347c <bus_fault.constprop.0+0xf8>)
    3434:	2201      	movs	r2, #1
    3436:	4618      	mov	r0, r3
    3438:	f005 ff48 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    343c:	4a10      	ldr	r2, [pc, #64]	; (3480 <bus_fault.constprop.0+0xfc>)
    343e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3440:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    3444:	d012      	beq.n	346c <bus_fault.constprop.0+0xe8>
		PR_FAULT_INFO("  Instruction bus error");
    3446:	4b14      	ldr	r3, [pc, #80]	; (3498 <bus_fault.constprop.0+0x114>)
    3448:	9302      	str	r3, [sp, #8]
    344a:	2300      	movs	r3, #0
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    344c:	e9cd 3300 	strd	r3, r3, [sp]
    3450:	490a      	ldr	r1, [pc, #40]	; (347c <bus_fault.constprop.0+0xf8>)
    3452:	2201      	movs	r2, #1
    3454:	4618      	mov	r0, r3
    3456:	f005 ff39 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    345a:	4a09      	ldr	r2, [pc, #36]	; (3480 <bus_fault.constprop.0+0xfc>)
    345c:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    345e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3460:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3464:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    3466:	7030      	strb	r0, [r6, #0]

	return reason;
}
    3468:	b005      	add	sp, #20
    346a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    346c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    346e:	0492      	lsls	r2, r2, #18
    3470:	d5f3      	bpl.n	345a <bus_fault.constprop.0+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    3472:	4a0a      	ldr	r2, [pc, #40]	; (349c <bus_fault.constprop.0+0x118>)
    3474:	9202      	str	r2, [sp, #8]
    3476:	e7e9      	b.n	344c <bus_fault.constprop.0+0xc8>
    3478:	0000add5 	.word	0x0000add5
    347c:	00009d5c 	.word	0x00009d5c
    3480:	e000ed00 	.word	0xe000ed00
    3484:	0000adeb 	.word	0x0000adeb
    3488:	0000adfc 	.word	0x0000adfc
    348c:	0000ae0f 	.word	0x0000ae0f
    3490:	0000ae28 	.word	0x0000ae28
    3494:	0000ae3d 	.word	0x0000ae3d
    3498:	0000ae58 	.word	0x0000ae58
    349c:	0000ae70 	.word	0x0000ae70

000034a0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    34a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    34a2:	2400      	movs	r4, #0
    34a4:	4b33      	ldr	r3, [pc, #204]	; (3574 <usage_fault.constprop.0+0xd4>)
    34a6:	9302      	str	r3, [sp, #8]
    34a8:	e9cd 4400 	strd	r4, r4, [sp]
    34ac:	4623      	mov	r3, r4
    34ae:	4932      	ldr	r1, [pc, #200]	; (3578 <usage_fault.constprop.0+0xd8>)
    34b0:	2201      	movs	r2, #1
    34b2:	4620      	mov	r0, r4
    34b4:	f005 ff0a 	bl	92cc <z_log_msg2_runtime_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    34b8:	4b30      	ldr	r3, [pc, #192]	; (357c <usage_fault.constprop.0+0xdc>)
    34ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34bc:	019b      	lsls	r3, r3, #6
    34be:	d509      	bpl.n	34d4 <usage_fault.constprop.0+0x34>
		PR_FAULT_INFO("  Division by zero");
    34c0:	4b2f      	ldr	r3, [pc, #188]	; (3580 <usage_fault.constprop.0+0xe0>)
    34c2:	492d      	ldr	r1, [pc, #180]	; (3578 <usage_fault.constprop.0+0xd8>)
    34c4:	9400      	str	r4, [sp, #0]
    34c6:	e9cd 4301 	strd	r4, r3, [sp, #4]
    34ca:	2201      	movs	r2, #1
    34cc:	4623      	mov	r3, r4
    34ce:	4620      	mov	r0, r4
    34d0:	f005 fefc 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    34d4:	4b29      	ldr	r3, [pc, #164]	; (357c <usage_fault.constprop.0+0xdc>)
    34d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34d8:	01dc      	lsls	r4, r3, #7
    34da:	d509      	bpl.n	34f0 <usage_fault.constprop.0+0x50>
		PR_FAULT_INFO("  Unaligned memory access");
    34dc:	4b29      	ldr	r3, [pc, #164]	; (3584 <usage_fault.constprop.0+0xe4>)
    34de:	9302      	str	r3, [sp, #8]
    34e0:	2300      	movs	r3, #0
    34e2:	e9cd 3300 	strd	r3, r3, [sp]
    34e6:	4924      	ldr	r1, [pc, #144]	; (3578 <usage_fault.constprop.0+0xd8>)
    34e8:	2201      	movs	r2, #1
    34ea:	4618      	mov	r0, r3
    34ec:	f005 feee 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    34f0:	4b22      	ldr	r3, [pc, #136]	; (357c <usage_fault.constprop.0+0xdc>)
    34f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    34f4:	0318      	lsls	r0, r3, #12
    34f6:	d509      	bpl.n	350c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  No coprocessor instructions");
    34f8:	4b23      	ldr	r3, [pc, #140]	; (3588 <usage_fault.constprop.0+0xe8>)
    34fa:	9302      	str	r3, [sp, #8]
    34fc:	2300      	movs	r3, #0
    34fe:	e9cd 3300 	strd	r3, r3, [sp]
    3502:	491d      	ldr	r1, [pc, #116]	; (3578 <usage_fault.constprop.0+0xd8>)
    3504:	2201      	movs	r2, #1
    3506:	4618      	mov	r0, r3
    3508:	f005 fee0 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    350c:	4b1b      	ldr	r3, [pc, #108]	; (357c <usage_fault.constprop.0+0xdc>)
    350e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3510:	0359      	lsls	r1, r3, #13
    3512:	d509      	bpl.n	3528 <usage_fault.constprop.0+0x88>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3514:	4b1d      	ldr	r3, [pc, #116]	; (358c <usage_fault.constprop.0+0xec>)
    3516:	9302      	str	r3, [sp, #8]
    3518:	2300      	movs	r3, #0
    351a:	e9cd 3300 	strd	r3, r3, [sp]
    351e:	4916      	ldr	r1, [pc, #88]	; (3578 <usage_fault.constprop.0+0xd8>)
    3520:	2201      	movs	r2, #1
    3522:	4618      	mov	r0, r3
    3524:	f005 fed2 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3528:	4b14      	ldr	r3, [pc, #80]	; (357c <usage_fault.constprop.0+0xdc>)
    352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    352c:	039a      	lsls	r2, r3, #14
    352e:	d509      	bpl.n	3544 <usage_fault.constprop.0+0xa4>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3530:	4b17      	ldr	r3, [pc, #92]	; (3590 <usage_fault.constprop.0+0xf0>)
    3532:	9302      	str	r3, [sp, #8]
    3534:	2300      	movs	r3, #0
    3536:	e9cd 3300 	strd	r3, r3, [sp]
    353a:	490f      	ldr	r1, [pc, #60]	; (3578 <usage_fault.constprop.0+0xd8>)
    353c:	2201      	movs	r2, #1
    353e:	4618      	mov	r0, r3
    3540:	f005 fec4 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3544:	4b0d      	ldr	r3, [pc, #52]	; (357c <usage_fault.constprop.0+0xdc>)
    3546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3548:	03db      	lsls	r3, r3, #15
    354a:	d509      	bpl.n	3560 <usage_fault.constprop.0+0xc0>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    354c:	4b11      	ldr	r3, [pc, #68]	; (3594 <usage_fault.constprop.0+0xf4>)
    354e:	9302      	str	r3, [sp, #8]
    3550:	2300      	movs	r3, #0
    3552:	e9cd 3300 	strd	r3, r3, [sp]
    3556:	4908      	ldr	r1, [pc, #32]	; (3578 <usage_fault.constprop.0+0xd8>)
    3558:	2201      	movs	r2, #1
    355a:	4618      	mov	r0, r3
    355c:	f005 feb6 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3560:	4a06      	ldr	r2, [pc, #24]	; (357c <usage_fault.constprop.0+0xdc>)
    3562:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3564:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3568:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    356c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    356e:	6293      	str	r3, [r2, #40]	; 0x28
}
    3570:	b004      	add	sp, #16
    3572:	bd10      	pop	{r4, pc}
    3574:	0000ae9f 	.word	0x0000ae9f
    3578:	00009d5c 	.word	0x00009d5c
    357c:	e000ed00 	.word	0xe000ed00
    3580:	0000aeb7 	.word	0x0000aeb7
    3584:	0000aeca 	.word	0x0000aeca
    3588:	0000aee4 	.word	0x0000aee4
    358c:	0000af02 	.word	0x0000af02
    3590:	0000af27 	.word	0x0000af27
    3594:	0000af41 	.word	0x0000af41

00003598 <mem_manage_fault>:
{
    3598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    359c:	b085      	sub	sp, #20
	PR_FAULT_INFO("***** MPU FAULT *****");
    359e:	2400      	movs	r4, #0
    35a0:	4b53      	ldr	r3, [pc, #332]	; (36f0 <mem_manage_fault+0x158>)
    35a2:	9302      	str	r3, [sp, #8]
    35a4:	e9cd 4400 	strd	r4, r4, [sp]
    35a8:	4623      	mov	r3, r4
{
    35aa:	4680      	mov	r8, r0
    35ac:	4689      	mov	r9, r1
    35ae:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    35b0:	4950      	ldr	r1, [pc, #320]	; (36f4 <mem_manage_fault+0x15c>)
    35b2:	2201      	movs	r2, #1
    35b4:	4620      	mov	r0, r4
    35b6:	f005 fe89 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    35ba:	4b4f      	ldr	r3, [pc, #316]	; (36f8 <mem_manage_fault+0x160>)
    35bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35be:	06df      	lsls	r7, r3, #27
    35c0:	d509      	bpl.n	35d6 <mem_manage_fault+0x3e>
		PR_FAULT_INFO("  Stacking error (context area might be"
    35c2:	4b4e      	ldr	r3, [pc, #312]	; (36fc <mem_manage_fault+0x164>)
    35c4:	494b      	ldr	r1, [pc, #300]	; (36f4 <mem_manage_fault+0x15c>)
    35c6:	9400      	str	r4, [sp, #0]
    35c8:	e9cd 4301 	strd	r4, r3, [sp, #4]
    35cc:	2201      	movs	r2, #1
    35ce:	4623      	mov	r3, r4
    35d0:	4620      	mov	r0, r4
    35d2:	f005 fe7b 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    35d6:	4b48      	ldr	r3, [pc, #288]	; (36f8 <mem_manage_fault+0x160>)
    35d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    35da:	071d      	lsls	r5, r3, #28
    35dc:	d509      	bpl.n	35f2 <mem_manage_fault+0x5a>
		PR_FAULT_INFO("  Unstacking error");
    35de:	4b48      	ldr	r3, [pc, #288]	; (3700 <mem_manage_fault+0x168>)
    35e0:	9302      	str	r3, [sp, #8]
    35e2:	2300      	movs	r3, #0
    35e4:	e9cd 3300 	strd	r3, r3, [sp]
    35e8:	4942      	ldr	r1, [pc, #264]	; (36f4 <mem_manage_fault+0x15c>)
    35ea:	2201      	movs	r2, #1
    35ec:	4618      	mov	r0, r3
    35ee:	f005 fe6d 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    35f2:	4d41      	ldr	r5, [pc, #260]	; (36f8 <mem_manage_fault+0x160>)
    35f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    35f6:	079c      	lsls	r4, r3, #30
    35f8:	d437      	bmi.n	366a <mem_manage_fault+0xd2>
	uint32_t mmfar = -EINVAL;
    35fa:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    35fe:	4b3e      	ldr	r3, [pc, #248]	; (36f8 <mem_manage_fault+0x160>)
    3600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3602:	07d9      	lsls	r1, r3, #31
    3604:	d509      	bpl.n	361a <mem_manage_fault+0x82>
		PR_FAULT_INFO("  Instruction Access Violation");
    3606:	4b3f      	ldr	r3, [pc, #252]	; (3704 <mem_manage_fault+0x16c>)
    3608:	9302      	str	r3, [sp, #8]
    360a:	2300      	movs	r3, #0
    360c:	e9cd 3300 	strd	r3, r3, [sp]
    3610:	4938      	ldr	r1, [pc, #224]	; (36f4 <mem_manage_fault+0x15c>)
    3612:	2201      	movs	r2, #1
    3614:	4618      	mov	r0, r3
    3616:	f005 fe59 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    361a:	4b37      	ldr	r3, [pc, #220]	; (36f8 <mem_manage_fault+0x160>)
    361c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    361e:	069a      	lsls	r2, r3, #26
    3620:	d509      	bpl.n	3636 <mem_manage_fault+0x9e>
		PR_FAULT_INFO(
    3622:	4b39      	ldr	r3, [pc, #228]	; (3708 <mem_manage_fault+0x170>)
    3624:	9302      	str	r3, [sp, #8]
    3626:	2300      	movs	r3, #0
    3628:	e9cd 3300 	strd	r3, r3, [sp]
    362c:	4931      	ldr	r1, [pc, #196]	; (36f4 <mem_manage_fault+0x15c>)
    362e:	2201      	movs	r2, #1
    3630:	4618      	mov	r0, r3
    3632:	f005 fe4b 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3636:	4d30      	ldr	r5, [pc, #192]	; (36f8 <mem_manage_fault+0x160>)
    3638:	6aab      	ldr	r3, [r5, #40]	; 0x28
    363a:	06db      	lsls	r3, r3, #27
    363c:	d437      	bmi.n	36ae <mem_manage_fault+0x116>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    363e:	6aab      	ldr	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3640:	079c      	lsls	r4, r3, #30
    3642:	d434      	bmi.n	36ae <mem_manage_fault+0x116>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3644:	2400      	movs	r4, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    3646:	4b2c      	ldr	r3, [pc, #176]	; (36f8 <mem_manage_fault+0x160>)
    3648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    364a:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    364c:	bf42      	ittt	mi
    364e:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    3650:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    3654:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3656:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    3658:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    365c:	629a      	str	r2, [r3, #40]	; 0x28
}
    365e:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    3660:	2300      	movs	r3, #0
    3662:	7033      	strb	r3, [r6, #0]
}
    3664:	b005      	add	sp, #20
    3666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		PR_FAULT_INFO("  Data Access Violation");
    366a:	2400      	movs	r4, #0
    366c:	4b27      	ldr	r3, [pc, #156]	; (370c <mem_manage_fault+0x174>)
    366e:	9302      	str	r3, [sp, #8]
    3670:	4620      	mov	r0, r4
    3672:	4623      	mov	r3, r4
    3674:	e9cd 4400 	strd	r4, r4, [sp]
    3678:	491e      	ldr	r1, [pc, #120]	; (36f4 <mem_manage_fault+0x15c>)
    367a:	2201      	movs	r2, #1
    367c:	f005 fe26 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3680:	6b6f      	ldr	r7, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3682:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3684:	0618      	lsls	r0, r3, #24
    3686:	d5b8      	bpl.n	35fa <mem_manage_fault+0x62>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3688:	4b21      	ldr	r3, [pc, #132]	; (3710 <mem_manage_fault+0x178>)
    368a:	491a      	ldr	r1, [pc, #104]	; (36f4 <mem_manage_fault+0x15c>)
    368c:	9703      	str	r7, [sp, #12]
    368e:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3692:	9400      	str	r4, [sp, #0]
    3694:	4623      	mov	r3, r4
    3696:	2201      	movs	r2, #1
    3698:	4620      	mov	r0, r4
    369a:	f005 fe17 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
			if (from_hard_fault != 0) {
    369e:	f1b9 0f00 	cmp.w	r9, #0
    36a2:	d0ac      	beq.n	35fe <mem_manage_fault+0x66>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    36a4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    36a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    36aa:	62ab      	str	r3, [r5, #40]	; 0x28
    36ac:	e7a7      	b.n	35fe <mem_manage_fault+0x66>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    36ae:	686b      	ldr	r3, [r5, #4]
    36b0:	0518      	lsls	r0, r3, #20
    36b2:	d5c7      	bpl.n	3644 <mem_manage_fault+0xac>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    36b4:	4641      	mov	r1, r8
    36b6:	4638      	mov	r0, r7
    36b8:	f7ff fe0a 	bl	32d0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    36bc:	4604      	mov	r4, r0
    36be:	b118      	cbz	r0, 36c8 <mem_manage_fault+0x130>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    36c0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    36c4:	2402      	movs	r4, #2
    36c6:	e7be      	b.n	3646 <mem_manage_fault+0xae>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    36c8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    36ca:	06d9      	lsls	r1, r3, #27
    36cc:	d5ba      	bpl.n	3644 <mem_manage_fault+0xac>
    36ce:	4a11      	ldr	r2, [pc, #68]	; (3714 <mem_manage_fault+0x17c>)
    36d0:	4911      	ldr	r1, [pc, #68]	; (3718 <mem_manage_fault+0x180>)
    36d2:	4812      	ldr	r0, [pc, #72]	; (371c <mem_manage_fault+0x184>)
    36d4:	f240 1349 	movw	r3, #329	; 0x149
    36d8:	f005 fd5b 	bl	9192 <assert_print>
    36dc:	4810      	ldr	r0, [pc, #64]	; (3720 <mem_manage_fault+0x188>)
    36de:	f005 fd58 	bl	9192 <assert_print>
    36e2:	480c      	ldr	r0, [pc, #48]	; (3714 <mem_manage_fault+0x17c>)
    36e4:	f240 1149 	movw	r1, #329	; 0x149
    36e8:	f005 fd4c 	bl	9184 <assert_post_action>
    36ec:	e7ab      	b.n	3646 <mem_manage_fault+0xae>
    36ee:	bf00      	nop
    36f0:	0000af6c 	.word	0x0000af6c
    36f4:	00009d5c 	.word	0x00009d5c
    36f8:	e000ed00 	.word	0xe000ed00
    36fc:	0000af82 	.word	0x0000af82
    3700:	0000adfc 	.word	0x0000adfc
    3704:	0000afe3 	.word	0x0000afe3
    3708:	0000ae70 	.word	0x0000ae70
    370c:	0000afb5 	.word	0x0000afb5
    3710:	0000afcd 	.word	0x0000afcd
    3714:	0000b002 	.word	0x0000b002
    3718:	0000b03c 	.word	0x0000b03c
    371c:	0000a107 	.word	0x0000a107
    3720:	0000b086 	.word	0x0000b086

00003724 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3724:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3728:	4b85      	ldr	r3, [pc, #532]	; (3940 <z_arm_fault+0x21c>)
    372a:	f8d3 9004 	ldr.w	r9, [r3, #4]
{
    372e:	b091      	sub	sp, #68	; 0x44
    3730:	4688      	mov	r8, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3732:	f3c9 0608 	ubfx	r6, r9, #0, #9
    3736:	2700      	movs	r7, #0
    3738:	f387 8811 	msr	BASEPRI, r7
    373c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3740:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3744:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    3748:	d10d      	bne.n	3766 <z_arm_fault+0x42>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    374a:	f002 030c 	and.w	r3, r2, #12
    374e:	2b08      	cmp	r3, #8
    3750:	d11b      	bne.n	378a <z_arm_fault+0x66>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3752:	4b7c      	ldr	r3, [pc, #496]	; (3944 <z_arm_fault+0x220>)
    3754:	497c      	ldr	r1, [pc, #496]	; (3948 <z_arm_fault+0x224>)
    3756:	9700      	str	r7, [sp, #0]
    3758:	e9cd 7301 	strd	r7, r3, [sp, #4]
    375c:	2201      	movs	r2, #1
    375e:	463b      	mov	r3, r7
    3760:	4638      	mov	r0, r7
    3762:	f005 fdb3 	bl	92cc <z_log_msg2_runtime_create.constprop.0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    3766:	4a79      	ldr	r2, [pc, #484]	; (394c <z_arm_fault+0x228>)
    3768:	4979      	ldr	r1, [pc, #484]	; (3950 <z_arm_fault+0x22c>)
    376a:	487a      	ldr	r0, [pc, #488]	; (3954 <z_arm_fault+0x230>)
    376c:	f240 33fb 	movw	r3, #1019	; 0x3fb
    3770:	f005 fd0f 	bl	9192 <assert_print>
    3774:	4878      	ldr	r0, [pc, #480]	; (3958 <z_arm_fault+0x234>)
    3776:	f005 fd0c 	bl	9192 <assert_print>
    377a:	4874      	ldr	r0, [pc, #464]	; (394c <z_arm_fault+0x228>)
    377c:	f240 31fb 	movw	r1, #1019	; 0x3fb
    3780:	f005 fd00 	bl	9184 <assert_post_action>
    3784:	f04f 0800 	mov.w	r8, #0
    3788:	e006      	b.n	3798 <z_arm_fault+0x74>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    378a:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    378c:	bf5c      	itt	pl
    378e:	4680      	movpl	r8, r0
			*nested_exc = true;
    3790:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
    3792:	f1b8 0f00 	cmp.w	r8, #0
    3796:	d0e6      	beq.n	3766 <z_arm_fault+0x42>
	*recoverable = false;
    3798:	2500      	movs	r5, #0
	switch (fault) {
    379a:	1ef3      	subs	r3, r6, #3
	*recoverable = false;
    379c:	f88d 501f 	strb.w	r5, [sp, #31]
	switch (fault) {
    37a0:	2b09      	cmp	r3, #9
    37a2:	f200 80b3 	bhi.w	390c <z_arm_fault+0x1e8>
    37a6:	e8df f003 	tbb	[pc, r3]
    37aa:	a705      	.short	0xa705
    37ac:	b1b187ab 	.word	0xb1b187ab
    37b0:	afb1b1b1 	.word	0xafb1b1b1
	PR_FAULT_INFO("***** HARD FAULT *****");
    37b4:	4b69      	ldr	r3, [pc, #420]	; (395c <z_arm_fault+0x238>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    37b6:	4e62      	ldr	r6, [pc, #392]	; (3940 <z_arm_fault+0x21c>)
	PR_FAULT_INFO("***** HARD FAULT *****");
    37b8:	4963      	ldr	r1, [pc, #396]	; (3948 <z_arm_fault+0x224>)
    37ba:	9500      	str	r5, [sp, #0]
    37bc:	e9cd 5301 	strd	r5, r3, [sp, #4]
    37c0:	2300      	movs	r3, #0
    37c2:	2201      	movs	r2, #1
    37c4:	4618      	mov	r0, r3
    37c6:	f005 fd81 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    37ca:	6af4      	ldr	r4, [r6, #44]	; 0x2c
	*recoverable = false;
    37cc:	f88d 501f 	strb.w	r5, [sp, #31]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    37d0:	f014 0402 	ands.w	r4, r4, #2
    37d4:	d00b      	beq.n	37ee <z_arm_fault+0xca>
		PR_EXC("  Bus fault on vector table read");
    37d6:	4b62      	ldr	r3, [pc, #392]	; (3960 <z_arm_fault+0x23c>)
	PR_FAULT_INFO(
    37d8:	495b      	ldr	r1, [pc, #364]	; (3948 <z_arm_fault+0x224>)
    37da:	9500      	str	r5, [sp, #0]
    37dc:	e9cd 5301 	strd	r5, r3, [sp, #4]
    37e0:	2300      	movs	r3, #0
    37e2:	2201      	movs	r2, #1
    37e4:	4618      	mov	r0, r3
    37e6:	f005 fd71 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    37ea:	2400      	movs	r4, #0
}
    37ec:	e00c      	b.n	3808 <z_arm_fault+0xe4>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    37ee:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    37f0:	2b00      	cmp	r3, #0
    37f2:	da25      	bge.n	3840 <z_arm_fault+0x11c>
		PR_EXC("  Debug event");
    37f4:	4b5b      	ldr	r3, [pc, #364]	; (3964 <z_arm_fault+0x240>)
    37f6:	4954      	ldr	r1, [pc, #336]	; (3948 <z_arm_fault+0x224>)
    37f8:	9400      	str	r4, [sp, #0]
    37fa:	e9cd 4301 	strd	r4, r3, [sp, #4]
    37fe:	2201      	movs	r2, #1
    3800:	4623      	mov	r3, r4
    3802:	4620      	mov	r0, r4
    3804:	f005 fd62 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3808:	f89d 301f 	ldrb.w	r3, [sp, #31]
    380c:	b9ab      	cbnz	r3, 383a <z_arm_fault+0x116>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    380e:	2220      	movs	r2, #32
    3810:	4641      	mov	r1, r8
    3812:	eb0d 0002 	add.w	r0, sp, r2
    3816:	f005 fd9f 	bl	9358 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    381a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    381c:	2f00      	cmp	r7, #0
    381e:	f000 808a 	beq.w	3936 <z_arm_fault+0x212>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3822:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3826:	b922      	cbnz	r2, 3832 <z_arm_fault+0x10e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3828:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    382c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3830:	930f      	str	r3, [sp, #60]	; 0x3c
	}

	z_arm_fatal_error(reason, &esf_copy);
    3832:	a908      	add	r1, sp, #32
    3834:	4620      	mov	r0, r4
    3836:	f7ff fc19 	bl	306c <z_arm_fatal_error>
}
    383a:	b011      	add	sp, #68	; 0x44
    383c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3840:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3842:	005b      	lsls	r3, r3, #1
    3844:	d54b      	bpl.n	38de <z_arm_fault+0x1ba>
		PR_EXC("  Fault escalation (see below)");
    3846:	4b48      	ldr	r3, [pc, #288]	; (3968 <z_arm_fault+0x244>)
    3848:	493f      	ldr	r1, [pc, #252]	; (3948 <z_arm_fault+0x224>)
    384a:	9400      	str	r4, [sp, #0]
    384c:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3850:	2201      	movs	r2, #1
    3852:	4623      	mov	r3, r4
    3854:	4620      	mov	r0, r4
    3856:	f005 fd39 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    385a:	f8d8 3018 	ldr.w	r3, [r8, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    385e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    3862:	f64d 7302 	movw	r3, #57090	; 0xdf02
    3866:	429a      	cmp	r2, r3
    3868:	d10f      	bne.n	388a <z_arm_fault+0x166>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    386a:	f8d8 3000 	ldr.w	r3, [r8]
    386e:	9303      	str	r3, [sp, #12]
    3870:	4b3e      	ldr	r3, [pc, #248]	; (396c <z_arm_fault+0x248>)
    3872:	9400      	str	r4, [sp, #0]
    3874:	e9cd 4301 	strd	r4, r3, [sp, #4]
    3878:	4620      	mov	r0, r4
    387a:	4623      	mov	r3, r4
    387c:	4932      	ldr	r1, [pc, #200]	; (3948 <z_arm_fault+0x224>)
    387e:	2201      	movs	r2, #1
    3880:	f005 fd24 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
			reason = esf->basic.r0;
    3884:	f8d8 4000 	ldr.w	r4, [r8]
    3888:	e7be      	b.n	3808 <z_arm_fault+0xe4>
		} else if (SCB_MMFSR != 0) {
    388a:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    388e:	b13b      	cbz	r3, 38a0 <z_arm_fault+0x17c>
			reason = mem_manage_fault(esf, 1, recoverable);
    3890:	f10d 021f 	add.w	r2, sp, #31
    3894:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    3896:	4640      	mov	r0, r8
    3898:	f7ff fe7e 	bl	3598 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    389c:	4604      	mov	r4, r0
		break;
    389e:	e7b3      	b.n	3808 <z_arm_fault+0xe4>
		} else if (SCB_BFSR != 0) {
    38a0:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
    38a4:	b12b      	cbz	r3, 38b2 <z_arm_fault+0x18e>
			reason = bus_fault(esf, 1, recoverable);
    38a6:	f10d 011f 	add.w	r1, sp, #31
    38aa:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    38ac:	f7ff fd6a 	bl	3384 <bus_fault.constprop.0>
    38b0:	e7f4      	b.n	389c <z_arm_fault+0x178>
		} else if (SCB_UFSR != 0) {
    38b2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
    38b4:	b29b      	uxth	r3, r3
    38b6:	b113      	cbz	r3, 38be <z_arm_fault+0x19a>
		reason = usage_fault(esf);
    38b8:	f7ff fdf2 	bl	34a0 <usage_fault.constprop.0>
    38bc:	e7ee      	b.n	389c <z_arm_fault+0x178>
			__ASSERT(0,
    38be:	492c      	ldr	r1, [pc, #176]	; (3970 <z_arm_fault+0x24c>)
    38c0:	4a22      	ldr	r2, [pc, #136]	; (394c <z_arm_fault+0x228>)
    38c2:	4824      	ldr	r0, [pc, #144]	; (3954 <z_arm_fault+0x230>)
    38c4:	f240 23cd 	movw	r3, #717	; 0x2cd
    38c8:	f005 fc63 	bl	9192 <assert_print>
    38cc:	4829      	ldr	r0, [pc, #164]	; (3974 <z_arm_fault+0x250>)
    38ce:	f005 fc60 	bl	9192 <assert_print>
    38d2:	f240 21cd 	movw	r1, #717	; 0x2cd
		__ASSERT(0,
    38d6:	481d      	ldr	r0, [pc, #116]	; (394c <z_arm_fault+0x228>)
    38d8:	f005 fc54 	bl	9184 <assert_post_action>
    38dc:	e794      	b.n	3808 <z_arm_fault+0xe4>
    38de:	4924      	ldr	r1, [pc, #144]	; (3970 <z_arm_fault+0x24c>)
    38e0:	4a1a      	ldr	r2, [pc, #104]	; (394c <z_arm_fault+0x228>)
    38e2:	481c      	ldr	r0, [pc, #112]	; (3954 <z_arm_fault+0x230>)
    38e4:	f240 23d1 	movw	r3, #721	; 0x2d1
    38e8:	f005 fc53 	bl	9192 <assert_print>
    38ec:	4822      	ldr	r0, [pc, #136]	; (3978 <z_arm_fault+0x254>)
    38ee:	f005 fc50 	bl	9192 <assert_print>
    38f2:	f240 21d1 	movw	r1, #721	; 0x2d1
    38f6:	e7ee      	b.n	38d6 <z_arm_fault+0x1b2>
		reason = mem_manage_fault(esf, 0, recoverable);
    38f8:	f10d 021f 	add.w	r2, sp, #31
    38fc:	2100      	movs	r1, #0
    38fe:	e7ca      	b.n	3896 <z_arm_fault+0x172>
		reason = bus_fault(esf, 0, recoverable);
    3900:	f10d 011f 	add.w	r1, sp, #31
    3904:	2000      	movs	r0, #0
    3906:	e7d1      	b.n	38ac <z_arm_fault+0x188>
	PR_FAULT_INFO(
    3908:	4b1c      	ldr	r3, [pc, #112]	; (397c <z_arm_fault+0x258>)
    390a:	e765      	b.n	37d8 <z_arm_fault+0xb4>
	PR_FAULT_INFO("***** %s %d) *****",
    390c:	4a1c      	ldr	r2, [pc, #112]	; (3980 <z_arm_fault+0x25c>)
    390e:	4b1d      	ldr	r3, [pc, #116]	; (3984 <z_arm_fault+0x260>)
    3910:	490d      	ldr	r1, [pc, #52]	; (3948 <z_arm_fault+0x224>)
    3912:	f419 7ff8 	tst.w	r9, #496	; 0x1f0
    3916:	bf18      	it	ne
    3918:	4613      	movne	r3, r2
    391a:	3e10      	subs	r6, #16
    391c:	2400      	movs	r4, #0
    391e:	e9cd 3603 	strd	r3, r6, [sp, #12]
    3922:	4b19      	ldr	r3, [pc, #100]	; (3988 <z_arm_fault+0x264>)
    3924:	9302      	str	r3, [sp, #8]
    3926:	e9cd 4400 	strd	r4, r4, [sp]
    392a:	4623      	mov	r3, r4
    392c:	2201      	movs	r2, #1
    392e:	4620      	mov	r0, r4
    3930:	f005 fccc 	bl	92cc <z_log_msg2_runtime_create.constprop.0>
}
    3934:	e768      	b.n	3808 <z_arm_fault+0xe4>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3936:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    393a:	f023 0301 	bic.w	r3, r3, #1
    393e:	e777      	b.n	3830 <z_arm_fault+0x10c>
    3940:	e000ed00 	.word	0xe000ed00
    3944:	0000b0d7 	.word	0x0000b0d7
    3948:	00009d5c 	.word	0x00009d5c
    394c:	0000b002 	.word	0x0000b002
    3950:	0000b102 	.word	0x0000b102
    3954:	0000a107 	.word	0x0000a107
    3958:	0000b115 	.word	0x0000b115
    395c:	0000b153 	.word	0x0000b153
    3960:	0000b16a 	.word	0x0000b16a
    3964:	0000b18b 	.word	0x0000b18b
    3968:	0000b199 	.word	0x0000b199
    396c:	0000b1b8 	.word	0x0000b1b8
    3970:	0000a2aa 	.word	0x0000a2aa
    3974:	0000b1d4 	.word	0x0000b1d4
    3978:	0000b1f8 	.word	0x0000b1f8
    397c:	0000b228 	.word	0x0000b228
    3980:	0000b0be 	.word	0x0000b0be
    3984:	0000b0a9 	.word	0x0000b0a9
    3988:	0000b24c 	.word	0x0000b24c

0000398c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    398c:	4a02      	ldr	r2, [pc, #8]	; (3998 <z_arm_fault_init+0xc>)
    398e:	6953      	ldr	r3, [r2, #20]
    3990:	f043 0310 	orr.w	r3, r3, #16
    3994:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3996:	4770      	bx	lr
    3998:	e000ed00 	.word	0xe000ed00

0000399c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    399c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    39a0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    39a4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    39a6:	4672      	mov	r2, lr
	bl z_arm_fault
    39a8:	f7ff febc 	bl	3724 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    39ac:	bd01      	pop	{r0, pc}
    39ae:	bf00      	nop

000039b0 <z_arm_interrupt_init>:
    39b0:	4804      	ldr	r0, [pc, #16]	; (39c4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    39b2:	2300      	movs	r3, #0
    39b4:	2120      	movs	r1, #32
    39b6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    39b8:	3301      	adds	r3, #1
    39ba:	2b30      	cmp	r3, #48	; 0x30
    39bc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    39c0:	d1f9      	bne.n	39b6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    39c2:	4770      	bx	lr
    39c4:	e000e100 	.word	0xe000e100

000039c8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    39c8:	2000      	movs	r0, #0
    msr CONTROL, r0
    39ca:	f380 8814 	msr	CONTROL, r0
    isb
    39ce:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    39d2:	f006 f861 	bl	9a98 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    39d6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    39d8:	490d      	ldr	r1, [pc, #52]	; (3a10 <__start+0x48>)
    str r0, [r1]
    39da:	6008      	str	r0, [r1, #0]
    dsb
    39dc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    39e0:	480c      	ldr	r0, [pc, #48]	; (3a14 <__start+0x4c>)
    msr msp, r0
    39e2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    39e6:	f000 f82b 	bl	3a40 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    39ea:	2020      	movs	r0, #32
    msr BASEPRI, r0
    39ec:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    39f0:	4809      	ldr	r0, [pc, #36]	; (3a18 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    39f2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    39f6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    39f8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    39fc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3a00:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3a02:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3a04:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3a08:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3a0c:	f7ff fbd4 	bl	31b8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3a10:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3a14:	200027a0 	.word	0x200027a0
    ldr r0, =z_interrupt_stacks
    3a18:	20002920 	.word	0x20002920

00003a1c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3a1c:	4907      	ldr	r1, [pc, #28]	; (3a3c <z_arm_clear_arm_mpu_config+0x20>)
    3a1e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    3a22:	2300      	movs	r3, #0
	int num_regions =
    3a24:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3a28:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3a2a:	4293      	cmp	r3, r2
    3a2c:	d100      	bne.n	3a30 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3a2e:	4770      	bx	lr
  MPU->RNR = rnr;
    3a30:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    3a34:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3a38:	3301      	adds	r3, #1
    3a3a:	e7f6      	b.n	3a2a <z_arm_clear_arm_mpu_config+0xe>
    3a3c:	e000ed00 	.word	0xe000ed00

00003a40 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3a40:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3a42:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3a44:	2300      	movs	r3, #0
    3a46:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3a4a:	f7ff ffe7 	bl	3a1c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3a4e:	4b14      	ldr	r3, [pc, #80]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3a58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3a5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3a60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3a64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3a68:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3a6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3a70:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3a74:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3a78:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3a7c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3a80:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3a84:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3a88:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    3a8c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3a90:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3a94:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3a96:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3a9a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    3a9e:	bd08      	pop	{r3, pc}
    3aa0:	e000e100 	.word	0xe000e100

00003aa4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3aa4:	4b08      	ldr	r3, [pc, #32]	; (3ac8 <z_impl_k_thread_abort+0x24>)
    3aa6:	689b      	ldr	r3, [r3, #8]
    3aa8:	4283      	cmp	r3, r0
    3aaa:	d10b      	bne.n	3ac4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3aac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3ab0:	b143      	cbz	r3, 3ac4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3ab2:	4b06      	ldr	r3, [pc, #24]	; (3acc <z_impl_k_thread_abort+0x28>)
    3ab4:	685a      	ldr	r2, [r3, #4]
    3ab6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    3aba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    3abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3ac2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3ac4:	f004 bb30 	b.w	8128 <z_thread_abort>
    3ac8:	20000cc8 	.word	0x20000cc8
    3acc:	e000ed00 	.word	0xe000ed00

00003ad0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3ad0:	4b02      	ldr	r3, [pc, #8]	; (3adc <z_arm_configure_static_mpu_regions+0xc>)
    3ad2:	4a03      	ldr	r2, [pc, #12]	; (3ae0 <z_arm_configure_static_mpu_regions+0x10>)
    3ad4:	4803      	ldr	r0, [pc, #12]	; (3ae4 <z_arm_configure_static_mpu_regions+0x14>)
    3ad6:	2101      	movs	r1, #1
    3ad8:	f000 b884 	b.w	3be4 <arm_core_mpu_configure_static_mpu_regions>
    3adc:	20040000 	.word	0x20040000
    3ae0:	20000000 	.word	0x20000000
    3ae4:	00009eb0 	.word	0x00009eb0

00003ae8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3ae8:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3aea:	4b05      	ldr	r3, [pc, #20]	; (3b00 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3aec:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    3aee:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3af0:	4a04      	ldr	r2, [pc, #16]	; (3b04 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3af2:	2120      	movs	r1, #32
    3af4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3af8:	4618      	mov	r0, r3
    3afa:	2101      	movs	r1, #1
    3afc:	f000 b89a 	b.w	3c34 <arm_core_mpu_configure_dynamic_mpu_regions>
    3b00:	20000b74 	.word	0x20000b74
    3b04:	150b0000 	.word	0x150b0000

00003b08 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3b08:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3b0a:	4f27      	ldr	r7, [pc, #156]	; (3ba8 <mpu_configure_regions+0xa0>)
    3b0c:	b085      	sub	sp, #20
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3b0e:	2600      	movs	r6, #0
    3b10:	428e      	cmp	r6, r1
    3b12:	da15      	bge.n	3b40 <mpu_configure_regions+0x38>
		if (regions[i].size == 0U) {
    3b14:	6844      	ldr	r4, [r0, #4]
    3b16:	2c00      	cmp	r4, #0
    3b18:	d043      	beq.n	3ba2 <mpu_configure_regions+0x9a>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3b1a:	b1d3      	cbz	r3, 3b52 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3b1c:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3b20:	ea14 0f0c 	tst.w	r4, ip
    3b24:	d00f      	beq.n	3b46 <mpu_configure_regions+0x3e>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3b26:	4b21      	ldr	r3, [pc, #132]	; (3bac <mpu_configure_regions+0xa4>)
    3b28:	9603      	str	r6, [sp, #12]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3b2a:	9302      	str	r3, [sp, #8]
    3b2c:	2300      	movs	r3, #0
    3b2e:	2201      	movs	r2, #1
    3b30:	e9cd 3300 	strd	r3, r3, [sp]
    3b34:	491e      	ldr	r1, [pc, #120]	; (3bb0 <mpu_configure_regions+0xa8>)
    3b36:	4618      	mov	r0, r3
    3b38:	f005 fbd8 	bl	92ec <z_log_msg2_runtime_create.constprop.0>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3b3c:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3b40:	4610      	mov	r0, r2
    3b42:	b005      	add	sp, #20
    3b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		&&
    3b46:	2c1f      	cmp	r4, #31
    3b48:	d9ed      	bls.n	3b26 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    3b4a:	6805      	ldr	r5, [r0, #0]
		&&
    3b4c:	ea1c 0f05 	tst.w	ip, r5
    3b50:	d1e9      	bne.n	3b26 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3b52:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3b54:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3b56:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3b5a:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    3b5c:	d90f      	bls.n	3b7e <mpu_configure_regions+0x76>
	if (size > (1UL << 31)) {
    3b5e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3b62:	d80e      	bhi.n	3b82 <mpu_configure_regions+0x7a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3b64:	3c01      	subs	r4, #1
    3b66:	fab4 f484 	clz	r4, r4
    3b6a:	f1c4 041f 	rsb	r4, r4, #31
    3b6e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3b70:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3b72:	ea4c 0404 	orr.w	r4, ip, r4
    3b76:	d906      	bls.n	3b86 <mpu_configure_regions+0x7e>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3b78:	4b0e      	ldr	r3, [pc, #56]	; (3bb4 <mpu_configure_regions+0xac>)
    3b7a:	9203      	str	r2, [sp, #12]
    3b7c:	e7d5      	b.n	3b2a <mpu_configure_regions+0x22>
		return REGION_32B;
    3b7e:	2408      	movs	r4, #8
    3b80:	e7f6      	b.n	3b70 <mpu_configure_regions+0x68>
		return REGION_4G;
    3b82:	243e      	movs	r4, #62	; 0x3e
    3b84:	e7f4      	b.n	3b70 <mpu_configure_regions+0x68>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3b86:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    3b8a:	4315      	orrs	r5, r2
    3b8c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3b90:	f044 0401 	orr.w	r4, r4, #1
    3b94:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3b98:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    3b9c:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3b9e:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    3ba2:	3601      	adds	r6, #1
    3ba4:	300c      	adds	r0, #12
    3ba6:	e7b3      	b.n	3b10 <mpu_configure_regions+0x8>
    3ba8:	e000ed00 	.word	0xe000ed00
    3bac:	0000b263 	.word	0x0000b263
    3bb0:	00009d54 	.word	0x00009d54
    3bb4:	0000b286 	.word	0x0000b286

00003bb8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3bb8:	4b04      	ldr	r3, [pc, #16]	; (3bcc <arm_core_mpu_enable+0x14>)
    3bba:	2205      	movs	r2, #5
    3bbc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    3bc0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bc4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3bc8:	4770      	bx	lr
    3bca:	bf00      	nop
    3bcc:	e000ed00 	.word	0xe000ed00

00003bd0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3bd0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3bd4:	4b02      	ldr	r3, [pc, #8]	; (3be0 <arm_core_mpu_disable+0x10>)
    3bd6:	2200      	movs	r2, #0
    3bd8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3bdc:	4770      	bx	lr
    3bde:	bf00      	nop
    3be0:	e000ed00 	.word	0xe000ed00

00003be4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3be4:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3be6:	4d0e      	ldr	r5, [pc, #56]	; (3c20 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3be8:	2301      	movs	r3, #1
    3bea:	782a      	ldrb	r2, [r5, #0]
    3bec:	460c      	mov	r4, r1
    3bee:	f7ff ff8b 	bl	3b08 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3bf2:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    3bf4:	3016      	adds	r0, #22
    3bf6:	d111      	bne.n	3c1c <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3bf8:	f240 1311 	movw	r3, #273	; 0x111
    3bfc:	4a09      	ldr	r2, [pc, #36]	; (3c24 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3bfe:	490a      	ldr	r1, [pc, #40]	; (3c28 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    3c00:	480a      	ldr	r0, [pc, #40]	; (3c2c <arm_core_mpu_configure_static_mpu_regions+0x48>)
    3c02:	f005 fac6 	bl	9192 <assert_print>
    3c06:	4621      	mov	r1, r4
    3c08:	4809      	ldr	r0, [pc, #36]	; (3c30 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    3c0a:	f005 fac2 	bl	9192 <assert_print>
			regions_num);
	}
}
    3c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    3c12:	4804      	ldr	r0, [pc, #16]	; (3c24 <arm_core_mpu_configure_static_mpu_regions+0x40>)
    3c14:	f240 1111 	movw	r1, #273	; 0x111
    3c18:	f005 bab4 	b.w	9184 <assert_post_action>
}
    3c1c:	bd38      	pop	{r3, r4, r5, pc}
    3c1e:	bf00      	nop
    3c20:	20000ef5 	.word	0x20000ef5
    3c24:	0000b2ac 	.word	0x0000b2ac
    3c28:	0000a2aa 	.word	0x0000a2aa
    3c2c:	0000a107 	.word	0x0000a107
    3c30:	0000b2e3 	.word	0x0000b2e3

00003c34 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3c34:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3c36:	4a13      	ldr	r2, [pc, #76]	; (3c84 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
    3c38:	2300      	movs	r3, #0
    3c3a:	7812      	ldrb	r2, [r2, #0]
    3c3c:	460c      	mov	r4, r1
    3c3e:	f7ff ff63 	bl	3b08 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3c42:	f110 0f16 	cmn.w	r0, #22
    3c46:	d00a      	beq.n	3c5e <arm_core_mpu_configure_dynamic_mpu_regions+0x2a>
  MPU->RNR = rnr;
    3c48:	4b0f      	ldr	r3, [pc, #60]	; (3c88 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
  MPU->RASR = 0U;
    3c4a:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3c4c:	2807      	cmp	r0, #7
    3c4e:	dd00      	ble.n	3c52 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3c50:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    3c52:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3c56:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    3c5a:	3001      	adds	r0, #1
    3c5c:	e7f6      	b.n	3c4c <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3c5e:	4a0b      	ldr	r2, [pc, #44]	; (3c8c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    3c60:	490b      	ldr	r1, [pc, #44]	; (3c90 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    3c62:	480c      	ldr	r0, [pc, #48]	; (3c94 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    3c64:	f44f 7398 	mov.w	r3, #304	; 0x130
    3c68:	f005 fa93 	bl	9192 <assert_print>
    3c6c:	4621      	mov	r1, r4
    3c6e:	480a      	ldr	r0, [pc, #40]	; (3c98 <arm_core_mpu_configure_dynamic_mpu_regions+0x64>)
    3c70:	f005 fa8f 	bl	9192 <assert_print>
}
    3c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    3c78:	4804      	ldr	r0, [pc, #16]	; (3c8c <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    3c7a:	f44f 7198 	mov.w	r1, #304	; 0x130
    3c7e:	f005 ba81 	b.w	9184 <assert_post_action>
    3c82:	bf00      	nop
    3c84:	20000ef5 	.word	0x20000ef5
    3c88:	e000ed00 	.word	0xe000ed00
    3c8c:	0000b2ac 	.word	0x0000b2ac
    3c90:	0000a2aa 	.word	0x0000a2aa
    3c94:	0000a107 	.word	0x0000a107
    3c98:	0000b30f 	.word	0x0000b30f

00003c9c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3c9c:	4927      	ldr	r1, [pc, #156]	; (3d3c <z_arm_mpu_init+0xa0>)
{
    3c9e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3ca0:	680c      	ldr	r4, [r1, #0]
    3ca2:	2c08      	cmp	r4, #8
    3ca4:	d913      	bls.n	3cce <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    3ca6:	f44f 73a4 	mov.w	r3, #328	; 0x148
    3caa:	4a25      	ldr	r2, [pc, #148]	; (3d40 <z_arm_mpu_init+0xa4>)
    3cac:	4925      	ldr	r1, [pc, #148]	; (3d44 <z_arm_mpu_init+0xa8>)
    3cae:	4826      	ldr	r0, [pc, #152]	; (3d48 <z_arm_mpu_init+0xac>)
    3cb0:	f005 fa6f 	bl	9192 <assert_print>
    3cb4:	4825      	ldr	r0, [pc, #148]	; (3d4c <z_arm_mpu_init+0xb0>)
    3cb6:	2208      	movs	r2, #8
    3cb8:	4621      	mov	r1, r4
    3cba:	f005 fa6a 	bl	9192 <assert_print>
    3cbe:	4820      	ldr	r0, [pc, #128]	; (3d40 <z_arm_mpu_init+0xa4>)
    3cc0:	f44f 71a4 	mov.w	r1, #328	; 0x148
    3cc4:	f005 fa5e 	bl	9184 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    3cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    3ccc:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    3cce:	f7ff ff7f 	bl	3bd0 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3cd2:	6848      	ldr	r0, [r1, #4]
    3cd4:	491e      	ldr	r1, [pc, #120]	; (3d50 <z_arm_mpu_init+0xb4>)
    3cd6:	2200      	movs	r2, #0
    3cd8:	4294      	cmp	r4, r2
    3cda:	f100 000c 	add.w	r0, r0, #12
    3cde:	d11a      	bne.n	3d16 <z_arm_mpu_init+0x7a>
	static_regions_num = mpu_config.num_regions;
    3ce0:	4b1c      	ldr	r3, [pc, #112]	; (3d54 <z_arm_mpu_init+0xb8>)
    3ce2:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    3ce4:	f7ff ff68 	bl	3bb8 <arm_core_mpu_enable>
	__ASSERT(
    3ce8:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
    3cec:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3cf0:	2b08      	cmp	r3, #8
    3cf2:	d00e      	beq.n	3d12 <z_arm_mpu_init+0x76>
    3cf4:	4918      	ldr	r1, [pc, #96]	; (3d58 <z_arm_mpu_init+0xbc>)
    3cf6:	4a12      	ldr	r2, [pc, #72]	; (3d40 <z_arm_mpu_init+0xa4>)
    3cf8:	4813      	ldr	r0, [pc, #76]	; (3d48 <z_arm_mpu_init+0xac>)
    3cfa:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    3cfe:	f005 fa48 	bl	9192 <assert_print>
    3d02:	4816      	ldr	r0, [pc, #88]	; (3d5c <z_arm_mpu_init+0xc0>)
    3d04:	f005 fa45 	bl	9192 <assert_print>
    3d08:	480d      	ldr	r0, [pc, #52]	; (3d40 <z_arm_mpu_init+0xa4>)
    3d0a:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    3d0e:	f005 fa39 	bl	9184 <assert_post_action>
	return 0;
    3d12:	2000      	movs	r0, #0
    3d14:	e7da      	b.n	3ccc <z_arm_mpu_init+0x30>
    3d16:	f8c1 2098 	str.w	r2, [r1, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3d1a:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    3d1e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3d22:	4313      	orrs	r3, r2
    3d24:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3d28:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3d2c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    3d30:	f043 0301 	orr.w	r3, r3, #1
    3d34:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3d38:	3201      	adds	r2, #1
    3d3a:	e7cd      	b.n	3cd8 <z_arm_mpu_init+0x3c>
    3d3c:	00009ebc 	.word	0x00009ebc
    3d40:	0000b2ac 	.word	0x0000b2ac
    3d44:	0000a2aa 	.word	0x0000a2aa
    3d48:	0000a107 	.word	0x0000a107
    3d4c:	0000b33c 	.word	0x0000b33c
    3d50:	e000ed00 	.word	0xe000ed00
    3d54:	20000ef5 	.word	0x20000ef5
    3d58:	0000b370 	.word	0x0000b370
    3d5c:	0000b3c0 	.word	0x0000b3c0

00003d60 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3d60:	4b01      	ldr	r3, [pc, #4]	; (3d68 <__stdout_hook_install+0x8>)
    3d62:	6018      	str	r0, [r3, #0]
}
    3d64:	4770      	bx	lr
    3d66:	bf00      	nop
    3d68:	200000c4 	.word	0x200000c4

00003d6c <nordicsemi_nrf52_init>:
	nrf_power_gpregret_set(NRF_POWER, (uint8_t)type);
	NVIC_SystemReset();
}

static int nordicsemi_nrf52_init(const struct device *arg)
{
    3d6c:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d6e:	f04f 0320 	mov.w	r3, #32
    3d72:	f3ef 8011 	mrs	r0, BASEPRI
    3d76:	f383 8812 	msr	BASEPRI_MAX, r3
    3d7a:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3d7e:	4a11      	ldr	r2, [pc, #68]	; (3dc4 <nordicsemi_nrf52_init+0x58>)
    3d80:	2301      	movs	r3, #1
    3d82:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    3d86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3d8a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    3d8e:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3d92:	f8d1 4130 	ldr.w	r4, [r1, #304]	; 0x130
    3d96:	2c08      	cmp	r4, #8
    3d98:	d108      	bne.n	3dac <nordicsemi_nrf52_init+0x40>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    3d9a:	f8d1 1134 	ldr.w	r1, [r1, #308]	; 0x134
            {
                switch(var2)
    3d9e:	2905      	cmp	r1, #5
    3da0:	d804      	bhi.n	3dac <nordicsemi_nrf52_init+0x40>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    3da2:	4c09      	ldr	r4, [pc, #36]	; (3dc8 <nordicsemi_nrf52_init+0x5c>)
    3da4:	5c61      	ldrb	r1, [r4, r1]
    3da6:	b109      	cbz	r1, 3dac <nordicsemi_nrf52_init+0x40>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    3da8:	f8c2 3638 	str.w	r3, [r2, #1592]	; 0x638
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    3dac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3db0:	2201      	movs	r2, #1
    3db2:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    3db6:	f380 8811 	msr	BASEPRI, r0
    3dba:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    3dbe:	2000      	movs	r0, #0
    3dc0:	bd10      	pop	{r4, pc}
    3dc2:	bf00      	nop
    3dc4:	4001e000 	.word	0x4001e000
    3dc8:	0000b3f4 	.word	0x0000b3f4

00003dcc <sys_arch_reboot>:
    *p_gpregret = val;
    3dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3dd0:	b2c0      	uxtb	r0, r0
    3dd2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3dd6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3dda:	4905      	ldr	r1, [pc, #20]	; (3df0 <sys_arch_reboot+0x24>)
    3ddc:	4b05      	ldr	r3, [pc, #20]	; (3df4 <sys_arch_reboot+0x28>)
    3dde:	68ca      	ldr	r2, [r1, #12]
    3de0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3de4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3de6:	60cb      	str	r3, [r1, #12]
    3de8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3dec:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3dee:	e7fd      	b.n	3dec <sys_arch_reboot+0x20>
    3df0:	e000ed00 	.word	0xe000ed00
    3df4:	05fa0004 	.word	0x05fa0004

00003df8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3df8:	b120      	cbz	r0, 3e04 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3dfa:	4b03      	ldr	r3, [pc, #12]	; (3e08 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3dfc:	0180      	lsls	r0, r0, #6
    3dfe:	f043 0301 	orr.w	r3, r3, #1
    3e02:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3e04:	4770      	bx	lr
    3e06:	bf00      	nop
    3e08:	00009dc0 	.word	0x00009dc0

00003e0c <adc_nrfx_channel_setup>:


/* Implementation of the ADC driver API function: adc_channel_setup. */
static int adc_nrfx_channel_setup(const struct device *dev,
				  const struct adc_channel_cfg *channel_cfg)
{
    3e0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	nrf_saadc_channel_config_t config = {
		.resistor_p = NRF_SAADC_RESISTOR_DISABLED,
		.resistor_n = NRF_SAADC_RESISTOR_DISABLED,
		.burst      = NRF_SAADC_BURST_DISABLED,
	};
	uint8_t channel_id = channel_cfg->channel_id;
    3e0e:	790d      	ldrb	r5, [r1, #4]
    3e10:	f005 041f 	and.w	r4, r5, #31

	if (channel_id >= SAADC_CH_NUM) {
    3e14:	2c07      	cmp	r4, #7
    3e16:	d81a      	bhi.n	3e4e <adc_nrfx_channel_setup+0x42>
		return -EINVAL;
	}

	switch (channel_cfg->gain) {
    3e18:	780a      	ldrb	r2, [r1, #0]
    3e1a:	2a09      	cmp	r2, #9
    3e1c:	d81e      	bhi.n	3e5c <adc_nrfx_channel_setup+0x50>
    3e1e:	e8df f002 	tbb	[pc, r2]
    3e22:	0606      	.short	0x0606
    3e24:	1d060606 	.word	0x1d060606
    3e28:	1b1d1905 	.word	0x1b1d1905
		break;
	case ADC_GAIN_1_2:
		config.gain = NRF_SAADC_GAIN1_2;
		break;
	case ADC_GAIN_1:
		config.gain = NRF_SAADC_GAIN1;
    3e2c:	2205      	movs	r2, #5
	default:
		LOG_ERR("Selected ADC gain is not valid");
		return -EINVAL;
	}

	switch (channel_cfg->reference) {
    3e2e:	784b      	ldrb	r3, [r1, #1]
    3e30:	2b03      	cmp	r3, #3
    3e32:	d017      	beq.n	3e64 <adc_nrfx_channel_setup+0x58>
    3e34:	2b04      	cmp	r3, #4
    3e36:	f04f 0300 	mov.w	r3, #0
    3e3a:	d025      	beq.n	3e88 <adc_nrfx_channel_setup+0x7c>
		break;
	case ADC_REF_VDD_1_4:
		config.reference = NRF_SAADC_REFERENCE_VDD4;
		break;
	default:
		LOG_ERR("Selected ADC reference is not valid");
    3e3c:	4a30      	ldr	r2, [pc, #192]	; (3f00 <adc_nrfx_channel_setup+0xf4>)
    3e3e:	9202      	str	r2, [sp, #8]
		break;
	case ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 40):
		config.acq_time = NRF_SAADC_ACQTIME_40US;
		break;
	default:
		LOG_ERR("Selected ADC acquisition time is not valid");
    3e40:	e9cd 3300 	strd	r3, r3, [sp]
    3e44:	492f      	ldr	r1, [pc, #188]	; (3f04 <adc_nrfx_channel_setup+0xf8>)
    3e46:	2201      	movs	r2, #1
    3e48:	4618      	mov	r0, r3
    3e4a:	f005 faae 	bl	93aa <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    3e4e:	f06f 0015 	mvn.w	r0, #21
    3e52:	e04a      	b.n	3eea <adc_nrfx_channel_setup+0xde>
		config.gain = NRF_SAADC_GAIN2;
    3e54:	2206      	movs	r2, #6
		break;
    3e56:	e7ea      	b.n	3e2e <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    3e58:	2207      	movs	r2, #7
		break;
    3e5a:	e7e8      	b.n	3e2e <adc_nrfx_channel_setup+0x22>
		LOG_ERR("Selected ADC gain is not valid");
    3e5c:	4b2a      	ldr	r3, [pc, #168]	; (3f08 <adc_nrfx_channel_setup+0xfc>)
		LOG_ERR("Selected ADC acquisition time is not valid");
    3e5e:	9302      	str	r3, [sp, #8]
    3e60:	2300      	movs	r3, #0
    3e62:	e7ed      	b.n	3e40 <adc_nrfx_channel_setup+0x34>
	switch (channel_cfg->reference) {
    3e64:	2601      	movs	r6, #1
	switch (channel_cfg->acquisition_time) {
    3e66:	8848      	ldrh	r0, [r1, #2]
    3e68:	f244 030a 	movw	r3, #16394	; 0x400a
    3e6c:	4298      	cmp	r0, r3
    3e6e:	d040      	beq.n	3ef2 <adc_nrfx_channel_setup+0xe6>
    3e70:	d80c      	bhi.n	3e8c <adc_nrfx_channel_setup+0x80>
    3e72:	f244 0303 	movw	r3, #16387	; 0x4003
    3e76:	4298      	cmp	r0, r3
    3e78:	d016      	beq.n	3ea8 <adc_nrfx_channel_setup+0x9c>
    3e7a:	f244 0305 	movw	r3, #16389	; 0x4005
    3e7e:	4298      	cmp	r0, r3
    3e80:	d035      	beq.n	3eee <adc_nrfx_channel_setup+0xe2>
    3e82:	b3b0      	cbz	r0, 3ef2 <adc_nrfx_channel_setup+0xe6>
		LOG_ERR("Selected ADC acquisition time is not valid");
    3e84:	4b21      	ldr	r3, [pc, #132]	; (3f0c <adc_nrfx_channel_setup+0x100>)
    3e86:	e7ea      	b.n	3e5e <adc_nrfx_channel_setup+0x52>
	nrf_saadc_channel_config_t config = {
    3e88:	461e      	mov	r6, r3
    3e8a:	e7ec      	b.n	3e66 <adc_nrfx_channel_setup+0x5a>
	switch (channel_cfg->acquisition_time) {
    3e8c:	f244 0314 	movw	r3, #16404	; 0x4014
    3e90:	4298      	cmp	r0, r3
    3e92:	d030      	beq.n	3ef6 <adc_nrfx_channel_setup+0xea>
    3e94:	f244 0328 	movw	r3, #16424	; 0x4028
    3e98:	4298      	cmp	r0, r3
    3e9a:	d02e      	beq.n	3efa <adc_nrfx_channel_setup+0xee>
    3e9c:	f244 030f 	movw	r3, #16399	; 0x400f
    3ea0:	4298      	cmp	r0, r3
    3ea2:	d1ef      	bne.n	3e84 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    3ea4:	2003      	movs	r0, #3
    3ea6:	e000      	b.n	3eaa <adc_nrfx_channel_setup+0x9e>
	nrf_saadc_channel_config_t config = {
    3ea8:	2000      	movs	r0, #0
                                              nrf_saadc_channel_config_t const * config)
{
    p_reg->CH[channel].CONFIG =
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    3eaa:	0212      	lsls	r2, r2, #8
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3eac:	f3c5 1340 	ubfx	r3, r5, #5, #1
    3eb0:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
    p_reg->CH[channel].CONFIG =
    3eb4:	0122      	lsls	r2, r4, #4
    3eb6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3eba:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    3ebe:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
    3ec2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    p_reg->CH[channel].CONFIG =
    3ec6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    3eca:	0123      	lsls	r3, r4, #4
    3ecc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3ed0:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    3ed4:	798a      	ldrb	r2, [r1, #6]
    3ed6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    3eda:	2000      	movs	r0, #0
    3edc:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	/* Store the positive input selection in a dedicated array,
	 * to get it later when the channel is selected for a sampling
	 * and to mark the channel as configured (ready to be selected).
	 */
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    3ee0:	4b0b      	ldr	r3, [pc, #44]	; (3f10 <adc_nrfx_channel_setup+0x104>)
    3ee2:	441c      	add	r4, r3
    3ee4:	794b      	ldrb	r3, [r1, #5]
    3ee6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90

	return 0;
}
    3eea:	b004      	add	sp, #16
    3eec:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    3eee:	2001      	movs	r0, #1
    3ef0:	e7db      	b.n	3eaa <adc_nrfx_channel_setup+0x9e>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    3ef2:	2002      	movs	r0, #2
    3ef4:	e7d9      	b.n	3eaa <adc_nrfx_channel_setup+0x9e>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    3ef6:	2004      	movs	r0, #4
    3ef8:	e7d7      	b.n	3eaa <adc_nrfx_channel_setup+0x9e>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    3efa:	2005      	movs	r0, #5
    3efc:	e7d5      	b.n	3eaa <adc_nrfx_channel_setup+0x9e>
    3efe:	bf00      	nop
    3f00:	0000b419 	.word	0x0000b419
    3f04:	00009d2c 	.word	0x00009d2c
    3f08:	0000b3fa 	.word	0x0000b3fa
    3f0c:	0000b43d 	.word	0x0000b43d
    3f10:	20000000 	.word	0x20000000

00003f14 <adc_context_start_sampling.isra.0>:
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3f14:	4b04      	ldr	r3, [pc, #16]	; (3f28 <adc_context_start_sampling.isra.0+0x14>)
    3f16:	2201      	movs	r2, #1
    3f18:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3f1c:	b108      	cbz	r0, 3f22 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f1e:	60da      	str	r2, [r3, #12]
}
    3f20:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3f22:	601a      	str	r2, [r3, #0]
    3f24:	605a      	str	r2, [r3, #4]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    3f26:	4770      	bx	lr
    3f28:	40007000 	.word	0x40007000

00003f2c <adc_nrfx_read>:
}

/* Implementation of the ADC driver API function: adc_read. */
static int adc_nrfx_read(const struct device *dev,
			 const struct adc_sequence *sequence)
{
    3f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f2e:	460d      	mov	r5, r1
    3f30:	b087      	sub	sp, #28
	return z_impl_k_sem_take(sem, timeout);
    3f32:	4870      	ldr	r0, [pc, #448]	; (40f4 <adc_nrfx_read+0x1c8>)
    3f34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3f38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3f3c:	f002 ff7a 	bl	6e34 <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
    3f40:	686c      	ldr	r4, [r5, #4]
	if (!selected_channels ||
    3f42:	b114      	cbz	r4, 3f4a <adc_nrfx_read+0x1e>
    3f44:	f034 02ff 	bics.w	r2, r4, #255	; 0xff
    3f48:	d00a      	beq.n	3f60 <adc_nrfx_read+0x34>
		LOG_ERR("Invalid selection of channels");
    3f4a:	4b6b      	ldr	r3, [pc, #428]	; (40f8 <adc_nrfx_read+0x1cc>)
		LOG_ERR(
    3f4c:	9302      	str	r3, [sp, #8]
    3f4e:	2300      	movs	r3, #0
    3f50:	e9cd 3300 	strd	r3, r3, [sp]
    3f54:	4969      	ldr	r1, [pc, #420]	; (40fc <adc_nrfx_read+0x1d0>)
    3f56:	2201      	movs	r2, #1
    3f58:	4618      	mov	r0, r3
    3f5a:	f005 fa26 	bl	93aa <z_log_msg2_runtime_create.constprop.0>
	if (error) {
    3f5e:	e053      	b.n	4008 <adc_nrfx_read+0xdc>
    p_reg->CH[channel].PSELP = pselp;
    3f60:	4e67      	ldr	r6, [pc, #412]	; (4100 <adc_nrfx_read+0x1d4>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    3f62:	4f68      	ldr	r7, [pc, #416]	; (4104 <adc_nrfx_read+0x1d8>)
	active_channels = 0U;
    3f64:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    3f66:	fa24 f302 	lsr.w	r3, r4, r2
    3f6a:	f013 0301 	ands.w	r3, r3, #1
    3f6e:	d02f      	beq.n	3fd0 <adc_nrfx_read+0xa4>
			if (m_data.positive_inputs[channel_id] == 0U) {
    3f70:	18bb      	adds	r3, r7, r2
    3f72:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
    3f76:	b92b      	cbnz	r3, 3f84 <adc_nrfx_read+0x58>
				LOG_ERR("Channel %u not configured",
    3f78:	9203      	str	r2, [sp, #12]
    3f7a:	4a63      	ldr	r2, [pc, #396]	; (4108 <adc_nrfx_read+0x1dc>)
    3f7c:	9202      	str	r2, [sp, #8]
		LOG_ERR("Oversampling value %d is not valid",
    3f7e:	e9cd 3300 	strd	r3, r3, [sp]
    3f82:	e03c      	b.n	3ffe <adc_nrfx_read+0xd2>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    3f84:	eb06 1e02 	add.w	lr, r6, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    3f88:	f895 c011 	ldrb.w	ip, [r5, #17]
    3f8c:	f8de 0518 	ldr.w	r0, [lr, #1304]	; 0x518
    3f90:	f1bc 0c00 	subs.w	ip, ip, #0
    3f94:	bf18      	it	ne
    3f96:	f04f 0c01 	movne.w	ip, #1
    3f9a:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    3f9e:	ea40 600c 	orr.w	r0, r0, ip, lsl #24
    3fa2:	f8ce 0518 	str.w	r0, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    3fa6:	f102 0051 	add.w	r0, r2, #81	; 0x51
    3faa:	0100      	lsls	r0, r0, #4
			++active_channels;
    3fac:	3101      	adds	r1, #1
    3fae:	5033      	str	r3, [r6, r0]
    3fb0:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    3fb2:	3201      	adds	r2, #1
    3fb4:	2a08      	cmp	r2, #8
    3fb6:	d1d6      	bne.n	3f66 <adc_nrfx_read+0x3a>
	error = set_resolution(sequence);
    3fb8:	7c2a      	ldrb	r2, [r5, #16]
	switch (sequence->resolution) {
    3fba:	f1a2 0008 	sub.w	r0, r2, #8
    3fbe:	2300      	movs	r3, #0
    3fc0:	2806      	cmp	r0, #6
    3fc2:	d816      	bhi.n	3ff2 <adc_nrfx_read+0xc6>
    3fc4:	e8df f000 	tbb	[pc, r0]
    3fc8:	15091528 	.word	0x15091528
    3fcc:	152a      	.short	0x152a
    3fce:	13          	.byte	0x13
    3fcf:	00          	.byte	0x00
    3fd0:	f102 0051 	add.w	r0, r2, #81	; 0x51
    3fd4:	0100      	lsls	r0, r0, #4
    3fd6:	5033      	str	r3, [r6, r0]
}
    3fd8:	e7eb      	b.n	3fb2 <adc_nrfx_read+0x86>
    3fda:	2301      	movs	r3, #1
    p_reg->RESOLUTION = resolution;
    3fdc:	4a48      	ldr	r2, [pc, #288]	; (4100 <adc_nrfx_read+0x1d4>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3fde:	2901      	cmp	r1, #1
    3fe0:	f8c2 35f0 	str.w	r3, [r2, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
    3fe4:	7c6b      	ldrb	r3, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    3fe6:	d91b      	bls.n	4020 <adc_nrfx_read+0xf4>
    3fe8:	b1e3      	cbz	r3, 4024 <adc_nrfx_read+0xf8>
		LOG_ERR(
    3fea:	4b48      	ldr	r3, [pc, #288]	; (410c <adc_nrfx_read+0x1e0>)
    3fec:	e7ae      	b.n	3f4c <adc_nrfx_read+0x20>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    3fee:	2303      	movs	r3, #3
		break;
    3ff0:	e7f4      	b.n	3fdc <adc_nrfx_read+0xb0>
	switch (sequence->resolution) {
    3ff2:	9203      	str	r2, [sp, #12]
		LOG_ERR("ADC resolution value %d is not valid",
    3ff4:	4a46      	ldr	r2, [pc, #280]	; (4110 <adc_nrfx_read+0x1e4>)
    3ff6:	9300      	str	r3, [sp, #0]
    3ff8:	e9cd 3201 	strd	r3, r2, [sp, #4]
    3ffc:	2300      	movs	r3, #0
    3ffe:	493f      	ldr	r1, [pc, #252]	; (40fc <adc_nrfx_read+0x1d0>)
    4000:	2201      	movs	r2, #1
    4002:	4618      	mov	r0, r3
    4004:	f005 f9d1 	bl	93aa <z_log_msg2_runtime_create.constprop.0>
		return -EINVAL;
    4008:	f06f 0415 	mvn.w	r4, #21
	z_impl_k_sem_give(sem);
    400c:	4839      	ldr	r0, [pc, #228]	; (40f4 <adc_nrfx_read+0x1c8>)
    400e:	f002 fed3 	bl	6db8 <z_impl_k_sem_give>
	adc_context_lock(&m_data.ctx, false, NULL);
	error = start_read(dev, sequence);
	adc_context_release(&m_data.ctx, error);

	return error;
}
    4012:	4620      	mov	r0, r4
    4014:	b007      	add	sp, #28
    4016:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    4018:	2300      	movs	r3, #0
    401a:	e7df      	b.n	3fdc <adc_nrfx_read+0xb0>
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    401c:	2302      	movs	r3, #2
    401e:	e7dd      	b.n	3fdc <adc_nrfx_read+0xb0>
	switch (sequence->oversampling) {
    4020:	2b08      	cmp	r3, #8
    4022:	d816      	bhi.n	4052 <adc_nrfx_read+0x126>
    p_reg->OVERSAMPLE = oversample;
    4024:	f8c2 35f4 	str.w	r3, [r2, #1524]	; 0x5f4
	if (sequence->options) {
    4028:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    402a:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    402c:	b9b2      	cbnz	r2, 405c <adc_nrfx_read+0x130>
	if (sequence->buffer_size < needed_buffer_size) {
    402e:	68ea      	ldr	r2, [r5, #12]
    4030:	429a      	cmp	r2, r3
    4032:	d217      	bcs.n	4064 <adc_nrfx_read+0x138>
		LOG_ERR("Provided buffer is too small (%u/%u)",
    4034:	e9cd 2303 	strd	r2, r3, [sp, #12]
    4038:	4b36      	ldr	r3, [pc, #216]	; (4114 <adc_nrfx_read+0x1e8>)
    403a:	9302      	str	r3, [sp, #8]
    403c:	2300      	movs	r3, #0
    403e:	e9cd 3300 	strd	r3, r3, [sp]
    4042:	492e      	ldr	r1, [pc, #184]	; (40fc <adc_nrfx_read+0x1d0>)
    4044:	2201      	movs	r2, #1
    4046:	4618      	mov	r0, r3
    4048:	f005 f9af 	bl	93aa <z_log_msg2_runtime_create.constprop.0>
		return -ENOMEM;
    404c:	f06f 040b 	mvn.w	r4, #11
    4050:	e7dc      	b.n	400c <adc_nrfx_read+0xe0>
	switch (sequence->oversampling) {
    4052:	9303      	str	r3, [sp, #12]
		LOG_ERR("Oversampling value %d is not valid",
    4054:	4b30      	ldr	r3, [pc, #192]	; (4118 <adc_nrfx_read+0x1ec>)
    4056:	9302      	str	r3, [sp, #8]
    4058:	2300      	movs	r3, #0
    405a:	e790      	b.n	3f7e <adc_nrfx_read+0x52>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    405c:	8992      	ldrh	r2, [r2, #12]
    405e:	fb02 3303 	mla	r3, r2, r3, r3
    4062:	e7e4      	b.n	402e <adc_nrfx_read+0x102>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    4064:	4b26      	ldr	r3, [pc, #152]	; (4100 <adc_nrfx_read+0x1d4>)
    4066:	68aa      	ldr	r2, [r5, #8]
    4068:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    406c:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    406e:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    4072:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    4074:	4c23      	ldr	r4, [pc, #140]	; (4104 <adc_nrfx_read+0x1d8>)
    4076:	f104 0664 	add.w	r6, r4, #100	; 0x64
    407a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    407c:	683b      	ldr	r3, [r7, #0]
    407e:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    4080:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    4082:	2600      	movs	r6, #0
    4084:	6626      	str	r6, [r4, #96]	; 0x60
	if (sequence->options) {
    4086:	4627      	mov	r7, r4
    4088:	b373      	cbz	r3, 40e8 <adc_nrfx_read+0x1bc>
		ctx->options = *sequence->options;
    408a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    408c:	f104 0578 	add.w	r5, r4, #120	; 0x78
    4090:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    4094:	6665      	str	r5, [r4, #100]	; 0x64
		ctx->sampling_index = 0U;
    4096:	f8a4 6088 	strh.w	r6, [r4, #136]	; 0x88

		if (ctx->options.interval_us != 0U) {
    409a:	b328      	cbz	r0, 40e8 <adc_nrfx_read+0x1bc>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    409c:	f3bf 8f5b 	dmb	ish
    40a0:	e857 3f00 	ldrex	r3, [r7]
    40a4:	e847 6200 	strex	r2, r6, [r7]
    40a8:	2a00      	cmp	r2, #0
    40aa:	d1f9      	bne.n	40a0 <adc_nrfx_read+0x174>
    40ac:	f3bf 8f5b 	dmb	ish
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    40b0:	481a      	ldr	r0, [pc, #104]	; (411c <adc_nrfx_read+0x1f0>)
    40b2:	6fa7      	ldr	r7, [r4, #120]	; 0x78
    40b4:	4a1a      	ldr	r2, [pc, #104]	; (4120 <adc_nrfx_read+0x1f4>)
    40b6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    40ba:	4631      	mov	r1, r6
    40bc:	2300      	movs	r3, #0
    40be:	fbe7 0105 	umlal	r0, r1, r7, r5
    40c2:	f7fc f9ff 	bl	4c4 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    40c6:	2200      	movs	r2, #0
    40c8:	e9cd 0100 	strd	r0, r1, [sp]
    40cc:	2300      	movs	r3, #0
    40ce:	f104 0008 	add.w	r0, r4, #8
    40d2:	f004 fcaf 	bl	8a34 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
    40d6:	4813      	ldr	r0, [pc, #76]	; (4124 <adc_nrfx_read+0x1f8>)
    40d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    40dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    40e0:	f002 fea8 	bl	6e34 <z_impl_k_sem_take>
	return ctx->status;
    40e4:	6e24      	ldr	r4, [r4, #96]	; 0x60
	return error;
    40e6:	e791      	b.n	400c <adc_nrfx_read+0xe0>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    40e8:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    40ec:	f7ff ff12 	bl	3f14 <adc_context_start_sampling.isra.0>
    40f0:	e7f1      	b.n	40d6 <adc_nrfx_read+0x1aa>
    40f2:	bf00      	nop
    40f4:	20000040 	.word	0x20000040
    40f8:	0000b468 	.word	0x0000b468
    40fc:	00009d2c 	.word	0x00009d2c
    4100:	40007000 	.word	0x40007000
    4104:	20000000 	.word	0x20000000
    4108:	0000b486 	.word	0x0000b486
    410c:	0000b4c5 	.word	0x0000b4c5
    4110:	0000b4a0 	.word	0x0000b4a0
    4114:	0000b51a 	.word	0x0000b51a
    4118:	0000b4f7 	.word	0x0000b4f7
    411c:	000f423f 	.word	0x000f423f
    4120:	000f4240 	.word	0x000f4240
    4124:	20000050 	.word	0x20000050

00004128 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4128:	4b0e      	ldr	r3, [pc, #56]	; (4164 <init_saadc+0x3c>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    412a:	b510      	push	{r4, lr}
    412c:	2400      	movs	r4, #0
    412e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4132:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    4136:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
    413a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    p_reg->INTENSET = mask;
    413e:	2212      	movs	r2, #18
    4140:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    4144:	2007      	movs	r0, #7
    4146:	f7fe ffe1 	bl	310c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    414a:	4622      	mov	r2, r4
    414c:	2101      	movs	r1, #1
    414e:	2007      	movs	r0, #7
    4150:	f7fe fffa 	bl	3148 <z_arm_irq_priority_set>
	return sem->count;
    4154:	4804      	ldr	r0, [pc, #16]	; (4168 <init_saadc+0x40>)
	if (!k_sem_count_get(&ctx->lock)) {
    4156:	6c83      	ldr	r3, [r0, #72]	; 0x48
    4158:	b913      	cbnz	r3, 4160 <init_saadc+0x38>
	z_impl_k_sem_give(sem);
    415a:	3040      	adds	r0, #64	; 0x40
    415c:	f002 fe2c 	bl	6db8 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    4160:	2000      	movs	r0, #0
    4162:	bd10      	pop	{r4, pc}
    4164:	40007000 	.word	0x40007000
    4168:	20000000 	.word	0x20000000

0000416c <saadc_irq_handler>:
{
    416c:	b538      	push	{r3, r4, r5, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    416e:	4b2e      	ldr	r3, [pc, #184]	; (4228 <saadc_irq_handler+0xbc>)
    4170:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    4174:	2a00      	cmp	r2, #0
    4176:	d04a      	beq.n	420e <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4178:	2200      	movs	r2, #0
    417a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    417e:	4c2b      	ldr	r4, [pc, #172]	; (422c <saadc_irq_handler+0xc0>)
    4180:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4184:	2101      	movs	r1, #1
    4186:	6099      	str	r1, [r3, #8]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    4188:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    418c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    418e:	4625      	mov	r5, r4
    4190:	b3c3      	cbz	r3, 4204 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    4192:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    4194:	b143      	cbz	r3, 41a8 <saadc_irq_handler+0x3c>
			action = callback(dev,
    4196:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    419a:	f104 0164 	add.w	r1, r4, #100	; 0x64
    419e:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    41a0:	2801      	cmp	r0, #1
    41a2:	d014      	beq.n	41ce <saadc_irq_handler+0x62>
    41a4:	2802      	cmp	r0, #2
    41a6:	d028      	beq.n	41fa <saadc_irq_handler+0x8e>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    41a8:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    41ac:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
    41b0:	429a      	cmp	r2, r3
    41b2:	d922      	bls.n	41fa <saadc_irq_handler+0x8e>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    41b4:	3301      	adds	r3, #1
    41b6:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    41ba:	4b1b      	ldr	r3, [pc, #108]	; (4228 <saadc_irq_handler+0xbc>)
    41bc:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    41c0:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    41c4:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    41c6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    41ca:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    41ce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    41d0:	b92b      	cbnz	r3, 41de <saadc_irq_handler+0x72>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    41d2:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
}
    41d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    41da:	f7ff be9b 	b.w	3f14 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    41de:	f3bf 8f5b 	dmb	ish
    41e2:	e855 3f00 	ldrex	r3, [r5]
    41e6:	1e5a      	subs	r2, r3, #1
    41e8:	e845 2100 	strex	r1, r2, [r5]
    41ec:	2900      	cmp	r1, #0
    41ee:	d1f8      	bne.n	41e2 <saadc_irq_handler+0x76>
    41f0:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    41f4:	2b01      	cmp	r3, #1
    41f6:	dcec      	bgt.n	41d2 <saadc_irq_handler+0x66>
    41f8:	bd38      	pop	{r3, r4, r5, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    41fa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    41fc:	b113      	cbz	r3, 4204 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    41fe:	480c      	ldr	r0, [pc, #48]	; (4230 <saadc_irq_handler+0xc4>)
    4200:	f005 fc24 	bl	9a4c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    4204:	480b      	ldr	r0, [pc, #44]	; (4234 <saadc_irq_handler+0xc8>)
    4206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    420a:	f002 bdd5 	b.w	6db8 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    420e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
	} else if (nrf_saadc_event_check(NRF_SAADC,
    4212:	2900      	cmp	r1, #0
    4214:	d0f0      	beq.n	41f8 <saadc_irq_handler+0x8c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4216:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    421a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    421e:	2201      	movs	r2, #1
    4220:	609a      	str	r2, [r3, #8]
    4222:	601a      	str	r2, [r3, #0]
    4224:	605a      	str	r2, [r3, #4]
}
    4226:	e7e7      	b.n	41f8 <saadc_irq_handler+0x8c>
    4228:	40007000 	.word	0x40007000
    422c:	20000000 	.word	0x20000000
    4230:	20000008 	.word	0x20000008
    4234:	20000050 	.word	0x20000050

00004238 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4238:	b537      	push	{r0, r1, r2, r4, r5, lr}
    423a:	460c      	mov	r4, r1
	size_t offset = (size_t)(mgr - data->mgr);
    423c:	490a      	ldr	r1, [pc, #40]	; (4268 <onoff_start+0x30>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    423e:	4a0b      	ldr	r2, [pc, #44]	; (426c <onoff_start+0x34>)
	size_t offset = (size_t)(mgr - data->mgr);
    4240:	1a41      	subs	r1, r0, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4242:	2340      	movs	r3, #64	; 0x40
    4244:	9300      	str	r3, [sp, #0]
    4246:	1149      	asrs	r1, r1, #5
{
    4248:	4605      	mov	r5, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    424a:	4623      	mov	r3, r4
    424c:	4808      	ldr	r0, [pc, #32]	; (4270 <onoff_start+0x38>)
    424e:	f005 f8e6 	bl	941e <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4252:	1e01      	subs	r1, r0, #0
    4254:	da05      	bge.n	4262 <onoff_start+0x2a>
		notify(mgr, err);
    4256:	4628      	mov	r0, r5
    4258:	4623      	mov	r3, r4
	}
}
    425a:	b003      	add	sp, #12
    425c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		notify(mgr, err);
    4260:	4718      	bx	r3
}
    4262:	b003      	add	sp, #12
    4264:	bd30      	pop	{r4, r5, pc}
    4266:	bf00      	nop
    4268:	20000b90 	.word	0x20000b90
    426c:	0000948d 	.word	0x0000948d
    4270:	00009b1c 	.word	0x00009b1c

00004274 <get_status>:
{
    4274:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    4276:	b2cc      	uxtb	r4, r1
    4278:	2c01      	cmp	r4, #1
{
    427a:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    427c:	d909      	bls.n	4292 <get_status+0x1e>
    427e:	4909      	ldr	r1, [pc, #36]	; (42a4 <get_status+0x30>)
    4280:	4809      	ldr	r0, [pc, #36]	; (42a8 <get_status+0x34>)
    4282:	4a0a      	ldr	r2, [pc, #40]	; (42ac <get_status+0x38>)
    4284:	2379      	movs	r3, #121	; 0x79
    4286:	f004 ff84 	bl	9192 <assert_print>
    428a:	4808      	ldr	r0, [pc, #32]	; (42ac <get_status+0x38>)
    428c:	2179      	movs	r1, #121	; 0x79
    428e:	f004 ff79 	bl	9184 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    4292:	6929      	ldr	r1, [r5, #16]
    4294:	230c      	movs	r3, #12
    4296:	fb04 1403 	mla	r4, r4, r3, r1
    429a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    429c:	f000 0007 	and.w	r0, r0, #7
    42a0:	bd38      	pop	{r3, r4, r5, pc}
    42a2:	bf00      	nop
    42a4:	0000b58b 	.word	0x0000b58b
    42a8:	0000a107 	.word	0x0000a107
    42ac:	0000b54e 	.word	0x0000b54e

000042b0 <stop>:
{
    42b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42b2:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    42b4:	2c01      	cmp	r4, #1
	struct nrf_clock_control_data *data = dev->data;
    42b6:	6906      	ldr	r6, [r0, #16]
{
    42b8:	4605      	mov	r5, r0
    42ba:	4617      	mov	r7, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    42bc:	d90b      	bls.n	42d6 <stop+0x26>
    42be:	4919      	ldr	r1, [pc, #100]	; (4324 <stop+0x74>)
    42c0:	4819      	ldr	r0, [pc, #100]	; (4328 <stop+0x78>)
    42c2:	4a1a      	ldr	r2, [pc, #104]	; (432c <stop+0x7c>)
    42c4:	f240 134d 	movw	r3, #333	; 0x14d
    42c8:	f004 ff63 	bl	9192 <assert_print>
    42cc:	4817      	ldr	r0, [pc, #92]	; (432c <stop+0x7c>)
    42ce:	f240 114d 	movw	r1, #333	; 0x14d
    42d2:	f004 ff57 	bl	9184 <assert_post_action>
	__asm__ volatile(
    42d6:	f04f 0320 	mov.w	r3, #32
    42da:	f3ef 8111 	mrs	r1, BASEPRI
    42de:	f383 8812 	msr	BASEPRI_MAX, r3
    42e2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    42e6:	220c      	movs	r2, #12
    42e8:	fb02 6304 	mla	r3, r2, r4, r6
    42ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    42ee:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    42f2:	d001      	beq.n	42f8 <stop+0x48>
    42f4:	429f      	cmp	r7, r3
    42f6:	d111      	bne.n	431c <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    42f8:	fb02 6604 	mla	r6, r2, r4, r6
    42fc:	2301      	movs	r3, #1
    42fe:	64b3      	str	r3, [r6, #72]	; 0x48
	int err = 0;
    4300:	2000      	movs	r0, #0
	__asm__ volatile(
    4302:	f381 8811 	msr	BASEPRI, r1
    4306:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    430a:	b930      	cbnz	r0, 431a <stop+0x6a>
	get_sub_config(dev, type)->stop();
    430c:	6869      	ldr	r1, [r5, #4]
    430e:	230c      	movs	r3, #12
    4310:	fb03 1404 	mla	r4, r3, r4, r1
    4314:	6863      	ldr	r3, [r4, #4]
    4316:	4798      	blx	r3
	return 0;
    4318:	2000      	movs	r0, #0
}
    431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    431c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4320:	e7ef      	b.n	4302 <stop+0x52>
    4322:	bf00      	nop
    4324:	0000b58b 	.word	0x0000b58b
    4328:	0000a107 	.word	0x0000a107
    432c:	0000b54e 	.word	0x0000b54e

00004330 <onoff_stop>:
{
    4330:	b570      	push	{r4, r5, r6, lr}
    4332:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    4334:	4906      	ldr	r1, [pc, #24]	; (4350 <onoff_stop+0x20>)
    4336:	1a41      	subs	r1, r0, r1
{
    4338:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    433a:	1149      	asrs	r1, r1, #5
    433c:	4805      	ldr	r0, [pc, #20]	; (4354 <onoff_stop+0x24>)
    433e:	2240      	movs	r2, #64	; 0x40
    4340:	f7ff ffb6 	bl	42b0 <stop>
	notify(mgr, res);
    4344:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4346:	4601      	mov	r1, r0
	notify(mgr, res);
    4348:	4620      	mov	r0, r4
}
    434a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    434e:	4718      	bx	r3
    4350:	20000b90 	.word	0x20000b90
    4354:	00009b1c 	.word	0x00009b1c

00004358 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4358:	2200      	movs	r2, #0
{
    435a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    435c:	2101      	movs	r1, #1
{
    435e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4360:	4610      	mov	r0, r2
    4362:	f7fe fef1 	bl	3148 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4366:	480f      	ldr	r0, [pc, #60]	; (43a4 <clk_init+0x4c>)
    4368:	f001 f9b4 	bl	56d4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    436c:	4b0e      	ldr	r3, [pc, #56]	; (43a8 <clk_init+0x50>)
    436e:	4298      	cmp	r0, r3
    4370:	d115      	bne.n	439e <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4372:	f001 f9d5 	bl	5720 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4376:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4378:	490c      	ldr	r1, [pc, #48]	; (43ac <clk_init+0x54>)
    437a:	4630      	mov	r0, r6
    437c:	f004 fe5d 	bl	903a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4380:	2800      	cmp	r0, #0
    4382:	db0b      	blt.n	439c <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    4384:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4386:	4909      	ldr	r1, [pc, #36]	; (43ac <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4388:	2501      	movs	r5, #1
    438a:	64b5      	str	r5, [r6, #72]	; 0x48
		err = onoff_manager_init(get_onoff_manager(dev, i),
    438c:	f104 0020 	add.w	r0, r4, #32
    4390:	f004 fe53 	bl	903a <onoff_manager_init>
		if (err < 0) {
    4394:	2800      	cmp	r0, #0
    4396:	db01      	blt.n	439c <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4398:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    439a:	2000      	movs	r0, #0
}
    439c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    439e:	f06f 0004 	mvn.w	r0, #4
    43a2:	e7fb      	b.n	439c <clk_init+0x44>
    43a4:	000043e5 	.word	0x000043e5
    43a8:	0bad0000 	.word	0x0bad0000
    43ac:	00009f18 	.word	0x00009f18

000043b0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    43b0:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    43b2:	230c      	movs	r3, #12
    43b4:	4809      	ldr	r0, [pc, #36]	; (43dc <clkstarted_handle.constprop.0+0x2c>)
    43b6:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    43b8:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    43ba:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    43bc:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    43c0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    43c2:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    43c4:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    43c6:	4418      	add	r0, r3
    43c8:	f005 f816 	bl	93f8 <set_on_state>
	if (callback) {
    43cc:	b12d      	cbz	r5, 43da <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    43ce:	4632      	mov	r2, r6
    43d0:	462b      	mov	r3, r5
    43d2:	4803      	ldr	r0, [pc, #12]	; (43e0 <clkstarted_handle.constprop.0+0x30>)
}
    43d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    43d8:	4718      	bx	r3
}
    43da:	bd70      	pop	{r4, r5, r6, pc}
    43dc:	20000b90 	.word	0x20000b90
    43e0:	00009b1c 	.word	0x00009b1c

000043e4 <clock_event_handler>:
	switch (event) {
    43e4:	2801      	cmp	r0, #1
{
    43e6:	b508      	push	{r3, lr}
	switch (event) {
    43e8:	d006      	beq.n	43f8 <clock_event_handler+0x14>
    43ea:	2803      	cmp	r0, #3
    43ec:	d008      	beq.n	4400 <clock_event_handler+0x1c>
    43ee:	b9a8      	cbnz	r0, 441c <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    43f0:	4b10      	ldr	r3, [pc, #64]	; (4434 <clock_event_handler+0x50>)
    43f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    43f4:	075b      	lsls	r3, r3, #29
    43f6:	d11b      	bne.n	4430 <clock_event_handler+0x4c>
}
    43f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    43fc:	f7ff bfd8 	b.w	43b0 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    4400:	490d      	ldr	r1, [pc, #52]	; (4438 <clock_event_handler+0x54>)
    4402:	4a0e      	ldr	r2, [pc, #56]	; (443c <clock_event_handler+0x58>)
    4404:	480e      	ldr	r0, [pc, #56]	; (4440 <clock_event_handler+0x5c>)
    4406:	f240 235e 	movw	r3, #606	; 0x25e
    440a:	f004 fec2 	bl	9192 <assert_print>
    440e:	f240 215e 	movw	r1, #606	; 0x25e
}
    4412:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    4416:	4809      	ldr	r0, [pc, #36]	; (443c <clock_event_handler+0x58>)
    4418:	f004 beb4 	b.w	9184 <assert_post_action>
    441c:	4906      	ldr	r1, [pc, #24]	; (4438 <clock_event_handler+0x54>)
    441e:	4a07      	ldr	r2, [pc, #28]	; (443c <clock_event_handler+0x58>)
    4420:	4807      	ldr	r0, [pc, #28]	; (4440 <clock_event_handler+0x5c>)
    4422:	f240 2362 	movw	r3, #610	; 0x262
    4426:	f004 feb4 	bl	9192 <assert_print>
    442a:	f240 2162 	movw	r1, #610	; 0x262
    442e:	e7f0      	b.n	4412 <clock_event_handler+0x2e>
}
    4430:	bd08      	pop	{r3, pc}
    4432:	bf00      	nop
    4434:	20000b90 	.word	0x20000b90
    4438:	0000a2aa 	.word	0x0000a2aa
    443c:	0000b54e 	.word	0x0000b54e
    4440:	0000a107 	.word	0x0000a107

00004444 <generic_hfclk_start>:
{
    4444:	b508      	push	{r3, lr}
	__asm__ volatile(
    4446:	f04f 0320 	mov.w	r3, #32
    444a:	f3ef 8111 	mrs	r1, BASEPRI
    444e:	f383 8812 	msr	BASEPRI_MAX, r3
    4452:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4456:	4a12      	ldr	r2, [pc, #72]	; (44a0 <generic_hfclk_start+0x5c>)
    4458:	6813      	ldr	r3, [r2, #0]
    445a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    445e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    4462:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4464:	d00c      	beq.n	4480 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    446a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    446e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4472:	f013 0301 	ands.w	r3, r3, #1
    4476:	d003      	beq.n	4480 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    4478:	480a      	ldr	r0, [pc, #40]	; (44a4 <generic_hfclk_start+0x60>)
    447a:	f004 ffbd 	bl	93f8 <set_on_state>
			already_started = true;
    447e:	2301      	movs	r3, #1
	__asm__ volatile(
    4480:	f381 8811 	msr	BASEPRI, r1
    4484:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4488:	b123      	cbz	r3, 4494 <generic_hfclk_start+0x50>
}
    448a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    448e:	2000      	movs	r0, #0
    4490:	f7ff bf8e 	b.w	43b0 <clkstarted_handle.constprop.0>
}
    4494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4498:	2001      	movs	r0, #1
    449a:	f001 b965 	b.w	5768 <nrfx_clock_start>
    449e:	bf00      	nop
    44a0:	20000be8 	.word	0x20000be8
    44a4:	20000bd8 	.word	0x20000bd8

000044a8 <api_blocking_start>:
{
    44a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    44aa:	2200      	movs	r2, #0
    44ac:	2301      	movs	r3, #1
    44ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    44b2:	4a09      	ldr	r2, [pc, #36]	; (44d8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    44b4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    44b8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    44ba:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    44be:	f004 ffde 	bl	947e <api_start>
	if (err < 0) {
    44c2:	2800      	cmp	r0, #0
    44c4:	db05      	blt.n	44d2 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    44c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    44ca:	2300      	movs	r3, #0
    44cc:	4668      	mov	r0, sp
    44ce:	f002 fcb1 	bl	6e34 <z_impl_k_sem_take>
}
    44d2:	b005      	add	sp, #20
    44d4:	f85d fb04 	ldr.w	pc, [sp], #4
    44d8:	000094ab 	.word	0x000094ab

000044dc <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    44dc:	4b09      	ldr	r3, [pc, #36]	; (4504 <generic_hfclk_stop+0x28>)
    44de:	f3bf 8f5b 	dmb	ish
    44e2:	e853 2f00 	ldrex	r2, [r3]
    44e6:	f022 0102 	bic.w	r1, r2, #2
    44ea:	e843 1000 	strex	r0, r1, [r3]
    44ee:	2800      	cmp	r0, #0
    44f0:	d1f7      	bne.n	44e2 <generic_hfclk_stop+0x6>
    44f2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    44f6:	07d3      	lsls	r3, r2, #31
    44f8:	d402      	bmi.n	4500 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    44fa:	2001      	movs	r0, #1
    44fc:	f001 b998 	b.w	5830 <nrfx_clock_stop>
}
    4500:	4770      	bx	lr
    4502:	bf00      	nop
    4504:	20000be8 	.word	0x20000be8

00004508 <z_nrf_clock_control_lf_on>:
{
    4508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    450c:	4947      	ldr	r1, [pc, #284]	; (462c <z_nrf_clock_control_lf_on+0x124>)
    450e:	f3bf 8f5b 	dmb	ish
    4512:	4606      	mov	r6, r0
    4514:	2201      	movs	r2, #1
    4516:	e851 3f00 	ldrex	r3, [r1]
    451a:	e841 2000 	strex	r0, r2, [r1]
    451e:	2800      	cmp	r0, #0
    4520:	d1f9      	bne.n	4516 <z_nrf_clock_control_lf_on+0xe>
    4522:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4526:	b9a3      	cbnz	r3, 4552 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4528:	4941      	ldr	r1, [pc, #260]	; (4630 <z_nrf_clock_control_lf_on+0x128>)
		err = onoff_request(mgr, &cli);
    452a:	4842      	ldr	r0, [pc, #264]	; (4634 <z_nrf_clock_control_lf_on+0x12c>)
    452c:	604b      	str	r3, [r1, #4]
    452e:	60cb      	str	r3, [r1, #12]
    4530:	608a      	str	r2, [r1, #8]
    4532:	f7fd fa17 	bl	1964 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    4536:	2800      	cmp	r0, #0
    4538:	da0b      	bge.n	4552 <z_nrf_clock_control_lf_on+0x4a>
    453a:	493f      	ldr	r1, [pc, #252]	; (4638 <z_nrf_clock_control_lf_on+0x130>)
    453c:	483f      	ldr	r0, [pc, #252]	; (463c <z_nrf_clock_control_lf_on+0x134>)
    453e:	4a40      	ldr	r2, [pc, #256]	; (4640 <z_nrf_clock_control_lf_on+0x138>)
    4540:	f44f 7308 	mov.w	r3, #544	; 0x220
    4544:	f004 fe25 	bl	9192 <assert_print>
    4548:	483d      	ldr	r0, [pc, #244]	; (4640 <z_nrf_clock_control_lf_on+0x138>)
    454a:	f44f 7108 	mov.w	r1, #544	; 0x220
    454e:	f004 fe19 	bl	9184 <assert_post_action>
	switch (start_mode) {
    4552:	b396      	cbz	r6, 45ba <z_nrf_clock_control_lf_on+0xb2>
    4554:	1e73      	subs	r3, r6, #1
    4556:	2b01      	cmp	r3, #1
    4558:	d853      	bhi.n	4602 <z_nrf_clock_control_lf_on+0xfa>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    455a:	2e01      	cmp	r6, #1
    455c:	d107      	bne.n	456e <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    455e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4562:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4566:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    456a:	2b01      	cmp	r3, #1
    456c:	d025      	beq.n	45ba <z_nrf_clock_control_lf_on+0xb2>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    456e:	f005 fa1d 	bl	99ac <k_is_in_isr>
    4572:	4604      	mov	r4, r0
    4574:	b918      	cbnz	r0, 457e <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    4576:	4b33      	ldr	r3, [pc, #204]	; (4644 <z_nrf_clock_control_lf_on+0x13c>)
	int key = isr_mode ? irq_lock() : 0;
    4578:	781b      	ldrb	r3, [r3, #0]
    457a:	2b00      	cmp	r3, #0
    457c:	d14f      	bne.n	461e <z_nrf_clock_control_lf_on+0x116>
	__asm__ volatile(
    457e:	f04f 0320 	mov.w	r3, #32
    4582:	f3ef 8711 	mrs	r7, BASEPRI
    4586:	f383 8812 	msr	BASEPRI_MAX, r3
    458a:	f3bf 8f6f 	isb	sy
    458e:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4590:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 4648 <z_nrf_clock_control_lf_on+0x140>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4594:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4598:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    459c:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    45a0:	03d2      	lsls	r2, r2, #15
    45a2:	d50c      	bpl.n	45be <z_nrf_clock_control_lf_on+0xb6>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    45a4:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    45a8:	2b01      	cmp	r3, #1
    45aa:	d001      	beq.n	45b0 <z_nrf_clock_control_lf_on+0xa8>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    45ac:	2e01      	cmp	r6, #1
    45ae:	d106      	bne.n	45be <z_nrf_clock_control_lf_on+0xb6>
	if (isr_mode) {
    45b0:	b30c      	cbz	r4, 45f6 <z_nrf_clock_control_lf_on+0xee>
	__asm__ volatile(
    45b2:	f387 8811 	msr	BASEPRI, r7
    45b6:	f3bf 8f6f 	isb	sy
}
    45ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    45be:	b1ac      	cbz	r4, 45ec <z_nrf_clock_control_lf_on+0xe4>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    45c0:	4638      	mov	r0, r7
    45c2:	f7fe fd49 	bl	3058 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    45c6:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    45ca:	2b00      	cmp	r3, #0
    45cc:	d1e4      	bne.n	4598 <z_nrf_clock_control_lf_on+0x90>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    45ce:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    45d2:	2a00      	cmp	r2, #0
    45d4:	d0e0      	beq.n	4598 <z_nrf_clock_control_lf_on+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    45d6:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
    45da:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    45de:	2301      	movs	r3, #1
    45e0:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    45e4:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    45e8:	60ab      	str	r3, [r5, #8]
}
    45ea:	e7d5      	b.n	4598 <z_nrf_clock_control_lf_on+0x90>
	return z_impl_k_sleep(timeout);
    45ec:	2100      	movs	r1, #0
    45ee:	2021      	movs	r0, #33	; 0x21
    45f0:	f003 fd5c 	bl	80ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    45f4:	e7e7      	b.n	45c6 <z_nrf_clock_control_lf_on+0xbe>
    p_reg->INTENSET = mask;
    45f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45fa:	2202      	movs	r2, #2
    45fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4600:	e7db      	b.n	45ba <z_nrf_clock_control_lf_on+0xb2>
		__ASSERT_NO_MSG(false);
    4602:	4912      	ldr	r1, [pc, #72]	; (464c <z_nrf_clock_control_lf_on+0x144>)
    4604:	480d      	ldr	r0, [pc, #52]	; (463c <z_nrf_clock_control_lf_on+0x134>)
    4606:	4a0e      	ldr	r2, [pc, #56]	; (4640 <z_nrf_clock_control_lf_on+0x138>)
    4608:	f240 2332 	movw	r3, #562	; 0x232
    460c:	f004 fdc1 	bl	9192 <assert_print>
}
    4610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		__ASSERT_NO_MSG(false);
    4614:	480a      	ldr	r0, [pc, #40]	; (4640 <z_nrf_clock_control_lf_on+0x138>)
    4616:	f240 2132 	movw	r1, #562	; 0x232
    461a:	f004 bdb3 	b.w	9184 <assert_post_action>
    p_reg->INTENCLR = mask;
    461e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4622:	2202      	movs	r2, #2
    4624:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4628:	4607      	mov	r7, r0
}
    462a:	e7b1      	b.n	4590 <z_nrf_clock_control_lf_on+0x88>
    462c:	20000bec 	.word	0x20000bec
    4630:	20000b80 	.word	0x20000b80
    4634:	20000bb0 	.word	0x20000bb0
    4638:	0000ab7a 	.word	0x0000ab7a
    463c:	0000a107 	.word	0x0000a107
    4640:	0000b54e 	.word	0x0000b54e
    4644:	20001306 	.word	0x20001306
    4648:	e000e100 	.word	0xe000e100
    464c:	0000a2aa 	.word	0x0000a2aa

00004650 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4650:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4652:	4b08      	ldr	r3, [pc, #32]	; (4674 <uart_console_init+0x24>)
    4654:	4808      	ldr	r0, [pc, #32]	; (4678 <uart_console_init+0x28>)
    4656:	6018      	str	r0, [r3, #0]
    4658:	f005 f96e 	bl	9938 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    465c:	b138      	cbz	r0, 466e <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    465e:	4807      	ldr	r0, [pc, #28]	; (467c <uart_console_init+0x2c>)
    4660:	f7ff fb7e 	bl	3d60 <__stdout_hook_install>
	__printk_hook_install(console_out);
    4664:	4805      	ldr	r0, [pc, #20]	; (467c <uart_console_init+0x2c>)
    4666:	f7fc ff57 	bl	1518 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    466a:	2000      	movs	r0, #0
}
    466c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    466e:	f06f 0012 	mvn.w	r0, #18
    4672:	e7fb      	b.n	466c <uart_console_init+0x1c>
    4674:	20000bf0 	.word	0x20000bf0
    4678:	00009b7c 	.word	0x00009b7c
    467c:	00004681 	.word	0x00004681

00004680 <console_out>:
	if ('\n' == c) {
    4680:	280a      	cmp	r0, #10
{
    4682:	b538      	push	{r3, r4, r5, lr}
    4684:	4d07      	ldr	r5, [pc, #28]	; (46a4 <console_out+0x24>)
    4686:	4604      	mov	r4, r0
	if ('\n' == c) {
    4688:	d104      	bne.n	4694 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    468a:	6828      	ldr	r0, [r5, #0]
    468c:	6883      	ldr	r3, [r0, #8]
    468e:	210d      	movs	r1, #13
    4690:	685b      	ldr	r3, [r3, #4]
    4692:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    4694:	6828      	ldr	r0, [r5, #0]
    4696:	6883      	ldr	r3, [r0, #8]
    4698:	b2e1      	uxtb	r1, r4
    469a:	685b      	ldr	r3, [r3, #4]
    469c:	4798      	blx	r3
}
    469e:	4620      	mov	r0, r4
    46a0:	bd38      	pop	{r3, r4, r5, pc}
    46a2:	bf00      	nop
    46a4:	20000bf0 	.word	0x20000bf0

000046a8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    46a8:	b570      	push	{r4, r5, r6, lr}
	return port->data;
    46aa:	6905      	ldr	r5, [r0, #16]
{
    46ac:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    46ae:	460c      	mov	r4, r1
    46b0:	b961      	cbnz	r1, 46cc <gpio_nrfx_manage_callback+0x24>
    46b2:	4922      	ldr	r1, [pc, #136]	; (473c <gpio_nrfx_manage_callback+0x94>)
    46b4:	4a22      	ldr	r2, [pc, #136]	; (4740 <gpio_nrfx_manage_callback+0x98>)
    46b6:	4823      	ldr	r0, [pc, #140]	; (4744 <gpio_nrfx_manage_callback+0x9c>)
    46b8:	2324      	movs	r3, #36	; 0x24
    46ba:	f004 fd6a 	bl	9192 <assert_print>
    46be:	4822      	ldr	r0, [pc, #136]	; (4748 <gpio_nrfx_manage_callback+0xa0>)
    46c0:	f004 fd67 	bl	9192 <assert_print>
    46c4:	481e      	ldr	r0, [pc, #120]	; (4740 <gpio_nrfx_manage_callback+0x98>)
    46c6:	2124      	movs	r1, #36	; 0x24
    46c8:	f004 fd5c 	bl	9184 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    46cc:	6863      	ldr	r3, [r4, #4]
    46ce:	b963      	cbnz	r3, 46ea <gpio_nrfx_manage_callback+0x42>
    46d0:	491e      	ldr	r1, [pc, #120]	; (474c <gpio_nrfx_manage_callback+0xa4>)
    46d2:	4a1b      	ldr	r2, [pc, #108]	; (4740 <gpio_nrfx_manage_callback+0x98>)
    46d4:	481b      	ldr	r0, [pc, #108]	; (4744 <gpio_nrfx_manage_callback+0x9c>)
    46d6:	2325      	movs	r3, #37	; 0x25
    46d8:	f004 fd5b 	bl	9192 <assert_print>
    46dc:	481c      	ldr	r0, [pc, #112]	; (4750 <gpio_nrfx_manage_callback+0xa8>)
    46de:	f004 fd58 	bl	9192 <assert_print>
    46e2:	4817      	ldr	r0, [pc, #92]	; (4740 <gpio_nrfx_manage_callback+0x98>)
    46e4:	2125      	movs	r1, #37	; 0x25
    46e6:	f004 fd4d 	bl	9184 <assert_post_action>
	return list->head;
    46ea:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    46ec:	b15b      	cbz	r3, 4706 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    46ee:	2200      	movs	r2, #0
    46f0:	429c      	cmp	r4, r3
    46f2:	d112      	bne.n	471a <gpio_nrfx_manage_callback+0x72>
	return node->next;
    46f4:	6823      	ldr	r3, [r4, #0]
	return list->tail;
    46f6:	68a9      	ldr	r1, [r5, #8]
Z_GENLIST_REMOVE(slist, snode)
    46f8:	b952      	cbnz	r2, 4710 <gpio_nrfx_manage_callback+0x68>
    46fa:	42a1      	cmp	r1, r4
	list->head = node;
    46fc:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    46fe:	d100      	bne.n	4702 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    4700:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    4702:	2300      	movs	r3, #0
    4704:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    4706:	b96e      	cbnz	r6, 4724 <gpio_nrfx_manage_callback+0x7c>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    4708:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
				     callback, set);
}
    470a:	bd70      	pop	{r4, r5, r6, pc}
    470c:	460b      	mov	r3, r1
    470e:	e7ef      	b.n	46f0 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_REMOVE(slist, snode)
    4710:	42a1      	cmp	r1, r4
	parent->next = child;
    4712:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4714:	bf08      	it	eq
    4716:	60aa      	streq	r2, [r5, #8]
}
    4718:	e7f3      	b.n	4702 <gpio_nrfx_manage_callback+0x5a>
	return node->next;
    471a:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    471c:	461a      	mov	r2, r3
    471e:	2900      	cmp	r1, #0
    4720:	d1f4      	bne.n	470c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    4722:	b13e      	cbz	r6, 4734 <gpio_nrfx_manage_callback+0x8c>
Z_GENLIST_PREPEND(slist, snode)
    4724:	68a8      	ldr	r0, [r5, #8]
	parent->next = child;
    4726:	686b      	ldr	r3, [r5, #4]
    4728:	6023      	str	r3, [r4, #0]
	list->head = node;
    472a:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    472c:	2800      	cmp	r0, #0
    472e:	d1eb      	bne.n	4708 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    4730:	60ac      	str	r4, [r5, #8]
}
    4732:	e7ea      	b.n	470a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    4734:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4738:	e7e7      	b.n	470a <gpio_nrfx_manage_callback+0x62>
    473a:	bf00      	nop
    473c:	0000b5fc 	.word	0x0000b5fc
    4740:	0000b5cf 	.word	0x0000b5cf
    4744:	0000a107 	.word	0x0000a107
    4748:	0000b605 	.word	0x0000b605
    474c:	0000b614 	.word	0x0000b614
    4750:	0000b626 	.word	0x0000b626

00004754 <gpio_nrfx_pin_interrupt_configure>:
{
    4754:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return port->config;
    4756:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4758:	7b05      	ldrb	r5, [r0, #12]
    475a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    475e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4762:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    4766:	f04f 0500 	mov.w	r5, #0
    476a:	d104      	bne.n	4776 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    476c:	4620      	mov	r0, r4
    476e:	f001 fb85 	bl	5e7c <nrfx_gpiote_trigger_disable>
	return 0;
    4772:	2000      	movs	r0, #0
    4774:	e054      	b.n	4820 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    4776:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    477a:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    477e:	d151      	bne.n	4824 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4780:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4784:	bf0c      	ite	eq
    4786:	2304      	moveq	r3, #4
    4788:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    478a:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    478e:	6883      	ldr	r3, [r0, #8]
    4790:	fa23 f101 	lsr.w	r1, r3, r1
    4794:	f011 0101 	ands.w	r1, r1, #1
    4798:	d155      	bne.n	4846 <gpio_nrfx_pin_interrupt_configure+0xf2>
    479a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    479e:	d152      	bne.n	4846 <gpio_nrfx_pin_interrupt_configure+0xf2>
NRF_STATIC_INLINE bool nrf_gpio_pin_present_check(uint32_t pin_number)
{
    uint32_t port = pin_number >> 5;
    uint32_t mask = 0;

    switch (port)
    47a0:	0966      	lsrs	r6, r4, #5
    47a2:	d04a      	beq.n	483a <gpio_nrfx_pin_interrupt_configure+0xe6>
#endif // defined(NRF52820_XXAA) && defined(DEVELOP_IN_NRF52833)
            break;
#endif
#ifdef P1_FEATURE_PINS_PRESENT
        case 1:
            mask = P1_FEATURE_PINS_PRESENT;
    47a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    47a8:	2e01      	cmp	r6, #1
    47aa:	bf08      	it	eq
    47ac:	4619      	moveq	r1, r3
            break;
#endif
    }

    pin_number &= 0x1F;
    47ae:	f004 051f 	and.w	r5, r4, #31

    return (mask & (1UL << pin_number)) ? true : false;
    47b2:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    47b4:	07ca      	lsls	r2, r1, #31
    47b6:	d40b      	bmi.n	47d0 <gpio_nrfx_pin_interrupt_configure+0x7c>
    47b8:	492b      	ldr	r1, [pc, #172]	; (4868 <gpio_nrfx_pin_interrupt_configure+0x114>)
    47ba:	482c      	ldr	r0, [pc, #176]	; (486c <gpio_nrfx_pin_interrupt_configure+0x118>)
    47bc:	4a2c      	ldr	r2, [pc, #176]	; (4870 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    47be:	f240 2329 	movw	r3, #553	; 0x229
    47c2:	f004 fce6 	bl	9192 <assert_print>
    47c6:	482a      	ldr	r0, [pc, #168]	; (4870 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    47c8:	f240 2129 	movw	r1, #553	; 0x229
    47cc:	f004 fcda 	bl	9184 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    47d0:	b16e      	cbz	r6, 47ee <gpio_nrfx_pin_interrupt_configure+0x9a>
    47d2:	2e01      	cmp	r6, #1
    47d4:	d034      	beq.n	4840 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    47d6:	4927      	ldr	r1, [pc, #156]	; (4874 <gpio_nrfx_pin_interrupt_configure+0x120>)
    47d8:	4824      	ldr	r0, [pc, #144]	; (486c <gpio_nrfx_pin_interrupt_configure+0x118>)
    47da:	4a25      	ldr	r2, [pc, #148]	; (4870 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    47dc:	f240 232e 	movw	r3, #558	; 0x22e
    47e0:	f004 fcd7 	bl	9192 <assert_print>
    47e4:	4822      	ldr	r0, [pc, #136]	; (4870 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    47e6:	f240 212e 	movw	r1, #558	; 0x22e
    47ea:	f004 fccb 	bl	9184 <assert_post_action>
        case 0: return NRF_P0;
    47ee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    47f2:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    47f6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    47fa:	07db      	lsls	r3, r3, #31
    47fc:	d423      	bmi.n	4846 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    47fe:	f10d 0507 	add.w	r5, sp, #7
    4802:	4629      	mov	r1, r5
    4804:	4620      	mov	r0, r4
    4806:	f001 fa5d 	bl	5cc4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    480a:	4b1b      	ldr	r3, [pc, #108]	; (4878 <gpio_nrfx_pin_interrupt_configure+0x124>)
    480c:	4298      	cmp	r0, r3
    480e:	d119      	bne.n	4844 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    4810:	4628      	mov	r0, r5
    4812:	f001 fab9 	bl	5d88 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4816:	4b19      	ldr	r3, [pc, #100]	; (487c <gpio_nrfx_pin_interrupt_configure+0x128>)
    4818:	4298      	cmp	r0, r3
    481a:	d013      	beq.n	4844 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    481c:	f06f 000b 	mvn.w	r0, #11
}
    4820:	b004      	add	sp, #16
    4822:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4824:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4828:	d005      	beq.n	4836 <gpio_nrfx_pin_interrupt_configure+0xe2>
    482a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    482e:	bf0c      	ite	eq
    4830:	2302      	moveq	r3, #2
    4832:	2301      	movne	r3, #1
    4834:	e7a9      	b.n	478a <gpio_nrfx_pin_interrupt_configure+0x36>
    4836:	2303      	movs	r3, #3
    4838:	e7a7      	b.n	478a <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    483a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    483e:	e7b6      	b.n	47ae <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4840:	4b0f      	ldr	r3, [pc, #60]	; (4880 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    4842:	e7d6      	b.n	47f2 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    4844:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4846:	2300      	movs	r3, #0
    4848:	4619      	mov	r1, r3
    484a:	aa02      	add	r2, sp, #8
    484c:	4620      	mov	r0, r4
    484e:	f001 f911 	bl	5a74 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4852:	4b0a      	ldr	r3, [pc, #40]	; (487c <gpio_nrfx_pin_interrupt_configure+0x128>)
    4854:	4298      	cmp	r0, r3
    4856:	d104      	bne.n	4862 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4858:	2101      	movs	r1, #1
    485a:	4620      	mov	r0, r4
    485c:	f001 fa9a 	bl	5d94 <nrfx_gpiote_trigger_enable>
    4860:	e787      	b.n	4772 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    4862:	f06f 0004 	mvn.w	r0, #4
    4866:	e7db      	b.n	4820 <gpio_nrfx_pin_interrupt_configure+0xcc>
    4868:	0000b670 	.word	0x0000b670
    486c:	0000a107 	.word	0x0000a107
    4870:	0000b63d 	.word	0x0000b63d
    4874:	0000a2aa 	.word	0x0000a2aa
    4878:	0bad0004 	.word	0x0bad0004
    487c:	0bad0000 	.word	0x0bad0000
    4880:	50000300 	.word	0x50000300

00004884 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4884:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4886:	f001 fa6f 	bl	5d68 <nrfx_gpiote_is_init>
    488a:	4604      	mov	r4, r0
    488c:	b968      	cbnz	r0, 48aa <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    488e:	f001 fa43 	bl	5d18 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4892:	4b08      	ldr	r3, [pc, #32]	; (48b4 <gpio_nrfx_init+0x30>)
    4894:	4298      	cmp	r0, r3
    4896:	d10a      	bne.n	48ae <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4898:	4807      	ldr	r0, [pc, #28]	; (48b8 <gpio_nrfx_init+0x34>)
    489a:	4621      	mov	r1, r4
    489c:	f001 fa0c 	bl	5cb8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    48a0:	4622      	mov	r2, r4
    48a2:	2105      	movs	r1, #5
    48a4:	2006      	movs	r0, #6
    48a6:	f7fe fc4f 	bl	3148 <z_arm_irq_priority_set>
		return 0;
    48aa:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    48ac:	bd10      	pop	{r4, pc}
		return -EIO;
    48ae:	f06f 0004 	mvn.w	r0, #4
    48b2:	e7fb      	b.n	48ac <gpio_nrfx_init+0x28>
    48b4:	0bad0000 	.word	0x0bad0000
    48b8:	000048bd 	.word	0x000048bd

000048bc <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    48bc:	0943      	lsrs	r3, r0, #5
{
    48be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    48c2:	d003      	beq.n	48cc <nrfx_gpio_handler+0x10>
    48c4:	2b01      	cmp	r3, #1
    48c6:	d02e      	beq.n	4926 <nrfx_gpio_handler+0x6a>
}
    48c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    48cc:	4f17      	ldr	r7, [pc, #92]	; (492c <nrfx_gpio_handler+0x70>)
	gpio_fire_callbacks(list, port, BIT(pin));
    48ce:	693b      	ldr	r3, [r7, #16]
    48d0:	685c      	ldr	r4, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    48d2:	2c00      	cmp	r4, #0
    48d4:	d0f8      	beq.n	48c8 <nrfx_gpio_handler+0xc>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    48d6:	f000 001f 	and.w	r0, r0, #31
    48da:	2601      	movs	r6, #1
	return node->next;
    48dc:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    48de:	f8df 8050 	ldr.w	r8, [pc, #80]	; 4930 <nrfx_gpio_handler+0x74>
    48e2:	f8df 9050 	ldr.w	r9, [pc, #80]	; 4934 <nrfx_gpio_handler+0x78>
    48e6:	f8df a050 	ldr.w	sl, [pc, #80]	; 4938 <nrfx_gpio_handler+0x7c>
    48ea:	4086      	lsls	r6, r0
		if (cb->pin_mask & pins) {
    48ec:	68a3      	ldr	r3, [r4, #8]
    48ee:	421e      	tst	r6, r3
    48f0:	d014      	beq.n	491c <nrfx_gpio_handler+0x60>
			__ASSERT(cb->handler, "No callback handler!");
    48f2:	6863      	ldr	r3, [r4, #4]
    48f4:	b963      	cbnz	r3, 4910 <nrfx_gpio_handler+0x54>
    48f6:	4649      	mov	r1, r9
    48f8:	2345      	movs	r3, #69	; 0x45
    48fa:	4642      	mov	r2, r8
    48fc:	4650      	mov	r0, sl
    48fe:	f004 fc48 	bl	9192 <assert_print>
    4902:	480e      	ldr	r0, [pc, #56]	; (493c <nrfx_gpio_handler+0x80>)
    4904:	f004 fc45 	bl	9192 <assert_print>
    4908:	2145      	movs	r1, #69	; 0x45
    490a:	4640      	mov	r0, r8
    490c:	f004 fc3a 	bl	9184 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    4910:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    4914:	4621      	mov	r1, r4
    4916:	4032      	ands	r2, r6
    4918:	4638      	mov	r0, r7
    491a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    491c:	2d00      	cmp	r5, #0
    491e:	d0d3      	beq.n	48c8 <nrfx_gpio_handler+0xc>
    4920:	462c      	mov	r4, r5
    4922:	682d      	ldr	r5, [r5, #0]
    4924:	e7e2      	b.n	48ec <nrfx_gpio_handler+0x30>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4926:	4f06      	ldr	r7, [pc, #24]	; (4940 <nrfx_gpio_handler+0x84>)
    4928:	e7d1      	b.n	48ce <nrfx_gpio_handler+0x12>
    492a:	bf00      	nop
    492c:	00009b34 	.word	0x00009b34
    4930:	0000b5cf 	.word	0x0000b5cf
    4934:	0000b693 	.word	0x0000b693
    4938:	0000a107 	.word	0x0000a107
    493c:	0000b626 	.word	0x0000b626
    4940:	00009b4c 	.word	0x00009b4c

00004944 <gpio_nrfx_pin_configure>:
{
    4944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    4948:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    494a:	7b3b      	ldrb	r3, [r7, #12]
    494c:	f001 051f 	and.w	r5, r1, #31
{
    4950:	b085      	sub	sp, #20
    4952:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4954:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4958:	4614      	mov	r4, r2
    495a:	b9ca      	cbnz	r2, 4990 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    495c:	a902      	add	r1, sp, #8
    495e:	4628      	mov	r0, r5
    4960:	f001 f9b0 	bl	5cc4 <nrfx_gpiote_channel_get>
    4964:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4966:	4628      	mov	r0, r5
    4968:	f001 fab2 	bl	5ed0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    496c:	4b4a      	ldr	r3, [pc, #296]	; (4a98 <gpio_nrfx_pin_configure+0x154>)
    496e:	4298      	cmp	r0, r3
    4970:	d004      	beq.n	497c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4972:	f06f 0004 	mvn.w	r0, #4
}
    4976:	b005      	add	sp, #20
    4978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    497c:	4284      	cmp	r4, r0
    497e:	d105      	bne.n	498c <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    4980:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4984:	f001 f9fa 	bl	5d7c <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4988:	42a0      	cmp	r0, r4
    498a:	d1f2      	bne.n	4972 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    498c:	2000      	movs	r0, #0
    498e:	e7f2      	b.n	4976 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4990:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4994:	f10d 0103 	add.w	r1, sp, #3
    4998:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    499a:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    499e:	f001 f991 	bl	5cc4 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    49a2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    49a4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    49a6:	aa02      	add	r2, sp, #8
    49a8:	4649      	mov	r1, r9
    49aa:	4628      	mov	r0, r5
    49ac:	f001 f862 	bl	5a74 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    49b0:	4b39      	ldr	r3, [pc, #228]	; (4a98 <gpio_nrfx_pin_configure+0x154>)
    49b2:	4298      	cmp	r0, r3
    49b4:	d002      	beq.n	49bc <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    49b6:	f06f 0015 	mvn.w	r0, #21
    49ba:	e7dc      	b.n	4976 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    49bc:	4580      	cmp	r8, r0
    49be:	d103      	bne.n	49c8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    49c0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    49c4:	f001 f9da 	bl	5d7c <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    49c8:	03a3      	lsls	r3, r4, #14
    49ca:	d551      	bpl.n	4a70 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    49cc:	f240 6306 	movw	r3, #1542	; 0x606
    49d0:	4023      	ands	r3, r4
    49d2:	f240 2206 	movw	r2, #518	; 0x206
    49d6:	4293      	cmp	r3, r2
    49d8:	d03b      	beq.n	4a52 <gpio_nrfx_pin_configure+0x10e>
    49da:	d80c      	bhi.n	49f6 <gpio_nrfx_pin_configure+0xb2>
    49dc:	2b06      	cmp	r3, #6
    49de:	d015      	beq.n	4a0c <gpio_nrfx_pin_configure+0xc8>
    49e0:	d804      	bhi.n	49ec <gpio_nrfx_pin_configure+0xa8>
    49e2:	b19b      	cbz	r3, 4a0c <gpio_nrfx_pin_configure+0xc8>
    49e4:	2b02      	cmp	r3, #2
    49e6:	d1e6      	bne.n	49b6 <gpio_nrfx_pin_configure+0x72>
    49e8:	2304      	movs	r3, #4
    49ea:	e00f      	b.n	4a0c <gpio_nrfx_pin_configure+0xc8>
    49ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    49f0:	d1e1      	bne.n	49b6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    49f2:	2301      	movs	r3, #1
    49f4:	e00a      	b.n	4a0c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    49f6:	f240 4202 	movw	r2, #1026	; 0x402
    49fa:	4293      	cmp	r3, r2
    49fc:	d02b      	beq.n	4a56 <gpio_nrfx_pin_configure+0x112>
    49fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    4a02:	d02a      	beq.n	4a5a <gpio_nrfx_pin_configure+0x116>
    4a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4a08:	d1d5      	bne.n	49b6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    4a0a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    4a0c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4a10:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4a14:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4a18:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4a1a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    4a1e:	bf54      	ite	pl
    4a20:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4a24:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4a26:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4a28:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4a2c:	d517      	bpl.n	4a5e <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4a2e:	687b      	ldr	r3, [r7, #4]
    4a30:	2101      	movs	r1, #1
    4a32:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    4a36:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4a3a:	2200      	movs	r2, #0
    4a3c:	a901      	add	r1, sp, #4
    4a3e:	4628      	mov	r0, r5
    4a40:	f001 f8c6 	bl	5bd0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4a44:	4b14      	ldr	r3, [pc, #80]	; (4a98 <gpio_nrfx_pin_configure+0x154>)
    4a46:	4298      	cmp	r0, r3
    4a48:	bf14      	ite	ne
    4a4a:	f06f 0015 	mvnne.w	r0, #21
    4a4e:	2000      	moveq	r0, #0
    4a50:	e791      	b.n	4976 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    4a52:	2307      	movs	r3, #7
    4a54:	e7da      	b.n	4a0c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    4a56:	2305      	movs	r3, #5
    4a58:	e7d8      	b.n	4a0c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    4a5a:	2303      	movs	r3, #3
    4a5c:	e7d6      	b.n	4a0c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4a5e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4a60:	bf41      	itttt	mi
    4a62:	687b      	ldrmi	r3, [r7, #4]
    4a64:	2101      	movmi	r1, #1
    4a66:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    4a6a:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    4a6e:	e7e4      	b.n	4a3a <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    4a70:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4a72:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    4a76:	bf54      	ite	pl
    4a78:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    4a7c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4a7e:	461a      	mov	r2, r3
    4a80:	a901      	add	r1, sp, #4
    4a82:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4a84:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4a88:	f000 fff4 	bl	5a74 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4a8c:	4b02      	ldr	r3, [pc, #8]	; (4a98 <gpio_nrfx_pin_configure+0x154>)
    4a8e:	4298      	cmp	r0, r3
    4a90:	f43f af7c 	beq.w	498c <gpio_nrfx_pin_configure+0x48>
    4a94:	e78f      	b.n	49b6 <gpio_nrfx_pin_configure+0x72>
    4a96:	bf00      	nop
    4a98:	0bad0000 	.word	0x0bad0000

00004a9c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    4a9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    4a9e:	ab0b      	add	r3, sp, #44	; 0x2c
    4aa0:	9305      	str	r3, [sp, #20]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    4aa2:	9303      	str	r3, [sp, #12]
    4aa4:	4b05      	ldr	r3, [pc, #20]	; (4abc <z_log_msg2_runtime_create.constprop.0+0x20>)
    4aa6:	9302      	str	r3, [sp, #8]
    4aa8:	2300      	movs	r3, #0
    4aaa:	e9cd 3300 	strd	r3, r3, [sp]
    4aae:	2201      	movs	r2, #1
    4ab0:	4618      	mov	r0, r3
    4ab2:	f7fd ff45 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    4ab6:	b007      	add	sp, #28
    4ab8:	f85d fb04 	ldr.w	pc, [sp], #4
    4abc:	0000b6ad 	.word	0x0000b6ad

00004ac0 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    4ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    4ac2:	794b      	ldrb	r3, [r1, #5]
    4ac4:	2b01      	cmp	r3, #1
    4ac6:	d026      	beq.n	4b16 <uarte_nrfx_configure+0x56>
    4ac8:	2b03      	cmp	r3, #3
    4aca:	d121      	bne.n	4b10 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    4acc:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    4ace:	798b      	ldrb	r3, [r1, #6]
    4ad0:	2b03      	cmp	r3, #3
    4ad2:	d11d      	bne.n	4b10 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    4ad4:	79cc      	ldrb	r4, [r1, #7]
    4ad6:	b10c      	cbz	r4, 4adc <uarte_nrfx_configure+0x1c>
    4ad8:	2c01      	cmp	r4, #1
    4ada:	d119      	bne.n	4b10 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    4adc:	790a      	ldrb	r2, [r1, #4]
    4ade:	b112      	cbz	r2, 4ae6 <uarte_nrfx_configure+0x26>
    4ae0:	2a02      	cmp	r2, #2
    4ae2:	d115      	bne.n	4b10 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    4ae4:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    4ae6:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    4ae8:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    4aea:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    4aee:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    4af0:	d065      	beq.n	4bbe <uarte_nrfx_configure+0xfe>
    4af2:	d82d      	bhi.n	4b50 <uarte_nrfx_configure+0x90>
    4af4:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    4af8:	d064      	beq.n	4bc4 <uarte_nrfx_configure+0x104>
    4afa:	d816      	bhi.n	4b2a <uarte_nrfx_configure+0x6a>
    4afc:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    4b00:	d062      	beq.n	4bc8 <uarte_nrfx_configure+0x108>
    4b02:	d80a      	bhi.n	4b1a <uarte_nrfx_configure+0x5a>
    4b04:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    4b08:	d061      	beq.n	4bce <uarte_nrfx_configure+0x10e>
    4b0a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    4b0e:	d061      	beq.n	4bd4 <uarte_nrfx_configure+0x114>
    4b10:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4b14:	e052      	b.n	4bbc <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    4b16:	2600      	movs	r6, #0
    4b18:	e7d9      	b.n	4ace <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    4b1a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    4b1e:	d05c      	beq.n	4bda <uarte_nrfx_configure+0x11a>
    4b20:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    4b24:	d1f4      	bne.n	4b10 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    4b26:	4b37      	ldr	r3, [pc, #220]	; (4c04 <uarte_nrfx_configure+0x144>)
    4b28:	e03c      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b2a:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    4b2e:	d057      	beq.n	4be0 <uarte_nrfx_configure+0x120>
    4b30:	d807      	bhi.n	4b42 <uarte_nrfx_configure+0x82>
    4b32:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    4b36:	d055      	beq.n	4be4 <uarte_nrfx_configure+0x124>
    4b38:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    4b3c:	d1e8      	bne.n	4b10 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    4b3e:	4b32      	ldr	r3, [pc, #200]	; (4c08 <uarte_nrfx_configure+0x148>)
    4b40:	e030      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b42:	f647 2712 	movw	r7, #31250	; 0x7a12
    4b46:	42bb      	cmp	r3, r7
    4b48:	d1e2      	bne.n	4b10 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    4b4a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    4b4e:	e029      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b50:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    4b54:	d048      	beq.n	4be8 <uarte_nrfx_configure+0x128>
    4b56:	d813      	bhi.n	4b80 <uarte_nrfx_configure+0xc0>
    4b58:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    4b5c:	d047      	beq.n	4bee <uarte_nrfx_configure+0x12e>
    4b5e:	d809      	bhi.n	4b74 <uarte_nrfx_configure+0xb4>
    4b60:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    4b64:	42bb      	cmp	r3, r7
    4b66:	d044      	beq.n	4bf2 <uarte_nrfx_configure+0x132>
    4b68:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    4b6c:	d1d0      	bne.n	4b10 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    4b6e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    4b72:	e017      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b74:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    4b78:	d1ca      	bne.n	4b10 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    4b7a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    4b7e:	e011      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b80:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    4b84:	d038      	beq.n	4bf8 <uarte_nrfx_configure+0x138>
    4b86:	d808      	bhi.n	4b9a <uarte_nrfx_configure+0xda>
    4b88:	4f20      	ldr	r7, [pc, #128]	; (4c0c <uarte_nrfx_configure+0x14c>)
    4b8a:	42bb      	cmp	r3, r7
    4b8c:	d037      	beq.n	4bfe <uarte_nrfx_configure+0x13e>
    4b8e:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    4b92:	d1bd      	bne.n	4b10 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    4b94:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    4b98:	e004      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4b9a:	4f1d      	ldr	r7, [pc, #116]	; (4c10 <uarte_nrfx_configure+0x150>)
    4b9c:	42bb      	cmp	r3, r7
    4b9e:	d1b7      	bne.n	4b10 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    4ba0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    4ba4:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    4ba6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    4baa:	1d03      	adds	r3, r0, #4
    4bac:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    4bae:	4334      	orrs	r4, r6
    4bb0:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    4bb2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    4bb6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    4bba:	2000      	movs	r0, #0
}
    4bbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    4bbe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    4bc2:	e7ef      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    4bc4:	4b13      	ldr	r3, [pc, #76]	; (4c14 <uarte_nrfx_configure+0x154>)
    4bc6:	e7ed      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    4bc8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    4bcc:	e7ea      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    4bce:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    4bd2:	e7e7      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    4bd4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    4bd8:	e7e4      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    4bda:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    4bde:	e7e1      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    4be0:	4b0d      	ldr	r3, [pc, #52]	; (4c18 <uarte_nrfx_configure+0x158>)
    4be2:	e7df      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    4be4:	4b0d      	ldr	r3, [pc, #52]	; (4c1c <uarte_nrfx_configure+0x15c>)
    4be6:	e7dd      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4be8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4bec:	e7da      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4bee:	4b0c      	ldr	r3, [pc, #48]	; (4c20 <uarte_nrfx_configure+0x160>)
    4bf0:	e7d8      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    4bf2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    4bf6:	e7d5      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4bf8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4bfc:	e7d2      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4bfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    4c02:	e7cf      	b.n	4ba4 <uarte_nrfx_configure+0xe4>
    4c04:	0013b000 	.word	0x0013b000
    4c08:	004ea000 	.word	0x004ea000
    4c0c:	0003d090 	.word	0x0003d090
    4c10:	000f4240 	.word	0x000f4240
    4c14:	00275000 	.word	0x00275000
    4c18:	0075c000 	.word	0x0075c000
    4c1c:	003af000 	.word	0x003af000
    4c20:	013a9000 	.word	0x013a9000

00004c24 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    4c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = dev->config;
    4c28:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = dev->data;
    4c2c:	6906      	ldr	r6, [r0, #16]
	return config->uarte_regs;
    4c2e:	f8d8 5000 	ldr.w	r5, [r8]
	nrf_uarte_disable(uarte);

	data->dev = dev;

#ifdef CONFIG_PINCTRL
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    4c32:	f8d8 900c 	ldr.w	r9, [r8, #12]
static int uarte_instance_init(const struct device *dev,
    4c36:	b087      	sub	sp, #28
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4c38:	2100      	movs	r1, #0
    4c3a:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
    4c3e:	4607      	mov	r7, r0
	data->dev = dev;
    4c40:	6030      	str	r0, [r6, #0]
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    4c42:	aa05      	add	r2, sp, #20
    4c44:	4648      	mov	r0, r9
    4c46:	f004 fce8 	bl	961a <pinctrl_lookup_state>
	if (ret < 0) {
    4c4a:	1e04      	subs	r4, r0, #0
    4c4c:	db25      	blt.n	4c9a <uarte_instance_init.constprop.0+0x76>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    4c4e:	9b05      	ldr	r3, [sp, #20]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4c50:	f8d9 2000 	ldr.w	r2, [r9]
    4c54:	7919      	ldrb	r1, [r3, #4]
    4c56:	6818      	ldr	r0, [r3, #0]
    4c58:	f004 fd36 	bl	96c8 <pinctrl_configure_pins>
	if (err < 0) {
    4c5c:	1e04      	subs	r4, r0, #0
    4c5e:	db1c      	blt.n	4c9a <uarte_instance_init.constprop.0+0x76>
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &data->uart_config);
    4c60:	1d31      	adds	r1, r6, #4
    4c62:	4638      	mov	r0, r7
    4c64:	f7ff ff2c 	bl	4ac0 <uarte_nrfx_configure>
	if (err) {
    4c68:	4604      	mov	r4, r0
    4c6a:	b9b0      	cbnz	r0, 4c9a <uarte_instance_init.constprop.0+0x76>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4c6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    4c70:	0799      	lsls	r1, r3, #30
    4c72:	d529      	bpl.n	4cc8 <uarte_instance_init.constprop.0+0xa4>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4c74:	f106 0012 	add.w	r0, r6, #18
    4c78:	f001 fa26 	bl	60c8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4c7c:	4b27      	ldr	r3, [pc, #156]	; (4d1c <uarte_instance_init.constprop.0+0xf8>)
    4c7e:	4298      	cmp	r0, r3
    4c80:	d00f      	beq.n	4ca2 <uarte_instance_init.constprop.0+0x7e>
		LOG_ERR("Failed to allocate PPI Channel");
    4c82:	4b27      	ldr	r3, [pc, #156]	; (4d20 <uarte_instance_init.constprop.0+0xfc>)
    4c84:	9400      	str	r4, [sp, #0]
    4c86:	e9cd 4301 	strd	r4, r3, [sp, #4]
    4c8a:	4620      	mov	r0, r4
    4c8c:	4623      	mov	r3, r4
    4c8e:	4925      	ldr	r1, [pc, #148]	; (4d24 <uarte_instance_init.constprop.0+0x100>)
    4c90:	2201      	movs	r2, #1
    4c92:	f7ff ff03 	bl	4a9c <z_log_msg2_runtime_create.constprop.0>
		return -EIO;
    4c96:	f06f 0404 	mvn.w	r4, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    4c9a:	4620      	mov	r0, r4
    4c9c:	b007      	add	sp, #28
    4c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    4ca2:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4ca4:	00c3      	lsls	r3, r0, #3
    4ca6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4caa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    4cae:	f105 020c 	add.w	r2, r5, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4cb2:	f505 7190 	add.w	r1, r5, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4cb6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4cba:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    4cbe:	4a1a      	ldr	r2, [pc, #104]	; (4d28 <uarte_instance_init.constprop.0+0x104>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    4cc0:	2301      	movs	r3, #1
    4cc2:	4083      	lsls	r3, r0
    4cc4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4cc8:	2308      	movs	r3, #8
    4cca:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
		if (!cfg->disable_rx) {
    4cce:	f898 3008 	ldrb.w	r3, [r8, #8]
    4cd2:	b95b      	cbnz	r3, 4cec <uarte_instance_init.constprop.0+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4cd4:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    4cd8:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    4cdc:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    4ce0:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    4ce4:	2301      	movs	r3, #1
    4ce6:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cea:	602b      	str	r3, [r5, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    4cec:	f8d8 3004 	ldr.w	r3, [r8, #4]
    4cf0:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    4cf2:	bf5c      	itt	pl
    4cf4:	f44f 7280 	movpl.w	r2, #256	; 0x100
    4cf8:	f8c5 2304 	strpl.w	r2, [r5, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4cfc:	06db      	lsls	r3, r3, #27
    4cfe:	bf44      	itt	mi
    4d00:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    4d04:	f8c5 3304 	strmi.w	r3, [r5, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    4d08:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    4d0a:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4d0c:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4d10:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d14:	2301      	movs	r3, #1
    4d16:	60ab      	str	r3, [r5, #8]
    4d18:	60eb      	str	r3, [r5, #12]
	return 0;
    4d1a:	e7be      	b.n	4c9a <uarte_instance_init.constprop.0+0x76>
    4d1c:	0bad0000 	.word	0x0bad0000
    4d20:	0000b6ad 	.word	0x0000b6ad
    4d24:	00009d74 	.word	0x00009d74
    4d28:	4001f000 	.word	0x4001f000

00004d2c <uarte_nrfx_poll_out>:
{
    4d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    4d2e:	6906      	ldr	r6, [r0, #16]
{
    4d30:	4605      	mov	r5, r0
    4d32:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4d34:	f004 fe3a 	bl	99ac <k_is_in_isr>
    4d38:	b910      	cbnz	r0, 4d40 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    4d3a:	4b2c      	ldr	r3, [pc, #176]	; (4dec <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    4d3c:	781b      	ldrb	r3, [r3, #0]
    4d3e:	b983      	cbnz	r3, 4d62 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4d40:	f04f 0320 	mov.w	r3, #32
    4d44:	f3ef 8411 	mrs	r4, BASEPRI
    4d48:	f383 8812 	msr	BASEPRI_MAX, r3
    4d4c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4d50:	6868      	ldr	r0, [r5, #4]
    4d52:	f004 fbf6 	bl	9542 <is_tx_ready.isra.0>
    4d56:	bb28      	cbnz	r0, 4da4 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    4d58:	f384 8811 	msr	BASEPRI, r4
    4d5c:	f3bf 8f6f 	isb	sy
}
    4d60:	e7ee      	b.n	4d40 <uarte_nrfx_poll_out+0x14>
{
    4d62:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    4d64:	6868      	ldr	r0, [r5, #4]
    4d66:	f004 fbec 	bl	9542 <is_tx_ready.isra.0>
    4d6a:	b970      	cbnz	r0, 4d8a <uarte_nrfx_poll_out+0x5e>
    4d6c:	2001      	movs	r0, #1
    4d6e:	f004 fd5f 	bl	9830 <nrfx_busy_wait>
    4d72:	3c01      	subs	r4, #1
    4d74:	d1f6      	bne.n	4d64 <uarte_nrfx_poll_out+0x38>
    4d76:	2100      	movs	r1, #0
    4d78:	2021      	movs	r0, #33	; 0x21
    4d7a:	f003 f997 	bl	80ac <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4d7e:	e7f0      	b.n	4d62 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4d80:	f384 8811 	msr	BASEPRI, r4
    4d84:	f3bf 8f6f 	isb	sy
}
    4d88:	e7f5      	b.n	4d76 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    4d8a:	f04f 0320 	mov.w	r3, #32
    4d8e:	f3ef 8411 	mrs	r4, BASEPRI
    4d92:	f383 8812 	msr	BASEPRI_MAX, r3
    4d96:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    4d9a:	6868      	ldr	r0, [r5, #4]
    4d9c:	f004 fbd1 	bl	9542 <is_tx_ready.isra.0>
    4da0:	2800      	cmp	r0, #0
    4da2:	d0ed      	beq.n	4d80 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    4da4:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    4da8:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    4daa:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    4dac:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4dae:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4db2:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4db6:	2200      	movs	r2, #0
    4db8:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4dbc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    4dc0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    4dc4:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4dc8:	684a      	ldr	r2, [r1, #4]
    4dca:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4dcc:	bf41      	itttt	mi
    4dce:	2208      	movmi	r2, #8
    4dd0:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    4dd4:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    4dd8:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ddc:	2201      	movs	r2, #1
    4dde:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    4de0:	f384 8811 	msr	BASEPRI, r4
    4de4:	f3bf 8f6f 	isb	sy
}
    4de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4dea:	bf00      	nop
    4dec:	20001306 	.word	0x20001306

00004df0 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4df0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4df2:	2301      	movs	r3, #1
    4df4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4df6:	4a11      	ldr	r2, [pc, #68]	; (4e3c <compare_int_lock+0x4c>)
    4df8:	f3bf 8f5b 	dmb	ish
    4dfc:	43dc      	mvns	r4, r3
    4dfe:	e852 1f00 	ldrex	r1, [r2]
    4e02:	ea01 0c04 	and.w	ip, r1, r4
    4e06:	e842 ce00 	strex	lr, ip, [r2]
    4e0a:	f1be 0f00 	cmp.w	lr, #0
    4e0e:	d1f6      	bne.n	4dfe <compare_int_lock+0xe>
    4e10:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4e14:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    4e18:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    4e1c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4e20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    4e24:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4e28:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4e2c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    4e30:	420b      	tst	r3, r1
}
    4e32:	bf14      	ite	ne
    4e34:	2001      	movne	r0, #1
    4e36:	2000      	moveq	r0, #0
    4e38:	bd10      	pop	{r4, pc}
    4e3a:	bf00      	nop
    4e3c:	20000c10 	.word	0x20000c10

00004e40 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4e40:	4919      	ldr	r1, [pc, #100]	; (4ea8 <sys_clock_timeout_handler+0x68>)
{
    4e42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4e44:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4e46:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4e4a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4e4c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    4e50:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4e54:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4e56:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4e5a:	d222      	bcs.n	4ea2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    4e5c:	4b13      	ldr	r3, [pc, #76]	; (4eac <sys_clock_timeout_handler+0x6c>)
    4e5e:	681b      	ldr	r3, [r3, #0]
    4e60:	0a1a      	lsrs	r2, r3, #8
    4e62:	061b      	lsls	r3, r3, #24
    4e64:	195e      	adds	r6, r3, r5
    4e66:	4b12      	ldr	r3, [pc, #72]	; (4eb0 <sys_clock_timeout_handler+0x70>)
    4e68:	f142 0700 	adc.w	r7, r2, #0
    4e6c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    4e70:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4e72:	f003 fc1f 	bl	86b4 <sys_clock_announce>
    return p_reg->CC[ch];
    4e76:	00a3      	lsls	r3, r4, #2
    4e78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4e7c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4e80:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    4e84:	42aa      	cmp	r2, r5
    4e86:	d10b      	bne.n	4ea0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    4e88:	b91e      	cbnz	r6, 4e92 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    4e8a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    4e8e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4e92:	4b08      	ldr	r3, [pc, #32]	; (4eb4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4e94:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4e98:	fa00 f404 	lsl.w	r4, r0, r4
    4e9c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    4ea2:	2600      	movs	r6, #0
    4ea4:	e7e5      	b.n	4e72 <sys_clock_timeout_handler+0x32>
    4ea6:	bf00      	nop
    4ea8:	20000478 	.word	0x20000478
    4eac:	20000c14 	.word	0x20000c14
    4eb0:	20000460 	.word	0x20000460
    4eb4:	40011000 	.word	0x40011000

00004eb8 <compare_int_unlock>:
	if (key) {
    4eb8:	b319      	cbz	r1, 4f02 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4eba:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    4ebe:	2301      	movs	r3, #1
    4ec0:	4a10      	ldr	r2, [pc, #64]	; (4f04 <compare_int_unlock+0x4c>)
    4ec2:	4083      	lsls	r3, r0
    4ec4:	e852 1f00 	ldrex	r1, [r2]
    4ec8:	4319      	orrs	r1, r3
    4eca:	e842 1c00 	strex	ip, r1, [r2]
    4ece:	f1bc 0f00 	cmp.w	ip, #0
    4ed2:	d1f7      	bne.n	4ec4 <compare_int_unlock+0xc>
    4ed4:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4ed8:	4a0b      	ldr	r2, [pc, #44]	; (4f08 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4eda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4ede:	4083      	lsls	r3, r0
    4ee0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4ee4:	4b09      	ldr	r3, [pc, #36]	; (4f0c <compare_int_unlock+0x54>)
    4ee6:	f3bf 8f5b 	dmb	ish
    4eea:	681b      	ldr	r3, [r3, #0]
    4eec:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4ef0:	fa23 f000 	lsr.w	r0, r3, r0
    4ef4:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4ef6:	bf42      	ittt	mi
    4ef8:	4b05      	ldrmi	r3, [pc, #20]	; (4f10 <compare_int_unlock+0x58>)
    4efa:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4efe:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4f02:	4770      	bx	lr
    4f04:	20000c10 	.word	0x20000c10
    4f08:	40011000 	.word	0x40011000
    4f0c:	20000c0c 	.word	0x20000c0c
    4f10:	e000e100 	.word	0xe000e100

00004f14 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4f14:	4b0d      	ldr	r3, [pc, #52]	; (4f4c <z_nrf_rtc_timer_read+0x38>)
    4f16:	6818      	ldr	r0, [r3, #0]
    4f18:	0a01      	lsrs	r1, r0, #8
    4f1a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4f1c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4f20:	4b0b      	ldr	r3, [pc, #44]	; (4f50 <z_nrf_rtc_timer_read+0x3c>)
    4f22:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4f26:	1818      	adds	r0, r3, r0
    4f28:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4f30:	d20a      	bcs.n	4f48 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4f32:	4b08      	ldr	r3, [pc, #32]	; (4f54 <z_nrf_rtc_timer_read+0x40>)
    4f34:	e9d3 2300 	ldrd	r2, r3, [r3]
    4f38:	4290      	cmp	r0, r2
    4f3a:	eb71 0303 	sbcs.w	r3, r1, r3
    4f3e:	d203      	bcs.n	4f48 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4f40:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4f44:	f141 0100 	adc.w	r1, r1, #0
}
    4f48:	4770      	bx	lr
    4f4a:	bf00      	nop
    4f4c:	20000c14 	.word	0x20000c14
    4f50:	40011000 	.word	0x40011000
    4f54:	20000460 	.word	0x20000460

00004f58 <compare_set>:
{
    4f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4f5c:	b085      	sub	sp, #20
    4f5e:	4616      	mov	r6, r2
    4f60:	4698      	mov	r8, r3
    4f62:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4f64:	f7ff ff44 	bl	4df0 <compare_int_lock>
    4f68:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4f6a:	f7ff ffd3 	bl	4f14 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4f6e:	42b0      	cmp	r0, r6
    4f70:	eb71 0308 	sbcs.w	r3, r1, r8
    4f74:	d278      	bcs.n	5068 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    4f76:	4b46      	ldr	r3, [pc, #280]	; (5090 <compare_set+0x138>)
    4f78:	1a30      	subs	r0, r6, r0
    4f7a:	eb68 0101 	sbc.w	r1, r8, r1
    4f7e:	4298      	cmp	r0, r3
    4f80:	f171 0300 	sbcs.w	r3, r1, #0
    4f84:	f080 8081 	bcs.w	508a <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    4f88:	4b42      	ldr	r3, [pc, #264]	; (5094 <compare_set+0x13c>)
    4f8a:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    4f8e:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    4f92:	45d8      	cmp	r8, fp
    4f94:	bf08      	it	eq
    4f96:	4556      	cmpeq	r6, sl
    4f98:	d051      	beq.n	503e <compare_set+0xe6>
    4f9a:	ea4f 0985 	mov.w	r9, r5, lsl #2
    4f9e:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4fa2:	f105 0750 	add.w	r7, r5, #80	; 0x50
    4fa6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    4faa:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4fac:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    4fb0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4fb4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    4fb6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    4fba:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4fbe:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    4fc0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4fc4:	4b34      	ldr	r3, [pc, #208]	; (5098 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4fc6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4fca:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    4fcc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4fd0:	1a40      	subs	r0, r0, r1
    4fd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4fd6:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4fda:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    4fdc:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    4fe0:	d107      	bne.n	4ff2 <compare_set+0x9a>
    4fe2:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    4fe6:	2013      	movs	r0, #19
    4fe8:	f004 fd2c 	bl	9a44 <z_impl_k_busy_wait>
    4fec:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    4ff0:	4b29      	ldr	r3, [pc, #164]	; (5098 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4ff2:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    4ff6:	eba4 000c 	sub.w	r0, r4, ip
    4ffa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4ffe:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5002:	bf88      	it	hi
    5004:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5006:	2000      	movs	r0, #0
    5008:	6038      	str	r0, [r7, #0]
    500a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    500c:	9801      	ldr	r0, [sp, #4]
    500e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5012:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5016:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    501a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    501e:	4281      	cmp	r1, r0
    5020:	d006      	beq.n	5030 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    5022:	1a20      	subs	r0, r4, r0
    5024:	3802      	subs	r0, #2
    5026:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    502a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    502e:	d819      	bhi.n	5064 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    5030:	1aa4      	subs	r4, r4, r2
    5032:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5036:	eb14 0a06 	adds.w	sl, r4, r6
    503a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    503e:	4915      	ldr	r1, [pc, #84]	; (5094 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    5040:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    5042:	012b      	lsls	r3, r5, #4
    5044:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    5048:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    504c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    504e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5050:	6053      	str	r3, [r2, #4]
	return ret;
    5052:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    5054:	4628      	mov	r0, r5
    5056:	9900      	ldr	r1, [sp, #0]
    5058:	f7ff ff2e 	bl	4eb8 <compare_int_unlock>
}
    505c:	4620      	mov	r0, r4
    505e:	b005      	add	sp, #20
    5060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5064:	4620      	mov	r0, r4
    5066:	e7b1      	b.n	4fcc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    5068:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    506a:	4a0c      	ldr	r2, [pc, #48]	; (509c <compare_set+0x144>)
    506c:	f3bf 8f5b 	dmb	ish
    5070:	40ab      	lsls	r3, r5
    5072:	e852 1f00 	ldrex	r1, [r2]
    5076:	4319      	orrs	r1, r3
    5078:	e842 1000 	strex	r0, r1, [r2]
    507c:	2800      	cmp	r0, #0
    507e:	d1f8      	bne.n	5072 <compare_set+0x11a>
    5080:	f3bf 8f5b 	dmb	ish
    5084:	46b2      	mov	sl, r6
    5086:	46c3      	mov	fp, r8
    5088:	e7d9      	b.n	503e <compare_set+0xe6>
			return -EINVAL;
    508a:	f06f 0415 	mvn.w	r4, #21
    508e:	e7e1      	b.n	5054 <compare_set+0xfc>
    5090:	01000001 	.word	0x01000001
    5094:	20000468 	.word	0x20000468
    5098:	40011000 	.word	0x40011000
    509c:	20000c0c 	.word	0x20000c0c

000050a0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    50a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    50a2:	4b19      	ldr	r3, [pc, #100]	; (5108 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    50a4:	4d19      	ldr	r5, [pc, #100]	; (510c <sys_clock_driver_init+0x6c>)
    50a6:	2400      	movs	r4, #0
    50a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    50ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    50b0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    50b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    50b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    50bc:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50c0:	4b13      	ldr	r3, [pc, #76]	; (5110 <sys_clock_driver_init+0x70>)
    50c2:	2602      	movs	r6, #2
    50c4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    50c8:	2101      	movs	r1, #1
    50ca:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    50ce:	2011      	movs	r0, #17
    50d0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    50d4:	4622      	mov	r2, r4
    50d6:	f7fe f837 	bl	3148 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    50da:	2011      	movs	r0, #17
    50dc:	f7fe f816 	bl	310c <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    50e0:	4a0c      	ldr	r2, [pc, #48]	; (5114 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    50e2:	2301      	movs	r3, #1
    50e4:	60ab      	str	r3, [r5, #8]
    50e6:	602b      	str	r3, [r5, #0]
    50e8:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    50ea:	4b0b      	ldr	r3, [pc, #44]	; (5118 <sys_clock_driver_init+0x78>)
    50ec:	4a0b      	ldr	r2, [pc, #44]	; (511c <sys_clock_driver_init+0x7c>)
    50ee:	9300      	str	r3, [sp, #0]
    50f0:	9401      	str	r4, [sp, #4]
    50f2:	2300      	movs	r3, #0
    50f4:	4620      	mov	r0, r4
    50f6:	f7ff ff2f 	bl	4f58 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    50fa:	4630      	mov	r0, r6
    50fc:	f7ff fa04 	bl	4508 <z_nrf_clock_control_lf_on>

	return 0;
}
    5100:	4620      	mov	r0, r4
    5102:	b002      	add	sp, #8
    5104:	bd70      	pop	{r4, r5, r6, pc}
    5106:	bf00      	nop
    5108:	20000468 	.word	0x20000468
    510c:	40011000 	.word	0x40011000
    5110:	e000e100 	.word	0xe000e100
    5114:	20000c10 	.word	0x20000c10
    5118:	00004e41 	.word	0x00004e41
    511c:	007fffff 	.word	0x007fffff

00005120 <rtc_nrf_isr>:
{
    5120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5124:	4c35      	ldr	r4, [pc, #212]	; (51fc <rtc_nrf_isr+0xdc>)
    5126:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    512a:	079a      	lsls	r2, r3, #30
    512c:	d50b      	bpl.n	5146 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    512e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5132:	b143      	cbz	r3, 5146 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5134:	4a32      	ldr	r2, [pc, #200]	; (5200 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5136:	2300      	movs	r3, #0
    5138:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    513c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5140:	6813      	ldr	r3, [r2, #0]
    5142:	3301      	adds	r3, #1
    5144:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    5146:	f04f 0320 	mov.w	r3, #32
    514a:	f3ef 8211 	mrs	r2, BASEPRI
    514e:	f383 8812 	msr	BASEPRI_MAX, r3
    5152:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    5156:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    515a:	03db      	lsls	r3, r3, #15
    515c:	d512      	bpl.n	5184 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    515e:	f3bf 8f5b 	dmb	ish
    5162:	4b28      	ldr	r3, [pc, #160]	; (5204 <rtc_nrf_isr+0xe4>)
    5164:	e853 1f00 	ldrex	r1, [r3]
    5168:	f021 0001 	bic.w	r0, r1, #1
    516c:	e843 0600 	strex	r6, r0, [r3]
    5170:	2e00      	cmp	r6, #0
    5172:	d1f7      	bne.n	5164 <rtc_nrf_isr+0x44>
    5174:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5178:	2900      	cmp	r1, #0
    517a:	d136      	bne.n	51ea <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    517c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    5180:	2b00      	cmp	r3, #0
    5182:	d132      	bne.n	51ea <rtc_nrf_isr+0xca>
{
    5184:	2300      	movs	r3, #0
	__asm__ volatile(
    5186:	f382 8811 	msr	BASEPRI, r2
    518a:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    518e:	b34b      	cbz	r3, 51e4 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    5190:	f7ff fec0 	bl	4f14 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    5194:	f04f 0320 	mov.w	r3, #32
    5198:	f3ef 8c11 	mrs	ip, BASEPRI
    519c:	f383 8812 	msr	BASEPRI_MAX, r3
    51a0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    51a4:	4b18      	ldr	r3, [pc, #96]	; (5208 <rtc_nrf_isr+0xe8>)
    51a6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    51aa:	42b0      	cmp	r0, r6
    51ac:	eb71 0207 	sbcs.w	r2, r1, r7
    51b0:	f04f 0200 	mov.w	r2, #0
    51b4:	d320      	bcc.n	51f8 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    51b6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    51ba:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
			user_context = cc_data[chan].user_context;
    51be:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    51c2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    51c6:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    51c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    51cc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    51d0:	f38c 8811 	msr	BASEPRI, ip
    51d4:	f3bf 8f6f 	isb	sy
		if (handler) {
    51d8:	b121      	cbz	r1, 51e4 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    51da:	9500      	str	r5, [sp, #0]
    51dc:	4632      	mov	r2, r6
    51de:	463b      	mov	r3, r7
    51e0:	2000      	movs	r0, #0
    51e2:	4788      	blx	r1
}
    51e4:	b003      	add	sp, #12
    51e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    51ea:	2300      	movs	r3, #0
    51ec:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    51f0:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    51f4:	2301      	movs	r3, #1
}
    51f6:	e7c6      	b.n	5186 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    51f8:	4611      	mov	r1, r2
    51fa:	e7e9      	b.n	51d0 <rtc_nrf_isr+0xb0>
    51fc:	40011000 	.word	0x40011000
    5200:	20000c14 	.word	0x20000c14
    5204:	20000c0c 	.word	0x20000c0c
    5208:	20000468 	.word	0x20000468

0000520c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    520c:	1c43      	adds	r3, r0, #1
{
    520e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5210:	d021      	beq.n	5256 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5212:	2801      	cmp	r0, #1
    5214:	dd21      	ble.n	525a <sys_clock_set_timeout+0x4e>
    5216:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    521a:	da20      	bge.n	525e <sys_clock_set_timeout+0x52>
    521c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    521e:	f7ff fe79 	bl	4f14 <z_nrf_rtc_timer_read>
    5222:	4b10      	ldr	r3, [pc, #64]	; (5264 <sys_clock_set_timeout+0x58>)
    5224:	e9d3 1300 	ldrd	r1, r3, [r3]
    5228:	1a40      	subs	r0, r0, r1
		ticks = 0;
    522a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    522e:	bf28      	it	cs
    5230:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5232:	3001      	adds	r0, #1
    5234:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    5236:	480c      	ldr	r0, [pc, #48]	; (5268 <sys_clock_set_timeout+0x5c>)
    5238:	4282      	cmp	r2, r0
    523a:	bf28      	it	cs
    523c:	4602      	movcs	r2, r0
    523e:	1852      	adds	r2, r2, r1
    5240:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5244:	4909      	ldr	r1, [pc, #36]	; (526c <sys_clock_set_timeout+0x60>)
    5246:	9001      	str	r0, [sp, #4]
    5248:	9100      	str	r1, [sp, #0]
    524a:	f143 0300 	adc.w	r3, r3, #0
    524e:	f7ff fe83 	bl	4f58 <compare_set>
}
    5252:	b002      	add	sp, #8
    5254:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5256:	4804      	ldr	r0, [pc, #16]	; (5268 <sys_clock_set_timeout+0x5c>)
    5258:	e7e0      	b.n	521c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    525a:	2400      	movs	r4, #0
    525c:	e7df      	b.n	521e <sys_clock_set_timeout+0x12>
    525e:	4c02      	ldr	r4, [pc, #8]	; (5268 <sys_clock_set_timeout+0x5c>)
    5260:	e7dd      	b.n	521e <sys_clock_set_timeout+0x12>
    5262:	bf00      	nop
    5264:	20000478 	.word	0x20000478
    5268:	007fffff 	.word	0x007fffff
    526c:	00004e41 	.word	0x00004e41

00005270 <sys_clock_elapsed>:
{
    5270:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5272:	f7ff fe4f 	bl	4f14 <z_nrf_rtc_timer_read>
    5276:	4b02      	ldr	r3, [pc, #8]	; (5280 <sys_clock_elapsed+0x10>)
    5278:	681b      	ldr	r3, [r3, #0]
}
    527a:	1ac0      	subs	r0, r0, r3
    527c:	bd08      	pop	{r3, pc}
    527e:	bf00      	nop
    5280:	20000478 	.word	0x20000478

00005284 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5284:	6802      	ldr	r2, [r0, #0]
    switch (port)
    5286:	0953      	lsrs	r3, r2, #5
{
    5288:	b510      	push	{r4, lr}
    528a:	4604      	mov	r4, r0
    switch (port)
    528c:	d02c      	beq.n	52e8 <nrf_gpio_pin_port_decode+0x64>
    uint32_t mask = 0;
    528e:	2b01      	cmp	r3, #1
    5290:	f64f 73ff 	movw	r3, #65535	; 0xffff
    5294:	bf18      	it	ne
    5296:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    5298:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    529c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    529e:	07db      	lsls	r3, r3, #31
    52a0:	d40b      	bmi.n	52ba <nrf_gpio_pin_port_decode+0x36>
    52a2:	4914      	ldr	r1, [pc, #80]	; (52f4 <nrf_gpio_pin_port_decode+0x70>)
    52a4:	4814      	ldr	r0, [pc, #80]	; (52f8 <nrf_gpio_pin_port_decode+0x74>)
    52a6:	4a15      	ldr	r2, [pc, #84]	; (52fc <nrf_gpio_pin_port_decode+0x78>)
    52a8:	f240 2329 	movw	r3, #553	; 0x229
    52ac:	f003 ff71 	bl	9192 <assert_print>
    52b0:	4812      	ldr	r0, [pc, #72]	; (52fc <nrf_gpio_pin_port_decode+0x78>)
    52b2:	f240 2129 	movw	r1, #553	; 0x229
    52b6:	f003 ff65 	bl	9184 <assert_post_action>
    uint32_t pin_number = *p_pin;
    52ba:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    52bc:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52c0:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    52c2:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52c4:	d00d      	beq.n	52e2 <nrf_gpio_pin_port_decode+0x5e>
    52c6:	2b01      	cmp	r3, #1
    52c8:	d011      	beq.n	52ee <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    52ca:	490d      	ldr	r1, [pc, #52]	; (5300 <nrf_gpio_pin_port_decode+0x7c>)
    52cc:	480a      	ldr	r0, [pc, #40]	; (52f8 <nrf_gpio_pin_port_decode+0x74>)
    52ce:	4a0b      	ldr	r2, [pc, #44]	; (52fc <nrf_gpio_pin_port_decode+0x78>)
    52d0:	f240 232e 	movw	r3, #558	; 0x22e
    52d4:	f003 ff5d 	bl	9192 <assert_print>
    52d8:	4808      	ldr	r0, [pc, #32]	; (52fc <nrf_gpio_pin_port_decode+0x78>)
    52da:	f240 212e 	movw	r1, #558	; 0x22e
    52de:	f003 ff51 	bl	9184 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    52e2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    52e6:	bd10      	pop	{r4, pc}
    switch (port)
    52e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    52ec:	e7d4      	b.n	5298 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    52ee:	4805      	ldr	r0, [pc, #20]	; (5304 <nrf_gpio_pin_port_decode+0x80>)
    52f0:	e7f9      	b.n	52e6 <nrf_gpio_pin_port_decode+0x62>
    52f2:	bf00      	nop
    52f4:	0000b670 	.word	0x0000b670
    52f8:	0000a107 	.word	0x0000a107
    52fc:	0000b63d 	.word	0x0000b63d
    5300:	0000a2aa 	.word	0x0000a2aa
    5304:	50000300 	.word	0x50000300

00005308 <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    5308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    530a:	ab0b      	add	r3, sp, #44	; 0x2c
    530c:	9305      	str	r3, [sp, #20]
    530e:	9303      	str	r3, [sp, #12]
    5310:	4b05      	ldr	r3, [pc, #20]	; (5328 <z_log_msg2_runtime_create.constprop.0+0x20>)
    5312:	9302      	str	r3, [sp, #8]
    5314:	2300      	movs	r3, #0
    5316:	e9cd 3300 	strd	r3, r3, [sp]
    531a:	2201      	movs	r2, #1
    531c:	4618      	mov	r0, r3
    531e:	f7fd fb0f 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    5322:	b007      	add	sp, #28
    5324:	f85d fb04 	ldr.w	pc, [sp], #4
    5328:	0000b6ea 	.word	0x0000b6ea

0000532c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    532c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		(void) arch_syscall_invoke0(K_SYSCALL_LOG_PANIC);
		return;
	}
#endif
	compiler_barrier();
	z_impl_log_panic();
    532e:	f7fd f8ab 	bl	2488 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    5332:	2400      	movs	r4, #0
    5334:	4b06      	ldr	r3, [pc, #24]	; (5350 <k_sys_fatal_error_handler+0x24>)
    5336:	9302      	str	r3, [sp, #8]
    5338:	4620      	mov	r0, r4
    533a:	e9cd 4400 	strd	r4, r4, [sp]
    533e:	4905      	ldr	r1, [pc, #20]	; (5354 <k_sys_fatal_error_handler+0x28>)
    5340:	4623      	mov	r3, r4
    5342:	2201      	movs	r2, #1
    5344:	f7ff ffe0 	bl	5308 <z_log_msg2_runtime_create.constprop.0>
		sys_arch_reboot(0);
    5348:	4620      	mov	r0, r4
    534a:	f7fe fd3f 	bl	3dcc <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    534e:	bf00      	nop
    5350:	0000b6ea 	.word	0x0000b6ea
    5354:	00009d3c 	.word	0x00009d3c

00005358 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5358:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    535c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    5360:	2a08      	cmp	r2, #8
    5362:	d106      	bne.n	5372 <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    5364:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
                switch(var2)
    5368:	2b05      	cmp	r3, #5
    536a:	d802      	bhi.n	5372 <nrf52_errata_103+0x1a>
    536c:	4a02      	ldr	r2, [pc, #8]	; (5378 <nrf52_errata_103+0x20>)
    536e:	5cd0      	ldrb	r0, [r2, r3]
    5370:	4770      	bx	lr
        return false;
    5372:	2000      	movs	r0, #0
}
    5374:	4770      	bx	lr
    5376:	bf00      	nop
    5378:	0000b70d 	.word	0x0000b70d

0000537c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    537c:	4a02      	ldr	r2, [pc, #8]	; (5388 <nvmc_wait+0xc>)
    537e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    5382:	2b00      	cmp	r3, #0
    5384:	d0fb      	beq.n	537e <nvmc_wait+0x2>
}
    5386:	4770      	bx	lr
    5388:	4001e000 	.word	0x4001e000

0000538c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    538c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    538e:	f004 fa45 	bl	981c <nrf52_errata_136>
    5392:	b140      	cbz	r0, 53a6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    5394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5398:	2200      	movs	r2, #0
    539a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    539e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    53a2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    53a6:	f004 fa39 	bl	981c <nrf52_errata_136>
    53aa:	2800      	cmp	r0, #0
    53ac:	d046      	beq.n	543c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    53ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    53b2:	4b60      	ldr	r3, [pc, #384]	; (5534 <SystemInit+0x1a8>)
    53b4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    53b8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    53bc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    53c0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    53c4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    53c8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    53cc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    53d0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    53d4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    53d8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    53dc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    53e0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    53e4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    53e8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    53ec:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    53f0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    53f4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    53f8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    53fc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5400:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5404:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5408:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    540c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5410:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5414:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5418:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    541c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5420:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5424:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5428:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    542c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5430:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5434:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5438:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    543c:	f7ff ff8c 	bl	5358 <nrf52_errata_103>
    5440:	b118      	cbz	r0, 544a <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5442:	4b3d      	ldr	r3, [pc, #244]	; (5538 <SystemInit+0x1ac>)
    5444:	4a3d      	ldr	r2, [pc, #244]	; (553c <SystemInit+0x1b0>)
    5446:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    544a:	f7ff ff85 	bl	5358 <nrf52_errata_103>
    544e:	b118      	cbz	r0, 5458 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    5450:	4b3b      	ldr	r3, [pc, #236]	; (5540 <SystemInit+0x1b4>)
    5452:	22fb      	movs	r2, #251	; 0xfb
    5454:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    5458:	f7ff ff7e 	bl	5358 <nrf52_errata_103>
    545c:	b170      	cbz	r0, 547c <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    545e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5462:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    5466:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
    546a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    546e:	f022 020f 	bic.w	r2, r2, #15
    5472:	f003 030f 	and.w	r3, r3, #15
    5476:	4313      	orrs	r3, r2
    5478:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    547c:	f7ff ff6c 	bl	5358 <nrf52_errata_103>
    5480:	b120      	cbz	r0, 548c <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    5482:	4b30      	ldr	r3, [pc, #192]	; (5544 <SystemInit+0x1b8>)
    5484:	f44f 7200 	mov.w	r2, #512	; 0x200
    5488:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    548c:	f004 f9c6 	bl	981c <nrf52_errata_136>
    5490:	b148      	cbz	r0, 54a6 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5496:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    549a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    549c:	bf44      	itt	mi
    549e:	f06f 0201 	mvnmi.w	r2, #1
    54a2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    54a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    54aa:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    54ae:	2a08      	cmp	r2, #8
    54b0:	d10e      	bne.n	54d0 <SystemInit+0x144>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    54b2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    54b6:	2b05      	cmp	r3, #5
    54b8:	d802      	bhi.n	54c0 <SystemInit+0x134>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    54ba:	4a23      	ldr	r2, [pc, #140]	; (5548 <SystemInit+0x1bc>)
    54bc:	5cd3      	ldrb	r3, [r2, r3]
    54be:	b13b      	cbz	r3, 54d0 <SystemInit+0x144>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    54c0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    54c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    54c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    54cc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    54d0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    54d4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    54d8:	2a00      	cmp	r2, #0
    54da:	db03      	blt.n	54e4 <SystemInit+0x158>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    54dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    54e0:	2b00      	cmp	r3, #0
    54e2:	da22      	bge.n	552a <SystemInit+0x19e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    54e4:	4919      	ldr	r1, [pc, #100]	; (554c <SystemInit+0x1c0>)
    54e6:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    54e8:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    54ec:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    54f0:	2412      	movs	r4, #18
    nvmc_wait();
    54f2:	f7ff ff43 	bl	537c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    54f6:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    54fa:	f7ff ff3f 	bl	537c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    54fe:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5502:	f7ff ff3b 	bl	537c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5506:	2300      	movs	r3, #0
    5508:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    550c:	f7ff ff36 	bl	537c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5510:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5514:	490e      	ldr	r1, [pc, #56]	; (5550 <SystemInit+0x1c4>)
    5516:	4b0f      	ldr	r3, [pc, #60]	; (5554 <SystemInit+0x1c8>)
    5518:	68ca      	ldr	r2, [r1, #12]
    551a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    551e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5520:	60cb      	str	r3, [r1, #12]
    5522:	f3bf 8f4f 	dsb	sy
    __NOP();
    5526:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5528:	e7fd      	b.n	5526 <SystemInit+0x19a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    552a:	4b0b      	ldr	r3, [pc, #44]	; (5558 <SystemInit+0x1cc>)
    552c:	4a0b      	ldr	r2, [pc, #44]	; (555c <SystemInit+0x1d0>)
    552e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    5530:	bd10      	pop	{r4, pc}
    5532:	bf00      	nop
    5534:	4000c000 	.word	0x4000c000
    5538:	40005000 	.word	0x40005000
    553c:	00038148 	.word	0x00038148
    5540:	4000f000 	.word	0x4000f000
    5544:	40029000 	.word	0x40029000
    5548:	0000b707 	.word	0x0000b707
    554c:	4001e000 	.word	0x4001e000
    5550:	e000ed00 	.word	0xe000ed00
    5554:	05fa0004 	.word	0x05fa0004
    5558:	200000f0 	.word	0x200000f0
    555c:	03d09000 	.word	0x03d09000

00005560 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5560:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5562:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5564:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    5566:	fab2 f382 	clz	r3, r2
    556a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    556e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    5570:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    5572:	d014      	beq.n	559e <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5574:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5578:	fa05 f303 	lsl.w	r3, r5, r3
    557c:	ea22 0303 	bic.w	r3, r2, r3
    5580:	e850 6f00 	ldrex	r6, [r0]
    5584:	4296      	cmp	r6, r2
    5586:	d104      	bne.n	5592 <nrfx_flag32_alloc+0x32>
    5588:	e840 3c00 	strex	ip, r3, [r0]
    558c:	f1bc 0f00 	cmp.w	ip, #0
    5590:	d1f6      	bne.n	5580 <nrfx_flag32_alloc+0x20>
    5592:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    5596:	d1e5      	bne.n	5564 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    5598:	4802      	ldr	r0, [pc, #8]	; (55a4 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    559a:	700c      	strb	r4, [r1, #0]
}
    559c:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    559e:	4802      	ldr	r0, [pc, #8]	; (55a8 <nrfx_flag32_alloc+0x48>)
    55a0:	e7fc      	b.n	559c <nrfx_flag32_alloc+0x3c>
    55a2:	bf00      	nop
    55a4:	0bad0000 	.word	0x0bad0000
    55a8:	0bad0002 	.word	0x0bad0002

000055ac <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    55ac:	6803      	ldr	r3, [r0, #0]
    55ae:	40cb      	lsrs	r3, r1
    55b0:	07db      	lsls	r3, r3, #31
{
    55b2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    55b4:	d415      	bmi.n	55e2 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    55b6:	2301      	movs	r3, #1
    55b8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    55bc:	6803      	ldr	r3, [r0, #0]
    55be:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    55c2:	ea41 0203 	orr.w	r2, r1, r3
    55c6:	e850 4f00 	ldrex	r4, [r0]
    55ca:	429c      	cmp	r4, r3
    55cc:	d104      	bne.n	55d8 <nrfx_flag32_free+0x2c>
    55ce:	e840 2c00 	strex	ip, r2, [r0]
    55d2:	f1bc 0f00 	cmp.w	ip, #0
    55d6:	d1f6      	bne.n	55c6 <nrfx_flag32_free+0x1a>
    55d8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    55dc:	d1ee      	bne.n	55bc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    55de:	4802      	ldr	r0, [pc, #8]	; (55e8 <nrfx_flag32_free+0x3c>)
}
    55e0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    55e2:	4802      	ldr	r0, [pc, #8]	; (55ec <nrfx_flag32_free+0x40>)
    55e4:	e7fc      	b.n	55e0 <nrfx_flag32_free+0x34>
    55e6:	bf00      	nop
    55e8:	0bad0000 	.word	0x0bad0000
    55ec:	0bad0004 	.word	0x0bad0004

000055f0 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    55f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    55f2:	4604      	mov	r4, r0
    55f4:	b170      	cbz	r0, 5614 <clock_stop+0x24>
    55f6:	2801      	cmp	r0, #1
    55f8:	d031      	beq.n	565e <clock_stop+0x6e>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    55fa:	4931      	ldr	r1, [pc, #196]	; (56c0 <clock_stop+0xd0>)
    55fc:	4831      	ldr	r0, [pc, #196]	; (56c4 <clock_stop+0xd4>)
    55fe:	4a32      	ldr	r2, [pc, #200]	; (56c8 <clock_stop+0xd8>)
    5600:	23d8      	movs	r3, #216	; 0xd8
    5602:	f003 fdc6 	bl	9192 <assert_print>
    5606:	4830      	ldr	r0, [pc, #192]	; (56c8 <clock_stop+0xd8>)
    5608:	21d8      	movs	r1, #216	; 0xd8
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    560a:	b003      	add	sp, #12
    560c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            NRFX_ASSERT(0);
    5610:	f003 bdb8 	b.w	9184 <assert_post_action>
    p_reg->INTENCLR = mask;
    5614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5618:	2202      	movs	r2, #2
    561a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    561e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    5622:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5626:	2201      	movs	r2, #1
    5628:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    562a:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    562c:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    562e:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    5632:	bf14      	ite	ne
    5634:	2500      	movne	r5, #0
    5636:	f10d 0507 	addeq.w	r5, sp, #7
    563a:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    563e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    5642:	b1bc      	cbz	r4, 5674 <clock_stop+0x84>
    5644:	2c01      	cmp	r4, #1
    5646:	d02c      	beq.n	56a2 <clock_stop+0xb2>
            NRFX_ASSERT(0);
    5648:	491d      	ldr	r1, [pc, #116]	; (56c0 <clock_stop+0xd0>)
    564a:	481e      	ldr	r0, [pc, #120]	; (56c4 <clock_stop+0xd4>)
    564c:	4a1f      	ldr	r2, [pc, #124]	; (56cc <clock_stop+0xdc>)
    564e:	f44f 734f 	mov.w	r3, #828	; 0x33c
    5652:	f003 fd9e 	bl	9192 <assert_print>
    5656:	481d      	ldr	r0, [pc, #116]	; (56cc <clock_stop+0xdc>)
    5658:	f44f 714f 	mov.w	r1, #828	; 0x33c
    565c:	e7d5      	b.n	560a <clock_stop+0x1a>
    p_reg->INTENCLR = mask;
    565e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5662:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    5664:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5668:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    566c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5670:	6058      	str	r0, [r3, #4]
}
    5672:	e7da      	b.n	562a <clock_stop+0x3a>
            if (p_clk_src != NULL)
    5674:	b125      	cbz	r5, 5680 <clock_stop+0x90>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5676:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    567a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    567e:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5680:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    5684:	03da      	lsls	r2, r3, #15
    5686:	d519      	bpl.n	56bc <clock_stop+0xcc>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    5688:	b11d      	cbz	r5, 5692 <clock_stop+0xa2>
    568a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    568e:	2b01      	cmp	r3, #1
    5690:	d104      	bne.n	569c <clock_stop+0xac>
    5692:	2001      	movs	r0, #1
    5694:	f004 f8cc 	bl	9830 <nrfx_busy_wait>
    5698:	3f01      	subs	r7, #1
    569a:	d1d2      	bne.n	5642 <clock_stop+0x52>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    569c:	2c01      	cmp	r4, #1
    569e:	d00a      	beq.n	56b6 <clock_stop+0xc6>
    56a0:	e00c      	b.n	56bc <clock_stop+0xcc>
            if (p_clk_src != NULL)
    56a2:	b125      	cbz	r5, 56ae <clock_stop+0xbe>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    56a4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    56a8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    56ac:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    56ae:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    56b2:	03db      	lsls	r3, r3, #15
    56b4:	d4e8      	bmi.n	5688 <clock_stop+0x98>
            m_clock_cb.hfclk_started = false;
    56b6:	4b06      	ldr	r3, [pc, #24]	; (56d0 <clock_stop+0xe0>)
    56b8:	2200      	movs	r2, #0
    56ba:	715a      	strb	r2, [r3, #5]
}
    56bc:	b003      	add	sp, #12
    56be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    56c0:	0000a2aa 	.word	0x0000a2aa
    56c4:	0000a107 	.word	0x0000a107
    56c8:	0000b713 	.word	0x0000b713
    56cc:	0000b750 	.word	0x0000b750
    56d0:	20000c18 	.word	0x20000c18

000056d4 <nrfx_clock_init>:
    }
    return is_correct_clk;
}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    56d4:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    56d6:	4604      	mov	r4, r0
    56d8:	b958      	cbnz	r0, 56f2 <nrfx_clock_init+0x1e>
    56da:	490b      	ldr	r1, [pc, #44]	; (5708 <nrfx_clock_init+0x34>)
    56dc:	480b      	ldr	r0, [pc, #44]	; (570c <nrfx_clock_init+0x38>)
    56de:	4a0c      	ldr	r2, [pc, #48]	; (5710 <nrfx_clock_init+0x3c>)
    56e0:	f240 1315 	movw	r3, #277	; 0x115
    56e4:	f003 fd55 	bl	9192 <assert_print>
    56e8:	4809      	ldr	r0, [pc, #36]	; (5710 <nrfx_clock_init+0x3c>)
    56ea:	f240 1115 	movw	r1, #277	; 0x115
    56ee:	f003 fd49 	bl	9184 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    56f2:	4b08      	ldr	r3, [pc, #32]	; (5714 <nrfx_clock_init+0x40>)
    56f4:	791a      	ldrb	r2, [r3, #4]
    56f6:	b922      	cbnz	r2, 5702 <nrfx_clock_init+0x2e>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    56f8:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    56fa:	4807      	ldr	r0, [pc, #28]	; (5718 <nrfx_clock_init+0x44>)
        m_clock_cb.event_handler = event_handler;
    56fc:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    56fe:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5700:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    5702:	4806      	ldr	r0, [pc, #24]	; (571c <nrfx_clock_init+0x48>)
    return err_code;
    5704:	e7fc      	b.n	5700 <nrfx_clock_init+0x2c>
    5706:	bf00      	nop
    5708:	0000b784 	.word	0x0000b784
    570c:	0000a107 	.word	0x0000a107
    5710:	0000b713 	.word	0x0000b713
    5714:	20000c18 	.word	0x20000c18
    5718:	0bad0000 	.word	0x0bad0000
    571c:	0bad000c 	.word	0x0bad000c

00005720 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    5720:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5722:	4b0d      	ldr	r3, [pc, #52]	; (5758 <nrfx_clock_enable+0x38>)
    5724:	791b      	ldrb	r3, [r3, #4]
    5726:	b95b      	cbnz	r3, 5740 <nrfx_clock_enable+0x20>
    5728:	490c      	ldr	r1, [pc, #48]	; (575c <nrfx_clock_enable+0x3c>)
    572a:	480d      	ldr	r0, [pc, #52]	; (5760 <nrfx_clock_enable+0x40>)
    572c:	4a0d      	ldr	r2, [pc, #52]	; (5764 <nrfx_clock_enable+0x44>)
    572e:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5732:	f003 fd2e 	bl	9192 <assert_print>
    5736:	480b      	ldr	r0, [pc, #44]	; (5764 <nrfx_clock_enable+0x44>)
    5738:	f44f 7197 	mov.w	r1, #302	; 0x12e
    573c:	f003 fd22 	bl	9184 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    5740:	2000      	movs	r0, #0
    5742:	f7fd fcf3 	bl	312c <arch_irq_is_enabled>
    5746:	b908      	cbnz	r0, 574c <nrfx_clock_enable+0x2c>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    5748:	f7fd fce0 	bl	310c <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    574c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5750:	2200      	movs	r2, #0
    5752:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    5756:	bd08      	pop	{r3, pc}
    5758:	20000c18 	.word	0x20000c18
    575c:	0000b792 	.word	0x0000b792
    5760:	0000a107 	.word	0x0000a107
    5764:	0000b713 	.word	0x0000b713

00005768 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5768:	4b2c      	ldr	r3, [pc, #176]	; (581c <nrfx_clock_start+0xb4>)
    576a:	791b      	ldrb	r3, [r3, #4]
{
    576c:	b510      	push	{r4, lr}
    576e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5770:	b95b      	cbnz	r3, 578a <nrfx_clock_start+0x22>
    5772:	492b      	ldr	r1, [pc, #172]	; (5820 <nrfx_clock_start+0xb8>)
    5774:	482b      	ldr	r0, [pc, #172]	; (5824 <nrfx_clock_start+0xbc>)
    5776:	4a2c      	ldr	r2, [pc, #176]	; (5828 <nrfx_clock_start+0xc0>)
    5778:	f44f 73b4 	mov.w	r3, #360	; 0x168
    577c:	f003 fd09 	bl	9192 <assert_print>
    5780:	4829      	ldr	r0, [pc, #164]	; (5828 <nrfx_clock_start+0xc0>)
    5782:	f44f 71b4 	mov.w	r1, #360	; 0x168
    5786:	f003 fcfd 	bl	9184 <assert_post_action>
    switch (domain)
    578a:	b17c      	cbz	r4, 57ac <nrfx_clock_start+0x44>
    578c:	2c01      	cmp	r4, #1
    578e:	d03a      	beq.n	5806 <nrfx_clock_start+0x9e>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    5790:	4926      	ldr	r1, [pc, #152]	; (582c <nrfx_clock_start+0xc4>)
    5792:	4824      	ldr	r0, [pc, #144]	; (5824 <nrfx_clock_start+0xbc>)
    5794:	4a24      	ldr	r2, [pc, #144]	; (5828 <nrfx_clock_start+0xc0>)
    5796:	f44f 73d3 	mov.w	r3, #422	; 0x1a6
    579a:	f003 fcfa 	bl	9192 <assert_print>
            break;
    }
}
    579e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            NRFX_ASSERT(0);
    57a2:	4821      	ldr	r0, [pc, #132]	; (5828 <nrfx_clock_start+0xc0>)
    57a4:	f44f 71d3 	mov.w	r1, #422	; 0x1a6
    57a8:	f003 bcec 	b.w	9184 <assert_post_action>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    57ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    57b0:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    57b4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    57b8:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    57bc:	d10b      	bne.n	57d6 <nrfx_clock_start+0x6e>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    57be:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    57c2:	07c9      	lsls	r1, r1, #31
    57c4:	d510      	bpl.n	57e8 <nrfx_clock_start+0x80>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    57c6:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    57ca:	079b      	lsls	r3, r3, #30
    57cc:	d408      	bmi.n	57e0 <nrfx_clock_start+0x78>
    p_reg->INTENSET = mask;
    57ce:	2302      	movs	r3, #2
    57d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    57d4:	e016      	b.n	5804 <nrfx_clock_start+0x9c>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    57d6:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    57da:	2b01      	cmp	r3, #1
    57dc:	d004      	beq.n	57e8 <nrfx_clock_start+0x80>
    if (!is_correct_clk)
    57de:	b11b      	cbz	r3, 57e8 <nrfx_clock_start+0x80>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    57e0:	2000      	movs	r0, #0
    57e2:	f7ff ff05 	bl	55f0 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    57e6:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    57e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    57ec:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    57f0:	2300      	movs	r3, #0
    57f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    57f6:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    57fa:	2302      	movs	r3, #2
    57fc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5800:	2301      	movs	r3, #1
    5802:	6093      	str	r3, [r2, #8]
}
    5804:	bd10      	pop	{r4, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5806:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    580a:	2200      	movs	r2, #0
    580c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    5810:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    5814:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5818:	601c      	str	r4, [r3, #0]
}
    581a:	e7f3      	b.n	5804 <nrfx_clock_start+0x9c>
    581c:	20000c18 	.word	0x20000c18
    5820:	0000b792 	.word	0x0000b792
    5824:	0000a107 	.word	0x0000a107
    5828:	0000b713 	.word	0x0000b713
    582c:	0000a2aa 	.word	0x0000a2aa

00005830 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5830:	4b0a      	ldr	r3, [pc, #40]	; (585c <nrfx_clock_stop+0x2c>)
    5832:	791b      	ldrb	r3, [r3, #4]
{
    5834:	b510      	push	{r4, lr}
    5836:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    5838:	b95b      	cbnz	r3, 5852 <nrfx_clock_stop+0x22>
    583a:	4909      	ldr	r1, [pc, #36]	; (5860 <nrfx_clock_stop+0x30>)
    583c:	4809      	ldr	r0, [pc, #36]	; (5864 <nrfx_clock_stop+0x34>)
    583e:	4a0a      	ldr	r2, [pc, #40]	; (5868 <nrfx_clock_stop+0x38>)
    5840:	f240 13ad 	movw	r3, #429	; 0x1ad
    5844:	f003 fca5 	bl	9192 <assert_print>
    5848:	4807      	ldr	r0, [pc, #28]	; (5868 <nrfx_clock_stop+0x38>)
    584a:	f240 11ad 	movw	r1, #429	; 0x1ad
    584e:	f003 fc99 	bl	9184 <assert_post_action>
    clock_stop(domain);
    5852:	4620      	mov	r0, r4
}
    5854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    clock_stop(domain);
    5858:	f7ff beca 	b.w	55f0 <clock_stop>
    585c:	20000c18 	.word	0x20000c18
    5860:	0000b792 	.word	0x0000b792
    5864:	0000a107 	.word	0x0000a107
    5868:	0000b713 	.word	0x0000b713

0000586c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    586c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5870:	b510      	push	{r4, lr}
    5872:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5876:	b16a      	cbz	r2, 5894 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5878:	2200      	movs	r2, #0
    587a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    587e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5882:	2201      	movs	r2, #1
    5884:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    5888:	4b11      	ldr	r3, [pc, #68]	; (58d0 <nrfx_power_clock_irq_handler+0x64>)
    588a:	7958      	ldrb	r0, [r3, #5]
    588c:	b910      	cbnz	r0, 5894 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    588e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5890:	681b      	ldr	r3, [r3, #0]
    5892:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5898:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    589c:	b172      	cbz	r2, 58bc <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    589e:	2200      	movs	r2, #0
    58a0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    58a4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    58a8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    58ac:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    58b0:	0792      	lsls	r2, r2, #30
    58b2:	d104      	bne.n	58be <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    58b4:	2201      	movs	r2, #1
    58b6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    58ba:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    58bc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    58be:	2202      	movs	r2, #2
    58c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    58c4:	4b02      	ldr	r3, [pc, #8]	; (58d0 <nrfx_power_clock_irq_handler+0x64>)
}
    58c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    58ca:	681b      	ldr	r3, [r3, #0]
    58cc:	2001      	movs	r0, #1
    58ce:	4718      	bx	r3
    58d0:	20000c18 	.word	0x20000c18

000058d4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    58d4:	4b03      	ldr	r3, [pc, #12]	; (58e4 <pin_in_use_by_te+0x10>)
    58d6:	3008      	adds	r0, #8
    58d8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    58dc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    58e0:	4770      	bx	lr
    58e2:	bf00      	nop
    58e4:	200000f4 	.word	0x200000f4

000058e8 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    58e8:	4b04      	ldr	r3, [pc, #16]	; (58fc <pin_has_trigger+0x14>)
    58ea:	3008      	adds	r0, #8
    58ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    58f0:	f010 001c 	ands.w	r0, r0, #28
    58f4:	bf18      	it	ne
    58f6:	2001      	movne	r0, #1
    58f8:	4770      	bx	lr
    58fa:	bf00      	nop
    58fc:	200000f4 	.word	0x200000f4

00005900 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5900:	4b03      	ldr	r3, [pc, #12]	; (5910 <pin_is_output+0x10>)
    5902:	3008      	adds	r0, #8
    5904:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    5908:	f3c0 0040 	ubfx	r0, r0, #1, #1
    590c:	4770      	bx	lr
    590e:	bf00      	nop
    5910:	200000f4 	.word	0x200000f4

00005914 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    5914:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5916:	f100 0308 	add.w	r3, r0, #8
    591a:	4c0c      	ldr	r4, [pc, #48]	; (594c <call_handler+0x38>)
    591c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    5920:	05da      	lsls	r2, r3, #23
{
    5922:	4605      	mov	r5, r0
    5924:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5926:	d507      	bpl.n	5938 <call_handler+0x24>
    5928:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    592c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    5930:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5934:	6852      	ldr	r2, [r2, #4]
    5936:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    5938:	68a3      	ldr	r3, [r4, #8]
    593a:	b12b      	cbz	r3, 5948 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    593c:	68e2      	ldr	r2, [r4, #12]
    593e:	4631      	mov	r1, r6
    5940:	4628      	mov	r0, r5
    }
}
    5942:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5946:	4718      	bx	r3
}
    5948:	bd70      	pop	{r4, r5, r6, pc}
    594a:	bf00      	nop
    594c:	200000f4 	.word	0x200000f4

00005950 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5950:	4a19      	ldr	r2, [pc, #100]	; (59b8 <release_handler+0x68>)
    5952:	3008      	adds	r0, #8
{
    5954:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5956:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    595a:	05d9      	lsls	r1, r3, #23
    595c:	d51d      	bpl.n	599a <release_handler+0x4a>
    595e:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5962:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5966:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    596a:	f102 0410 	add.w	r4, r2, #16
    596e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5970:	f834 3b02 	ldrh.w	r3, [r4], #2
    5974:	f413 7f80 	tst.w	r3, #256	; 0x100
    5978:	d003      	beq.n	5982 <release_handler+0x32>
    597a:	f3c3 2343 	ubfx	r3, r3, #9, #4
    597e:	4299      	cmp	r1, r3
    5980:	d00b      	beq.n	599a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5982:	3001      	adds	r0, #1
    5984:	2830      	cmp	r0, #48	; 0x30
    5986:	d1f3      	bne.n	5970 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5988:	2300      	movs	r3, #0
    598a:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    598e:	480b      	ldr	r0, [pc, #44]	; (59bc <release_handler+0x6c>)
    5990:	f7ff fe0c 	bl	55ac <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    5994:	4b0a      	ldr	r3, [pc, #40]	; (59c0 <release_handler+0x70>)
    5996:	4298      	cmp	r0, r3
    5998:	d100      	bne.n	599c <release_handler+0x4c>
}
    599a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    599c:	4909      	ldr	r1, [pc, #36]	; (59c4 <release_handler+0x74>)
    599e:	480a      	ldr	r0, [pc, #40]	; (59c8 <release_handler+0x78>)
    59a0:	4a0a      	ldr	r2, [pc, #40]	; (59cc <release_handler+0x7c>)
    59a2:	f44f 7399 	mov.w	r3, #306	; 0x132
    59a6:	f003 fbf4 	bl	9192 <assert_print>
}
    59aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    59ae:	4807      	ldr	r0, [pc, #28]	; (59cc <release_handler+0x7c>)
    59b0:	f44f 7199 	mov.w	r1, #306	; 0x132
    59b4:	f003 bbe6 	b.w	9184 <assert_post_action>
    59b8:	200000f4 	.word	0x200000f4
    59bc:	20000168 	.word	0x20000168
    59c0:	0bad0000 	.word	0x0bad0000
    59c4:	0000b814 	.word	0x0000b814
    59c8:	0000a107 	.word	0x0000a107
    59cc:	0000b7b0 	.word	0x0000b7b0

000059d0 <pin_handler_trigger_uninit>:
{
    59d0:	b538      	push	{r3, r4, r5, lr}
    59d2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    59d4:	f7ff ff7e 	bl	58d4 <pin_in_use_by_te>
    59d8:	4c09      	ldr	r4, [pc, #36]	; (5a00 <pin_handler_trigger_uninit+0x30>)
    59da:	f102 0508 	add.w	r5, r2, #8
    59de:	b140      	cbz	r0, 59f2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    59e0:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    59e4:	4907      	ldr	r1, [pc, #28]	; (5a04 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    59e6:	0b5b      	lsrs	r3, r3, #13
    59e8:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    59ec:	2000      	movs	r0, #0
    59ee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    59f2:	4610      	mov	r0, r2
    59f4:	f7ff ffac 	bl	5950 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    59f8:	2300      	movs	r3, #0
    59fa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    59fe:	bd38      	pop	{r3, r4, r5, pc}
    5a00:	200000f4 	.word	0x200000f4
    5a04:	40006000 	.word	0x40006000

00005a08 <nrf_gpio_pin_port_decode>:
{
    5a08:	b510      	push	{r4, lr}
    5a0a:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    5a0c:	6800      	ldr	r0, [r0, #0]
    5a0e:	f003 ff11 	bl	9834 <nrf_gpio_pin_present_check>
    5a12:	b958      	cbnz	r0, 5a2c <nrf_gpio_pin_port_decode+0x24>
    5a14:	4912      	ldr	r1, [pc, #72]	; (5a60 <nrf_gpio_pin_port_decode+0x58>)
    5a16:	4813      	ldr	r0, [pc, #76]	; (5a64 <nrf_gpio_pin_port_decode+0x5c>)
    5a18:	4a13      	ldr	r2, [pc, #76]	; (5a68 <nrf_gpio_pin_port_decode+0x60>)
    5a1a:	f240 2329 	movw	r3, #553	; 0x229
    5a1e:	f003 fbb8 	bl	9192 <assert_print>
    5a22:	4811      	ldr	r0, [pc, #68]	; (5a68 <nrf_gpio_pin_port_decode+0x60>)
    5a24:	f240 2129 	movw	r1, #553	; 0x229
    5a28:	f003 fbac 	bl	9184 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5a2c:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5a2e:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a32:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    5a34:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a36:	d00d      	beq.n	5a54 <nrf_gpio_pin_port_decode+0x4c>
    5a38:	2b01      	cmp	r3, #1
    5a3a:	d00e      	beq.n	5a5a <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    5a3c:	490b      	ldr	r1, [pc, #44]	; (5a6c <nrf_gpio_pin_port_decode+0x64>)
    5a3e:	4809      	ldr	r0, [pc, #36]	; (5a64 <nrf_gpio_pin_port_decode+0x5c>)
    5a40:	4a09      	ldr	r2, [pc, #36]	; (5a68 <nrf_gpio_pin_port_decode+0x60>)
    5a42:	f240 232e 	movw	r3, #558	; 0x22e
    5a46:	f003 fba4 	bl	9192 <assert_print>
    5a4a:	4807      	ldr	r0, [pc, #28]	; (5a68 <nrf_gpio_pin_port_decode+0x60>)
    5a4c:	f240 212e 	movw	r1, #558	; 0x22e
    5a50:	f003 fb98 	bl	9184 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5a54:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    5a58:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    5a5a:	4805      	ldr	r0, [pc, #20]	; (5a70 <nrf_gpio_pin_port_decode+0x68>)
    5a5c:	e7fc      	b.n	5a58 <nrf_gpio_pin_port_decode+0x50>
    5a5e:	bf00      	nop
    5a60:	0000b670 	.word	0x0000b670
    5a64:	0000a107 	.word	0x0000a107
    5a68:	0000b63d 	.word	0x0000b63d
    5a6c:	0000a2aa 	.word	0x0000a2aa
    5a70:	50000300 	.word	0x50000300

00005a74 <nrfx_gpiote_input_configure>:
{
    5a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a76:	4604      	mov	r4, r0
    5a78:	b085      	sub	sp, #20
    5a7a:	4617      	mov	r7, r2
    5a7c:	461d      	mov	r5, r3
    if (p_input_config)
    5a7e:	b1f1      	cbz	r1, 5abe <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    5a80:	f003 fee9 	bl	9856 <pin_is_task_output>
    5a84:	b110      	cbz	r0, 5a8c <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    5a86:	484d      	ldr	r0, [pc, #308]	; (5bbc <nrfx_gpiote_input_configure+0x148>)
}
    5a88:	b005      	add	sp, #20
    5a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5a8c:	460b      	mov	r3, r1
    5a8e:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    5a92:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    5a96:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    5a9a:	f10d 020f 	add.w	r2, sp, #15
    5a9e:	f10d 010e 	add.w	r1, sp, #14
    5aa2:	4620      	mov	r0, r4
    5aa4:	f003 fee6 	bl	9874 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5aa8:	4a45      	ldr	r2, [pc, #276]	; (5bc0 <nrfx_gpiote_input_configure+0x14c>)
    5aaa:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5aae:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5ab2:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5ab6:	f043 0301 	orr.w	r3, r3, #1
    5aba:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    5abe:	b197      	cbz	r7, 5ae6 <nrfx_gpiote_input_configure+0x72>
        if (pin_is_output(pin))
    5ac0:	4620      	mov	r0, r4
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5ac2:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5ac4:	687a      	ldr	r2, [r7, #4]
        if (pin_is_output(pin))
    5ac6:	f7ff ff1b 	bl	5900 <pin_is_output>
    5aca:	b180      	cbz	r0, 5aee <nrfx_gpiote_input_configure+0x7a>
            if (use_evt)
    5acc:	2a00      	cmp	r2, #0
    5ace:	d1da      	bne.n	5a86 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5ad0:	4a3b      	ldr	r2, [pc, #236]	; (5bc0 <nrfx_gpiote_input_configure+0x14c>)
    5ad2:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5ad6:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5ada:	f023 031c 	bic.w	r3, r3, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5ade:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    5ae2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_handler_config)
    5ae6:	2d00      	cmp	r5, #0
    5ae8:	d13d      	bne.n	5b66 <nrfx_gpiote_input_configure+0xf2>
    return NRFX_SUCCESS;
    5aea:	4836      	ldr	r0, [pc, #216]	; (5bc4 <nrfx_gpiote_input_configure+0x150>)
    5aec:	e7cc      	b.n	5a88 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5aee:	4f34      	ldr	r7, [pc, #208]	; (5bc0 <nrfx_gpiote_input_configure+0x14c>)
    5af0:	f104 0c08 	add.w	ip, r4, #8
    5af4:	f837 101c 	ldrh.w	r1, [r7, ip, lsl #1]
    5af8:	f021 0120 	bic.w	r1, r1, #32
    5afc:	04c9      	lsls	r1, r1, #19
    5afe:	0cc9      	lsrs	r1, r1, #19
    5b00:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
            if (use_evt)
    5b04:	2a00      	cmp	r2, #0
    5b06:	d0e3      	beq.n	5ad0 <nrfx_gpiote_input_configure+0x5c>
                if (!edge)
    5b08:	2e03      	cmp	r6, #3
    5b0a:	d8bc      	bhi.n	5a86 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5b0c:	7813      	ldrb	r3, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5b0e:	b92e      	cbnz	r6, 5b1c <nrfx_gpiote_input_configure+0xa8>
    5b10:	4a2d      	ldr	r2, [pc, #180]	; (5bc8 <nrfx_gpiote_input_configure+0x154>)
    5b12:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    5b16:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    5b1a:	e7d9      	b.n	5ad0 <nrfx_gpiote_input_configure+0x5c>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5b1c:	009a      	lsls	r2, r3, #2
    5b1e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5b22:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5b26:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    5b2a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5b2e:	f020 0003 	bic.w	r0, r0, #3
    5b32:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5b36:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5b3a:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
    5b3e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5b42:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b46:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5b4a:	0220      	lsls	r0, r4, #8
    5b4c:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    5b50:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    5b54:	ea40 000e 	orr.w	r0, r0, lr
    5b58:	f041 0120 	orr.w	r1, r1, #32
    5b5c:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
    5b60:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5b64:	e7b4      	b.n	5ad0 <nrfx_gpiote_input_configure+0x5c>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5b66:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5b6a:	4620      	mov	r0, r4
    5b6c:	f7ff fef0 	bl	5950 <release_handler>
    if (!handler)
    5b70:	2e00      	cmp	r6, #0
    5b72:	d0ba      	beq.n	5aea <nrfx_gpiote_input_configure+0x76>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5b74:	4d12      	ldr	r5, [pc, #72]	; (5bc0 <nrfx_gpiote_input_configure+0x14c>)
    5b76:	682b      	ldr	r3, [r5, #0]
    5b78:	429e      	cmp	r6, r3
    5b7a:	d104      	bne.n	5b86 <nrfx_gpiote_input_configure+0x112>
    5b7c:	686b      	ldr	r3, [r5, #4]
    5b7e:	429f      	cmp	r7, r3
    5b80:	d101      	bne.n	5b86 <nrfx_gpiote_input_configure+0x112>
    5b82:	2200      	movs	r2, #0
    5b84:	e00a      	b.n	5b9c <nrfx_gpiote_input_configure+0x128>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5b86:	4811      	ldr	r0, [pc, #68]	; (5bcc <nrfx_gpiote_input_configure+0x158>)
    5b88:	f10d 010f 	add.w	r1, sp, #15
    5b8c:	f7ff fce8 	bl	5560 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5b90:	4b0c      	ldr	r3, [pc, #48]	; (5bc4 <nrfx_gpiote_input_configure+0x150>)
    5b92:	4298      	cmp	r0, r3
    5b94:	f47f af78 	bne.w	5a88 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    5b98:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    5b9c:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5ba0:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5ba4:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5ba6:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5ba8:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5bac:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5bb4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    5bb8:	e797      	b.n	5aea <nrfx_gpiote_input_configure+0x76>
    5bba:	bf00      	nop
    5bbc:	0bad0004 	.word	0x0bad0004
    5bc0:	200000f4 	.word	0x200000f4
    5bc4:	0bad0000 	.word	0x0bad0000
    5bc8:	40006000 	.word	0x40006000
    5bcc:	20000168 	.word	0x20000168

00005bd0 <nrfx_gpiote_output_configure>:
{
    5bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5bd2:	4604      	mov	r4, r0
    5bd4:	b085      	sub	sp, #20
    5bd6:	4615      	mov	r5, r2
    if (p_config)
    5bd8:	b321      	cbz	r1, 5c24 <nrfx_gpiote_output_configure+0x54>
    return !pin_is_output(pin);
    5bda:	f7ff fe91 	bl	5900 <pin_is_output>
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5bde:	b920      	cbnz	r0, 5bea <nrfx_gpiote_output_configure+0x1a>
    5be0:	4620      	mov	r0, r4
    5be2:	f7ff fe77 	bl	58d4 <pin_in_use_by_te>
    5be6:	2800      	cmp	r0, #0
    5be8:	d15e      	bne.n	5ca8 <nrfx_gpiote_output_configure+0xd8>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5bea:	4620      	mov	r0, r4
    5bec:	f7ff fe7c 	bl	58e8 <pin_has_trigger>
    5bf0:	b110      	cbz	r0, 5bf8 <nrfx_gpiote_output_configure+0x28>
    5bf2:	784b      	ldrb	r3, [r1, #1]
    5bf4:	2b01      	cmp	r3, #1
    5bf6:	d057      	beq.n	5ca8 <nrfx_gpiote_output_configure+0xd8>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    5bf8:	2301      	movs	r3, #1
    5bfa:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    5bfe:	2300      	movs	r3, #0
    5c00:	e9cd 1300 	strd	r1, r3, [sp]
    5c04:	1c4a      	adds	r2, r1, #1
    5c06:	1c8b      	adds	r3, r1, #2
    5c08:	4620      	mov	r0, r4
    5c0a:	f10d 010f 	add.w	r1, sp, #15
    5c0e:	f003 fe31 	bl	9874 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5c12:	4a26      	ldr	r2, [pc, #152]	; (5cac <nrfx_gpiote_output_configure+0xdc>)
    5c14:	f104 0108 	add.w	r1, r4, #8
    5c18:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    5c1c:	f043 0303 	orr.w	r3, r3, #3
    5c20:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    5c24:	b915      	cbnz	r5, 5c2c <nrfx_gpiote_output_configure+0x5c>
    return NRFX_SUCCESS;
    5c26:	4822      	ldr	r0, [pc, #136]	; (5cb0 <nrfx_gpiote_output_configure+0xe0>)
}
    5c28:	b005      	add	sp, #20
    5c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return !pin_is_output(pin);
    5c2c:	4620      	mov	r0, r4
    5c2e:	f7ff fe67 	bl	5900 <pin_is_output>
        if (pin_is_input(pin))
    5c32:	b3c8      	cbz	r0, 5ca8 <nrfx_gpiote_output_configure+0xd8>
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5c34:	4e1d      	ldr	r6, [pc, #116]	; (5cac <nrfx_gpiote_output_configure+0xdc>)
        uint32_t ch = p_task_config->task_ch;
    5c36:	f895 c000 	ldrb.w	ip, [r5]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5c3a:	f104 0708 	add.w	r7, r4, #8
    5c3e:	4661      	mov	r1, ip
    5c40:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    5c44:	0089      	lsls	r1, r1, #2
    5c46:	f020 0020 	bic.w	r0, r0, #32
    5c4a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5c4e:	04c0      	lsls	r0, r0, #19
    5c50:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5c54:	0cc0      	lsrs	r0, r0, #19
    5c56:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    p_reg->CONFIG[idx] = 0;
    5c5a:	2300      	movs	r3, #0
    5c5c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5c60:	786a      	ldrb	r2, [r5, #1]
    5c62:	2a00      	cmp	r2, #0
    5c64:	d0df      	beq.n	5c26 <nrfx_gpiote_output_configure+0x56>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5c66:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    5c6a:	78ad      	ldrb	r5, [r5, #2]
    5c6c:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    5c70:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5c74:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c78:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5c7c:	0223      	lsls	r3, r4, #8
    5c7e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5c82:	0412      	lsls	r2, r2, #16
    5c84:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c88:	ea43 030e 	orr.w	r3, r3, lr
    5c8c:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5c8e:	052a      	lsls	r2, r5, #20
    5c90:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5c94:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c98:	4313      	orrs	r3, r2
    5c9a:	f040 0020 	orr.w	r0, r0, #32
    5c9e:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5ca2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5ca6:	e7be      	b.n	5c26 <nrfx_gpiote_output_configure+0x56>
            return NRFX_ERROR_INVALID_PARAM;
    5ca8:	4802      	ldr	r0, [pc, #8]	; (5cb4 <nrfx_gpiote_output_configure+0xe4>)
    5caa:	e7bd      	b.n	5c28 <nrfx_gpiote_output_configure+0x58>
    5cac:	200000f4 	.word	0x200000f4
    5cb0:	0bad0000 	.word	0x0bad0000
    5cb4:	0bad0004 	.word	0x0bad0004

00005cb8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5cb8:	4b01      	ldr	r3, [pc, #4]	; (5cc0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5cba:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5cbe:	4770      	bx	lr
    5cc0:	200000f4 	.word	0x200000f4

00005cc4 <nrfx_gpiote_channel_get>:
{
    5cc4:	b538      	push	{r3, r4, r5, lr}
    5cc6:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    5cc8:	460d      	mov	r5, r1
    5cca:	b959      	cbnz	r1, 5ce4 <nrfx_gpiote_channel_get+0x20>
    5ccc:	490c      	ldr	r1, [pc, #48]	; (5d00 <nrfx_gpiote_channel_get+0x3c>)
    5cce:	480d      	ldr	r0, [pc, #52]	; (5d04 <nrfx_gpiote_channel_get+0x40>)
    5cd0:	4a0d      	ldr	r2, [pc, #52]	; (5d08 <nrfx_gpiote_channel_get+0x44>)
    5cd2:	f240 2335 	movw	r3, #565	; 0x235
    5cd6:	f003 fa5c 	bl	9192 <assert_print>
    5cda:	480b      	ldr	r0, [pc, #44]	; (5d08 <nrfx_gpiote_channel_get+0x44>)
    5cdc:	f240 2135 	movw	r1, #565	; 0x235
    5ce0:	f003 fa50 	bl	9184 <assert_post_action>
    if (pin_in_use_by_te(pin))
    5ce4:	4620      	mov	r0, r4
    5ce6:	f7ff fdf5 	bl	58d4 <pin_in_use_by_te>
    5cea:	b138      	cbz	r0, 5cfc <nrfx_gpiote_channel_get+0x38>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5cec:	4b07      	ldr	r3, [pc, #28]	; (5d0c <nrfx_gpiote_channel_get+0x48>)
        return NRFX_SUCCESS;
    5cee:	4808      	ldr	r0, [pc, #32]	; (5d10 <nrfx_gpiote_channel_get+0x4c>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5cf0:	3408      	adds	r4, #8
    5cf2:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    5cf6:	0b5b      	lsrs	r3, r3, #13
    5cf8:	702b      	strb	r3, [r5, #0]
}
    5cfa:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5cfc:	4805      	ldr	r0, [pc, #20]	; (5d14 <nrfx_gpiote_channel_get+0x50>)
    5cfe:	e7fc      	b.n	5cfa <nrfx_gpiote_channel_get+0x36>
    5d00:	0000b828 	.word	0x0000b828
    5d04:	0000a107 	.word	0x0000a107
    5d08:	0000b7b0 	.word	0x0000b7b0
    5d0c:	200000f4 	.word	0x200000f4
    5d10:	0bad0000 	.word	0x0bad0000
    5d14:	0bad0004 	.word	0x0bad0004

00005d18 <nrfx_gpiote_init>:
{
    5d18:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5d1a:	4c0f      	ldr	r4, [pc, #60]	; (5d58 <nrfx_gpiote_init+0x40>)
    5d1c:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    5d20:	b9bd      	cbnz	r5, 5d52 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5d22:	2260      	movs	r2, #96	; 0x60
    5d24:	4629      	mov	r1, r5
    5d26:	f104 0010 	add.w	r0, r4, #16
    5d2a:	f003 fb20 	bl	936e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5d2e:	2006      	movs	r0, #6
    5d30:	f7fd f9ec 	bl	310c <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5d34:	4b09      	ldr	r3, [pc, #36]	; (5d5c <nrfx_gpiote_init+0x44>)
    return err_code;
    5d36:	480a      	ldr	r0, [pc, #40]	; (5d60 <nrfx_gpiote_init+0x48>)
    5d38:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5d3c:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5d40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5d44:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5d48:	2301      	movs	r3, #1
    5d4a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5d4e:	6763      	str	r3, [r4, #116]	; 0x74
}
    5d50:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5d52:	4804      	ldr	r0, [pc, #16]	; (5d64 <nrfx_gpiote_init+0x4c>)
    5d54:	e7fc      	b.n	5d50 <nrfx_gpiote_init+0x38>
    5d56:	bf00      	nop
    5d58:	200000f4 	.word	0x200000f4
    5d5c:	40006000 	.word	0x40006000
    5d60:	0bad0000 	.word	0x0bad0000
    5d64:	0bad0005 	.word	0x0bad0005

00005d68 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5d68:	4b03      	ldr	r3, [pc, #12]	; (5d78 <nrfx_gpiote_is_init+0x10>)
    5d6a:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    5d6e:	3800      	subs	r0, #0
    5d70:	bf18      	it	ne
    5d72:	2001      	movne	r0, #1
    5d74:	4770      	bx	lr
    5d76:	bf00      	nop
    5d78:	200000f4 	.word	0x200000f4

00005d7c <nrfx_gpiote_channel_free>:
{
    5d7c:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5d7e:	4801      	ldr	r0, [pc, #4]	; (5d84 <nrfx_gpiote_channel_free+0x8>)
    5d80:	f7ff bc14 	b.w	55ac <nrfx_flag32_free>
    5d84:	20000164 	.word	0x20000164

00005d88 <nrfx_gpiote_channel_alloc>:
{
    5d88:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5d8a:	4801      	ldr	r0, [pc, #4]	; (5d90 <nrfx_gpiote_channel_alloc+0x8>)
    5d8c:	f7ff bbe8 	b.w	5560 <nrfx_flag32_alloc>
    5d90:	20000164 	.word	0x20000164

00005d94 <nrfx_gpiote_trigger_enable>:
{
    5d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5d96:	4604      	mov	r4, r0
    5d98:	460d      	mov	r5, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    5d9a:	f7ff fda5 	bl	58e8 <pin_has_trigger>
    5d9e:	b958      	cbnz	r0, 5db8 <nrfx_gpiote_trigger_enable+0x24>
    5da0:	4930      	ldr	r1, [pc, #192]	; (5e64 <nrfx_gpiote_trigger_enable+0xd0>)
    5da2:	4831      	ldr	r0, [pc, #196]	; (5e68 <nrfx_gpiote_trigger_enable+0xd4>)
    5da4:	4a31      	ldr	r2, [pc, #196]	; (5e6c <nrfx_gpiote_trigger_enable+0xd8>)
    5da6:	f240 33df 	movw	r3, #991	; 0x3df
    5daa:	f003 f9f2 	bl	9192 <assert_print>
    5dae:	482f      	ldr	r0, [pc, #188]	; (5e6c <nrfx_gpiote_trigger_enable+0xd8>)
    5db0:	f240 31df 	movw	r1, #991	; 0x3df
    5db4:	f003 f9e6 	bl	9184 <assert_post_action>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5db8:	4620      	mov	r0, r4
    5dba:	f7ff fd8b 	bl	58d4 <pin_in_use_by_te>
    5dbe:	4e2c      	ldr	r6, [pc, #176]	; (5e70 <nrfx_gpiote_trigger_enable+0xdc>)
    5dc0:	f104 0708 	add.w	r7, r4, #8
    5dc4:	b318      	cbz	r0, 5e0e <nrfx_gpiote_trigger_enable+0x7a>
    return !pin_is_output(pin);
    5dc6:	4620      	mov	r0, r4
    5dc8:	f7ff fd9a 	bl	5900 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5dcc:	4602      	mov	r2, r0
    5dce:	b9f0      	cbnz	r0, 5e0e <nrfx_gpiote_trigger_enable+0x7a>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5dd0:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
    5dd4:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    5dd6:	4608      	mov	r0, r1
    5dd8:	f003 fd48 	bl	986c <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    5ddc:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    5de0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5de4:	601a      	str	r2, [r3, #0]
    5de6:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5de8:	008b      	lsls	r3, r1, #2
    5dea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5dee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5df2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5df6:	f042 0201 	orr.w	r2, r2, #1
    5dfa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    5dfe:	b125      	cbz	r5, 5e0a <nrfx_gpiote_trigger_enable+0x76>
    p_reg->INTENSET = mask;
    5e00:	4a1c      	ldr	r2, [pc, #112]	; (5e74 <nrfx_gpiote_trigger_enable+0xe0>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5e02:	2301      	movs	r3, #1
    5e04:	408b      	lsls	r3, r1
    5e06:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5e0a:	b003      	add	sp, #12
    5e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    5e0e:	b95d      	cbnz	r5, 5e28 <nrfx_gpiote_trigger_enable+0x94>
    5e10:	4919      	ldr	r1, [pc, #100]	; (5e78 <nrfx_gpiote_trigger_enable+0xe4>)
    5e12:	4815      	ldr	r0, [pc, #84]	; (5e68 <nrfx_gpiote_trigger_enable+0xd4>)
    5e14:	4a15      	ldr	r2, [pc, #84]	; (5e6c <nrfx_gpiote_trigger_enable+0xd8>)
    5e16:	f240 33ee 	movw	r3, #1006	; 0x3ee
    5e1a:	f003 f9ba 	bl	9192 <assert_print>
    5e1e:	4813      	ldr	r0, [pc, #76]	; (5e6c <nrfx_gpiote_trigger_enable+0xd8>)
    5e20:	f240 31ee 	movw	r1, #1006	; 0x3ee
    5e24:	f003 f9ae 	bl	9184 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5e28:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    5e2c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5e30:	2b04      	cmp	r3, #4
    5e32:	d012      	beq.n	5e5a <nrfx_gpiote_trigger_enable+0xc6>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5e34:	2b05      	cmp	r3, #5
    5e36:	d012      	beq.n	5e5e <nrfx_gpiote_trigger_enable+0xca>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5e38:	a801      	add	r0, sp, #4
    5e3a:	9401      	str	r4, [sp, #4]
    5e3c:	f7ff fde4 	bl	5a08 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5e40:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5e42:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5e46:	40d9      	lsrs	r1, r3
    5e48:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5e4c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5e4e:	4620      	mov	r0, r4
}
    5e50:	b003      	add	sp, #12
    5e52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5e56:	f003 bd58 	b.w	990a <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5e5a:	2103      	movs	r1, #3
    5e5c:	e7f7      	b.n	5e4e <nrfx_gpiote_trigger_enable+0xba>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5e5e:	2102      	movs	r1, #2
    5e60:	e7f5      	b.n	5e4e <nrfx_gpiote_trigger_enable+0xba>
    5e62:	bf00      	nop
    5e64:	0000b832 	.word	0x0000b832
    5e68:	0000a107 	.word	0x0000a107
    5e6c:	0000b7b0 	.word	0x0000b7b0
    5e70:	200000f4 	.word	0x200000f4
    5e74:	40006000 	.word	0x40006000
    5e78:	0000b847 	.word	0x0000b847

00005e7c <nrfx_gpiote_trigger_disable>:
{
    5e7c:	b508      	push	{r3, lr}
    5e7e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5e80:	f7ff fd28 	bl	58d4 <pin_in_use_by_te>
    5e84:	b1c8      	cbz	r0, 5eba <nrfx_gpiote_trigger_disable+0x3e>
    return !pin_is_output(pin);
    5e86:	4610      	mov	r0, r2
    5e88:	f7ff fd3a 	bl	5900 <pin_is_output>
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5e8c:	b9a8      	cbnz	r0, 5eba <nrfx_gpiote_trigger_disable+0x3e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5e8e:	3208      	adds	r2, #8
    5e90:	4b0d      	ldr	r3, [pc, #52]	; (5ec8 <nrfx_gpiote_trigger_disable+0x4c>)
    p_reg->INTENCLR = mask;
    5e92:	490e      	ldr	r1, [pc, #56]	; (5ecc <nrfx_gpiote_trigger_disable+0x50>)
    5e94:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5e98:	2201      	movs	r2, #1
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5e9a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5e9c:	409a      	lsls	r2, r3
    5e9e:	009b      	lsls	r3, r3, #2
    5ea0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5ea4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5ea8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5eac:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5eb0:	f022 0203 	bic.w	r2, r2, #3
    5eb4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5eb8:	bd08      	pop	{r3, pc}
    5eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5ebe:	2100      	movs	r1, #0
    5ec0:	4610      	mov	r0, r2
    5ec2:	f003 bd22 	b.w	990a <nrf_gpio_cfg_sense_set>
    5ec6:	bf00      	nop
    5ec8:	200000f4 	.word	0x200000f4
    5ecc:	40006000 	.word	0x40006000

00005ed0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5ed0:	4b0e      	ldr	r3, [pc, #56]	; (5f0c <nrfx_gpiote_pin_uninit+0x3c>)
    5ed2:	f100 0208 	add.w	r2, r0, #8
{
    5ed6:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5ed8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5edc:	07db      	lsls	r3, r3, #31
{
    5ede:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5ee0:	d511      	bpl.n	5f06 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    5ee2:	f7ff ffcb 	bl	5e7c <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5ee6:	4620      	mov	r0, r4
    5ee8:	f7ff fd72 	bl	59d0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5eec:	a801      	add	r0, sp, #4
    5eee:	9401      	str	r4, [sp, #4]
    5ef0:	f7ff fd8a 	bl	5a08 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5ef4:	9b01      	ldr	r3, [sp, #4]
    5ef6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5efa:	2202      	movs	r2, #2
    5efc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    5f00:	4803      	ldr	r0, [pc, #12]	; (5f10 <nrfx_gpiote_pin_uninit+0x40>)
}
    5f02:	b002      	add	sp, #8
    5f04:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5f06:	4803      	ldr	r0, [pc, #12]	; (5f14 <nrfx_gpiote_pin_uninit+0x44>)
    5f08:	e7fb      	b.n	5f02 <nrfx_gpiote_pin_uninit+0x32>
    5f0a:	bf00      	nop
    5f0c:	200000f4 	.word	0x200000f4
    5f10:	0bad0000 	.word	0x0bad0000
    5f14:	0bad0004 	.word	0x0bad0004

00005f18 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f1c:	4b65      	ldr	r3, [pc, #404]	; (60b4 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    5f1e:	4866      	ldr	r0, [pc, #408]	; (60b8 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5f20:	4966      	ldr	r1, [pc, #408]	; (60bc <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    5f22:	2600      	movs	r6, #0
{
    5f24:	b087      	sub	sp, #28
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5f26:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5f28:	4634      	mov	r4, r6
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f2a:	681d      	ldr	r5, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5f2c:	b135      	cbz	r5, 5f3c <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    5f2e:	f8d0 5304 	ldr.w	r5, [r0, #772]	; 0x304
    5f32:	4215      	tst	r5, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5f34:	bf1e      	ittt	ne
    5f36:	601c      	strne	r4, [r3, #0]
    5f38:	681d      	ldrne	r5, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5f3a:	4316      	orrne	r6, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5f3c:	3304      	adds	r3, #4
    5f3e:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5f40:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5f44:	d1f1      	bne.n	5f2a <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5f46:	f8df 8170 	ldr.w	r8, [pc, #368]	; 60b8 <nrfx_gpiote_irq_handler+0x1a0>
    5f4a:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5f4e:	2b00      	cmp	r3, #0
    5f50:	f000 8093 	beq.w	607a <nrfx_gpiote_irq_handler+0x162>
        *p_masks = gpio_regs[i]->LATCH;
    5f54:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5f58:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5f5c:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    5f5e:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5f62:	f8d3 2820 	ldr.w	r2, [r3, #2080]	; 0x820
    5f66:	9205      	str	r2, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    5f68:	f8c3 2820 	str.w	r2, [r3, #2080]	; 0x820
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5f6c:	2700      	movs	r7, #0
            while (latch[i])
    5f6e:	f10d 0910 	add.w	r9, sp, #16
    5f72:	017b      	lsls	r3, r7, #5
    5f74:	9300      	str	r3, [sp, #0]
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5f76:	f04f 0a01 	mov.w	sl, #1
    5f7a:	e04b      	b.n	6014 <nrfx_gpiote_irq_handler+0xfc>
                pin += 32 * i;
    5f7c:	9b00      	ldr	r3, [sp, #0]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f7e:	4a50      	ldr	r2, [pc, #320]	; (60c0 <nrfx_gpiote_irq_handler+0x1a8>)
                uint32_t pin = NRF_CTZ(latch[i]);
    5f80:	fa94 f4a4 	rbit	r4, r4
    5f84:	fab4 f484 	clz	r4, r4
                pin += 32 * i;
    5f88:	441c      	add	r4, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f8a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5f8e:	08e0      	lsrs	r0, r4, #3
    5f90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    5f94:	9403      	str	r4, [sp, #12]
    bit = BITMASK_RELBIT_GET(bit);
    5f96:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5f9a:	fa0a fc02 	lsl.w	ip, sl, r2
    5f9e:	f819 2000 	ldrb.w	r2, [r9, r0]
    5fa2:	ea22 020c 	bic.w	r2, r2, ip
    5fa6:	0899      	lsrs	r1, r3, #2
    5fa8:	f809 2000 	strb.w	r2, [r9, r0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5fac:	a803      	add	r0, sp, #12
    5fae:	f3c3 0582 	ubfx	r5, r3, #2, #3
    5fb2:	9101      	str	r1, [sp, #4]
    5fb4:	f7ff fd28 	bl	5a08 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5fb8:	9a03      	ldr	r2, [sp, #12]
    if (is_level(trigger))
    5fba:	9901      	ldr	r1, [sp, #4]
    5fbc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    5fc0:	074b      	lsls	r3, r1, #29
    5fc2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5fc6:	46ab      	mov	fp, r5
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5fc8:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    5fcc:	d529      	bpl.n	6022 <nrfx_gpiote_irq_handler+0x10a>
        call_handler(pin, trigger);
    5fce:	4659      	mov	r1, fp
    5fd0:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5fd2:	b2d5      	uxtb	r5, r2
    5fd4:	f7ff fc9e 	bl	5914 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5fd8:	a803      	add	r0, sp, #12
    5fda:	9403      	str	r4, [sp, #12]
    5fdc:	f7ff fd14 	bl	5a08 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5fe0:	9b03      	ldr	r3, [sp, #12]
    5fe2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5fe6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5fea:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5fee:	429d      	cmp	r5, r3
    5ff0:	d107      	bne.n	6002 <nrfx_gpiote_irq_handler+0xea>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5ff2:	2100      	movs	r1, #0
    5ff4:	4620      	mov	r0, r4
    5ff6:	f003 fc88 	bl	990a <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5ffa:	4629      	mov	r1, r5
    5ffc:	4620      	mov	r0, r4
    5ffe:	f003 fc84 	bl	990a <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    6002:	a803      	add	r0, sp, #12
    6004:	9403      	str	r4, [sp, #12]
    6006:	f7ff fcff 	bl	5a08 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    600a:	9b03      	ldr	r3, [sp, #12]
    600c:	fa0a f303 	lsl.w	r3, sl, r3
    6010:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
            while (latch[i])
    6014:	f859 4027 	ldr.w	r4, [r9, r7, lsl #2]
    6018:	2c00      	cmp	r4, #0
    601a:	d1af      	bne.n	5f7c <nrfx_gpiote_irq_handler+0x64>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    601c:	b9cf      	cbnz	r7, 6052 <nrfx_gpiote_irq_handler+0x13a>
    601e:	2701      	movs	r7, #1
    6020:	e7a7      	b.n	5f72 <nrfx_gpiote_irq_handler+0x5a>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6022:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6024:	bf0c      	ite	eq
    6026:	2103      	moveq	r1, #3
    6028:	2102      	movne	r1, #2
    602a:	4620      	mov	r0, r4
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    602c:	9201      	str	r2, [sp, #4]
        nrf_gpio_cfg_sense_set(pin, next_sense);
    602e:	f003 fc6c 	bl	990a <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6032:	2d03      	cmp	r5, #3
    6034:	d004      	beq.n	6040 <nrfx_gpiote_irq_handler+0x128>
    6036:	9a01      	ldr	r2, [sp, #4]
    6038:	2a02      	cmp	r2, #2
    603a:	d106      	bne.n	604a <nrfx_gpiote_irq_handler+0x132>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    603c:	2d01      	cmp	r5, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    603e:	d1e0      	bne.n	6002 <nrfx_gpiote_irq_handler+0xea>
            call_handler(pin, trigger);
    6040:	4659      	mov	r1, fp
    6042:	4620      	mov	r0, r4
    6044:	f7ff fc66 	bl	5914 <call_handler>
    6048:	e7db      	b.n	6002 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    604a:	2a03      	cmp	r2, #3
    604c:	d1d9      	bne.n	6002 <nrfx_gpiote_irq_handler+0xea>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    604e:	2d02      	cmp	r5, #2
    6050:	e7f5      	b.n	603e <nrfx_gpiote_irq_handler+0x126>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6052:	f8c8 417c 	str.w	r4, [r8, #380]	; 0x17c
    6056:	f8d8 317c 	ldr.w	r3, [r8, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    605a:	491a      	ldr	r1, [pc, #104]	; (60c4 <nrfx_gpiote_irq_handler+0x1ac>)
    605c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6060:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    6064:	9204      	str	r2, [sp, #16]
        gpio_regs[i]->LATCH = *p_masks;
    6066:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    606a:	f8d1 3520 	ldr.w	r3, [r1, #1312]	; 0x520
    606e:	9305      	str	r3, [sp, #20]
        gpio_regs[i]->LATCH = *p_masks;
    6070:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    6074:	4313      	orrs	r3, r2
    6076:	f47f af79 	bne.w	5f6c <nrfx_gpiote_irq_handler+0x54>
        mask &= ~NRFX_BIT(ch);
    607a:	2401      	movs	r4, #1
    while (mask)
    607c:	b916      	cbnz	r6, 6084 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    607e:	b007      	add	sp, #28
    6080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        uint32_t ch = NRF_CTZ(mask);
    6084:	fa96 f3a6 	rbit	r3, r6
    6088:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    608c:	fa04 f203 	lsl.w	r2, r4, r3
    6090:	009b      	lsls	r3, r3, #2
    6092:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6096:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    609a:	ea26 0602 	bic.w	r6, r6, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    609e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    60a2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    60a6:	f3c0 2005 	ubfx	r0, r0, #8, #6
    60aa:	f3c1 4101 	ubfx	r1, r1, #16, #2
    60ae:	f7ff fc31 	bl	5914 <call_handler>
    60b2:	e7e3      	b.n	607c <nrfx_gpiote_irq_handler+0x164>
    60b4:	40006100 	.word	0x40006100
    60b8:	40006000 	.word	0x40006000
    60bc:	40006120 	.word	0x40006120
    60c0:	200000f4 	.word	0x200000f4
    60c4:	50000300 	.word	0x50000300

000060c8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    60c8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    60ca:	4801      	ldr	r0, [pc, #4]	; (60d0 <nrfx_ppi_channel_alloc+0x8>)
    60cc:	f7ff ba48 	b.w	5560 <nrfx_flag32_alloc>
    60d0:	20000170 	.word	0x20000170

000060d4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    60d4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    60d6:	4c11      	ldr	r4, [pc, #68]	; (611c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    60d8:	4a11      	ldr	r2, [pc, #68]	; (6120 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    60da:	4912      	ldr	r1, [pc, #72]	; (6124 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    60dc:	2303      	movs	r3, #3
    60de:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    60e0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    60e2:	4b11      	ldr	r3, [pc, #68]	; (6128 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    60e4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    60e6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    60e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    60ec:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    60ee:	2300      	movs	r3, #0
    60f0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    60f2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    60f4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    60f6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    60f8:	4a0c      	ldr	r2, [pc, #48]	; (612c <_DoInit+0x58>)
    60fa:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    60fc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    60fe:	2210      	movs	r2, #16
    6100:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    6102:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    6104:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    6106:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    6108:	f003 f900 	bl	930c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    610c:	4908      	ldr	r1, [pc, #32]	; (6130 <_DoInit+0x5c>)
    610e:	4620      	mov	r0, r4
    6110:	f003 f8fc 	bl	930c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    6114:	2320      	movs	r3, #32
    6116:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    6118:	bd10      	pop	{r4, pc}
    611a:	bf00      	nop
    611c:	20000c20 	.word	0x20000c20
    6120:	0000b852 	.word	0x0000b852
    6124:	0000b85b 	.word	0x0000b85b
    6128:	20000f06 	.word	0x20000f06
    612c:	20000ef6 	.word	0x20000ef6
    6130:	0000b85f 	.word	0x0000b85f

00006134 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6134:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    6138:	4f23      	ldr	r7, [pc, #140]	; (61c8 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    613a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    613e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    6140:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6144:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    6146:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6148:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    614a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    614c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    614e:	d834      	bhi.n	61ba <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    6150:	f8d2 a020 	ldr.w	sl, [r2, #32]
    6154:	ebaa 0905 	sub.w	r9, sl, r5
    6158:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
    if (Avail >= NumBytes) {                            // Case 1)?
    615c:	4294      	cmp	r4, r2
    615e:	d811      	bhi.n	6184 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6160:	f04f 0918 	mov.w	r9, #24
    6164:	fb06 9309 	mla	r3, r6, r9, r9
    6168:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    616a:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    616c:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    616e:	4641      	mov	r1, r8
    6170:	4428      	add	r0, r5
    6172:	f003 f8f1 	bl	9358 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    6176:	fb09 7606 	mla	r6, r9, r6, r7
    617a:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    617c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    617e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    6180:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    6184:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6186:	429c      	cmp	r4, r3
    6188:	d81b      	bhi.n	61c2 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    618a:	fb00 bb0b 	mla	fp, r0, fp, fp
    618e:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    6190:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6192:	f8db 0004 	ldr.w	r0, [fp, #4]
    6196:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    6198:	4428      	add	r0, r5
    619a:	f003 f8dd 	bl	9358 <memcpy>
      if (NumBytes) {
    619e:	ebb4 040a 	subs.w	r4, r4, sl
    61a2:	d006      	beq.n	61b2 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    61a4:	f8db 0004 	ldr.w	r0, [fp, #4]
    61a8:	4622      	mov	r2, r4
    61aa:	eb08 0109 	add.w	r1, r8, r9
    61ae:	f003 f8d3 	bl	9358 <memcpy>
      pRing->WrOff = NumBytes;
    61b2:	2018      	movs	r0, #24
    61b4:	fb00 7606 	mla	r6, r0, r6, r7
    61b8:	e7e0      	b.n	617c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    61ba:	3b01      	subs	r3, #1
    61bc:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    61be:	42a3      	cmp	r3, r4
    61c0:	d2ce      	bcs.n	6160 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    61c2:	2000      	movs	r0, #0
    61c4:	e7dc      	b.n	6180 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    61c6:	bf00      	nop
    61c8:	20000c20 	.word	0x20000c20

000061cc <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    61cc:	4b03      	ldr	r3, [pc, #12]	; (61dc <SEGGER_RTT_HasDataUp+0x10>)
    61ce:	2218      	movs	r2, #24
    61d0:	fb02 3300 	mla	r3, r2, r0, r3
    61d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    61d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    61d8:	1a80      	subs	r0, r0, r2
    61da:	4770      	bx	lr
    61dc:	20000c20 	.word	0x20000c20

000061e0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    61e0:	4b0e      	ldr	r3, [pc, #56]	; (621c <z_sys_init_run_level+0x3c>)
{
    61e2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    61e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    61e8:	3001      	adds	r0, #1
    61ea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    61ee:	42a6      	cmp	r6, r4
    61f0:	d800      	bhi.n	61f4 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    61f2:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    61f4:	e9d4 3500 	ldrd	r3, r5, [r4]
    61f8:	4628      	mov	r0, r5
    61fa:	4798      	blx	r3
		if (dev != NULL) {
    61fc:	b165      	cbz	r5, 6218 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    61fe:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    6200:	b130      	cbz	r0, 6210 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    6202:	2800      	cmp	r0, #0
    6204:	bfb8      	it	lt
    6206:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    6208:	28ff      	cmp	r0, #255	; 0xff
    620a:	bfa8      	it	ge
    620c:	20ff      	movge	r0, #255	; 0xff
    620e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    6210:	785a      	ldrb	r2, [r3, #1]
    6212:	f042 0201 	orr.w	r2, r2, #1
    6216:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6218:	3408      	adds	r4, #8
    621a:	e7e8      	b.n	61ee <z_sys_init_run_level+0xe>
    621c:	00009fdc 	.word	0x00009fdc

00006220 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    6220:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    6222:	4605      	mov	r5, r0
    6224:	b910      	cbnz	r0, 622c <z_impl_device_get_binding+0xc>
		return NULL;
    6226:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    6228:	4620      	mov	r0, r4
    622a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    622c:	7803      	ldrb	r3, [r0, #0]
    622e:	2b00      	cmp	r3, #0
    6230:	d0f9      	beq.n	6226 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    6232:	4c0e      	ldr	r4, [pc, #56]	; (626c <z_impl_device_get_binding+0x4c>)
    6234:	4e0e      	ldr	r6, [pc, #56]	; (6270 <z_impl_device_get_binding+0x50>)
    6236:	42b4      	cmp	r4, r6
    6238:	d108      	bne.n	624c <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    623a:	4c0c      	ldr	r4, [pc, #48]	; (626c <z_impl_device_get_binding+0x4c>)
    623c:	42b4      	cmp	r4, r6
    623e:	d0f2      	beq.n	6226 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    6240:	4620      	mov	r0, r4
    6242:	f003 fb79 	bl	9938 <z_device_is_ready>
    6246:	b950      	cbnz	r0, 625e <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    6248:	3418      	adds	r4, #24
    624a:	e7f7      	b.n	623c <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    624c:	4620      	mov	r0, r4
    624e:	f003 fb73 	bl	9938 <z_device_is_ready>
    6252:	b110      	cbz	r0, 625a <z_impl_device_get_binding+0x3a>
    6254:	6823      	ldr	r3, [r4, #0]
    6256:	42ab      	cmp	r3, r5
    6258:	d0e6      	beq.n	6228 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    625a:	3418      	adds	r4, #24
    625c:	e7eb      	b.n	6236 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    625e:	6821      	ldr	r1, [r4, #0]
    6260:	4628      	mov	r0, r5
    6262:	f003 f86d 	bl	9340 <strcmp>
    6266:	2800      	cmp	r0, #0
    6268:	d1ee      	bne.n	6248 <z_impl_device_get_binding+0x28>
    626a:	e7dd      	b.n	6228 <z_impl_device_get_binding+0x8>
    626c:	00009b1c 	.word	0x00009b1c
    6270:	00009bac 	.word	0x00009bac

00006274 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    6274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6278:	4605      	mov	r5, r0
    627a:	b086      	sub	sp, #24
    627c:	460f      	mov	r7, r1
	__asm__ volatile(
    627e:	f04f 0320 	mov.w	r3, #32
    6282:	f3ef 8811 	mrs	r8, BASEPRI
    6286:	f383 8812 	msr	BASEPRI_MAX, r3
    628a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    628e:	f001 ff45 	bl	811c <z_impl_z_current_get>
    6292:	2d04      	cmp	r5, #4
    6294:	bf96      	itet	ls
    6296:	4b29      	ldrls	r3, [pc, #164]	; (633c <z_fatal_error+0xc8>)
    6298:	4b29      	ldrhi	r3, [pc, #164]	; (6340 <z_fatal_error+0xcc>)
    629a:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    629e:	4929      	ldr	r1, [pc, #164]	; (6344 <z_fatal_error+0xd0>)
    62a0:	9503      	str	r5, [sp, #12]
    62a2:	2400      	movs	r4, #0
    62a4:	e9cd 3404 	strd	r3, r4, [sp, #16]
    62a8:	4b27      	ldr	r3, [pc, #156]	; (6348 <z_fatal_error+0xd4>)
    62aa:	9400      	str	r4, [sp, #0]
    62ac:	e9cd 4301 	strd	r4, r3, [sp, #4]
    62b0:	4606      	mov	r6, r0
    62b2:	4623      	mov	r3, r4
    62b4:	2201      	movs	r2, #1
    62b6:	4620      	mov	r0, r4
    62b8:	f003 fb48 	bl	994c <z_log_msg2_runtime_create.constprop.0>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    62bc:	b16f      	cbz	r7, 62da <z_fatal_error+0x66>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    62be:	69fb      	ldr	r3, [r7, #28]
    62c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    62c4:	b14b      	cbz	r3, 62da <z_fatal_error+0x66>
		LOG_ERR("Fault during interrupt handling\n");
    62c6:	4b21      	ldr	r3, [pc, #132]	; (634c <z_fatal_error+0xd8>)
    62c8:	491e      	ldr	r1, [pc, #120]	; (6344 <z_fatal_error+0xd0>)
    62ca:	9400      	str	r4, [sp, #0]
    62cc:	e9cd 4301 	strd	r4, r3, [sp, #4]
    62d0:	2201      	movs	r2, #1
    62d2:	4623      	mov	r3, r4
    62d4:	4620      	mov	r0, r4
    62d6:	f003 fb39 	bl	994c <z_log_msg2_runtime_create.constprop.0>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    62da:	b12e      	cbz	r6, 62e8 <z_fatal_error+0x74>
    62dc:	4630      	mov	r0, r6
    62de:	f003 fb6b 	bl	99b8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    62e2:	b108      	cbz	r0, 62e8 <z_fatal_error+0x74>
    62e4:	7803      	ldrb	r3, [r0, #0]
    62e6:	b903      	cbnz	r3, 62ea <z_fatal_error+0x76>
		thread_name = "unknown";
    62e8:	4819      	ldr	r0, [pc, #100]	; (6350 <z_fatal_error+0xdc>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    62ea:	4b1a      	ldr	r3, [pc, #104]	; (6354 <z_fatal_error+0xe0>)
    62ec:	9302      	str	r3, [sp, #8]
    62ee:	2300      	movs	r3, #0
    62f0:	e9cd 6003 	strd	r6, r0, [sp, #12]
    62f4:	e9cd 3300 	strd	r3, r3, [sp]
    62f8:	4618      	mov	r0, r3
    62fa:	4912      	ldr	r1, [pc, #72]	; (6344 <z_fatal_error+0xd0>)
    62fc:	2201      	movs	r2, #1
    62fe:	f003 fb25 	bl	994c <z_log_msg2_runtime_create.constprop.0>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    6302:	4639      	mov	r1, r7
    6304:	4628      	mov	r0, r5
    6306:	f7ff f811 	bl	532c <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    630a:	2d04      	cmp	r5, #4
    630c:	d10c      	bne.n	6328 <z_fatal_error+0xb4>
    630e:	4912      	ldr	r1, [pc, #72]	; (6358 <z_fatal_error+0xe4>)
    6310:	4a12      	ldr	r2, [pc, #72]	; (635c <z_fatal_error+0xe8>)
    6312:	4813      	ldr	r0, [pc, #76]	; (6360 <z_fatal_error+0xec>)
    6314:	238f      	movs	r3, #143	; 0x8f
    6316:	f002 ff3c 	bl	9192 <assert_print>
    631a:	4812      	ldr	r0, [pc, #72]	; (6364 <z_fatal_error+0xf0>)
    631c:	f002 ff39 	bl	9192 <assert_print>
    6320:	480e      	ldr	r0, [pc, #56]	; (635c <z_fatal_error+0xe8>)
    6322:	218f      	movs	r1, #143	; 0x8f
    6324:	f002 ff2e 	bl	9184 <assert_post_action>
	__asm__ volatile(
    6328:	f388 8811 	msr	BASEPRI, r8
    632c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    6330:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    6332:	b006      	add	sp, #24
    6334:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6338:	f7fd bbb4 	b.w	3aa4 <z_impl_k_thread_abort>
    633c:	00009ff4 	.word	0x00009ff4
    6340:	0000b866 	.word	0x0000b866
    6344:	00009d5c 	.word	0x00009d5c
    6348:	0000b87c 	.word	0x0000b87c
    634c:	0000b8a4 	.word	0x0000b8a4
    6350:	0000b874 	.word	0x0000b874
    6354:	0000b8c5 	.word	0x0000b8c5
    6358:	0000b8ff 	.word	0x0000b8ff
    635c:	0000b8dd 	.word	0x0000b8dd
    6360:	0000a107 	.word	0x0000a107
    6364:	0000b91c 	.word	0x0000b91c

00006368 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    6368:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    636a:	4b0a      	ldr	r3, [pc, #40]	; (6394 <bg_thread_main+0x2c>)
    636c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    636e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    6370:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    6372:	f7ff ff35 	bl	61e0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    6376:	f002 fbb5 	bl	8ae4 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    637a:	2003      	movs	r0, #3
    637c:	f7ff ff30 	bl	61e0 <z_sys_init_run_level>

	z_init_static_threads();
    6380:	f000 fa7c 	bl	687c <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    6384:	f7fa fcf4 	bl	d70 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6388:	4a03      	ldr	r2, [pc, #12]	; (6398 <bg_thread_main+0x30>)
    638a:	7b13      	ldrb	r3, [r2, #12]
    638c:	f023 0301 	bic.w	r3, r3, #1
    6390:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    6392:	bd08      	pop	{r3, pc}
    6394:	20001306 	.word	0x20001306
    6398:	20000500 	.word	0x20000500

0000639c <z_bss_zero>:
{
    639c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    639e:	4803      	ldr	r0, [pc, #12]	; (63ac <z_bss_zero+0x10>)
    63a0:	4a03      	ldr	r2, [pc, #12]	; (63b0 <z_bss_zero+0x14>)
    63a2:	2100      	movs	r1, #0
    63a4:	1a12      	subs	r2, r2, r0
    63a6:	f003 fae1 	bl	996c <z_early_memset>
}
    63aa:	bd08      	pop	{r3, pc}
    63ac:	20000260 	.word	0x20000260
    63b0:	20001308 	.word	0x20001308

000063b4 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    63b4:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    63b6:	2300      	movs	r3, #0
{
    63b8:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    63ba:	2201      	movs	r2, #1
    63bc:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    63c0:	4e13      	ldr	r6, [pc, #76]	; (6410 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    63c2:	4d14      	ldr	r5, [pc, #80]	; (6414 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    63c4:	9301      	str	r3, [sp, #4]
    63c6:	220f      	movs	r2, #15
    63c8:	e9cd 3202 	strd	r3, r2, [sp, #8]
    63cc:	4912      	ldr	r1, [pc, #72]	; (6418 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    63ce:	2318      	movs	r3, #24
    63d0:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    63d4:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    63d8:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    63da:	f44f 70b0 	mov.w	r0, #352	; 0x160
    63de:	fb00 1104 	mla	r1, r0, r4, r1
    63e2:	4b0e      	ldr	r3, [pc, #56]	; (641c <z_init_cpu+0x68>)
    63e4:	9500      	str	r5, [sp, #0]
    63e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
    63ea:	4630      	mov	r0, r6
    63ec:	f000 f992 	bl	6714 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    63f0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    63f2:	480b      	ldr	r0, [pc, #44]	; (6420 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    63f4:	752c      	strb	r4, [r5, #20]
    63f6:	f023 0304 	bic.w	r3, r3, #4
    63fa:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    63fc:	f44f 6302 	mov.w	r3, #2080	; 0x820
    6400:	fb03 0404 	mla	r4, r3, r4, r0
    6404:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    6406:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    6408:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    640a:	b006      	add	sp, #24
    640c:	bd70      	pop	{r4, r5, r6, pc}
    640e:	bf00      	nop
    6410:	20000480 	.word	0x20000480
    6414:	20000cc8 	.word	0x20000cc8
    6418:	200027c0 	.word	0x200027c0
    641c:	000069d9 	.word	0x000069d9
    6420:	20002920 	.word	0x20002920

00006424 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    6424:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6426:	4b2f      	ldr	r3, [pc, #188]	; (64e4 <z_cstart+0xc0>)
    6428:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    642a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    642e:	4d2e      	ldr	r5, [pc, #184]	; (64e8 <z_cstart+0xc4>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    6430:	4e2e      	ldr	r6, [pc, #184]	; (64ec <z_cstart+0xc8>)
    6432:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6434:	4f2e      	ldr	r7, [pc, #184]	; (64f0 <z_cstart+0xcc>)
    6436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    643a:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    643c:	2400      	movs	r4, #0
    643e:	23e0      	movs	r3, #224	; 0xe0
    6440:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    6444:	77ec      	strb	r4, [r5, #31]
    6446:	762c      	strb	r4, [r5, #24]
    6448:	766c      	strb	r4, [r5, #25]
    644a:	76ac      	strb	r4, [r5, #26]
    644c:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6450:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    6452:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6456:	626b      	str	r3, [r5, #36]	; 0x24
    6458:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    645c:	f7fd fa96 	bl	398c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6460:	f7fc fde6 	bl	3030 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6464:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6468:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    646a:	62eb      	str	r3, [r5, #44]	; 0x2c
	k_thread_system_pool_assign(dummy_thread);
    646c:	ad06      	add	r5, sp, #24
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    646e:	f7fd fc15 	bl	3c9c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6472:	f7fd fb2d 	bl	3ad0 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    6476:	f7fb ffb3 	bl	23e0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    647a:	f240 1301 	movw	r3, #257	; 0x101
	k_thread_system_pool_assign(dummy_thread);
    647e:	4628      	mov	r0, r5
	dummy_thread->base.user_options = K_ESSENTIAL;
    6480:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	dummy_thread->stack_info.size = 0U;
    6484:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	k_thread_system_pool_assign(dummy_thread);
    6488:	f002 fb26 	bl	8ad8 <k_thread_system_pool_assign>
	_current_cpu->current = dummy_thread;
    648c:	60b5      	str	r5, [r6, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    648e:	f003 fa52 	bl	9936 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6492:	4620      	mov	r0, r4
    6494:	f7ff fea4 	bl	61e0 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6498:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    649a:	4d16      	ldr	r5, [pc, #88]	; (64f4 <z_cstart+0xd0>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    649c:	f7ff fea0 	bl	61e0 <z_sys_init_run_level>
	z_sched_init();
    64a0:	f001 fcae 	bl	7e00 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    64a4:	4b14      	ldr	r3, [pc, #80]	; (64f8 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    64a6:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    64a8:	9305      	str	r3, [sp, #20]
    64aa:	2301      	movs	r3, #1
    64ac:	4913      	ldr	r1, [pc, #76]	; (64fc <z_cstart+0xd8>)
    64ae:	9400      	str	r4, [sp, #0]
    64b0:	e9cd 4303 	strd	r4, r3, [sp, #12]
    64b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    64b8:	463b      	mov	r3, r7
    64ba:	e9cd 4401 	strd	r4, r4, [sp, #4]
    64be:	4628      	mov	r0, r5
    64c0:	f000 f928 	bl	6714 <z_setup_new_thread>
    64c4:	7b6a      	ldrb	r2, [r5, #13]
    64c6:	4606      	mov	r6, r0
    64c8:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    64cc:	4628      	mov	r0, r5
    64ce:	736a      	strb	r2, [r5, #13]
    64d0:	f001 f848 	bl	7564 <z_ready_thread>
	z_init_cpu(0);
    64d4:	4620      	mov	r0, r4
    64d6:	f7ff ff6d 	bl	63b4 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    64da:	463a      	mov	r2, r7
    64dc:	4631      	mov	r1, r6
    64de:	4628      	mov	r0, r5
    64e0:	f7fc ff0c 	bl	32fc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    64e4:	20003140 	.word	0x20003140
    64e8:	e000ed00 	.word	0xe000ed00
    64ec:	20000cc8 	.word	0x20000cc8
    64f0:	00006369 	.word	0x00006369
    64f4:	20000500 	.word	0x20000500
    64f8:	0000b99b 	.word	0x0000b99b
    64fc:	200023a0 	.word	0x200023a0

00006500 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    6500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6502:	4c16      	ldr	r4, [pc, #88]	; (655c <init_mem_slab_module+0x5c>)
    6504:	4d16      	ldr	r5, [pc, #88]	; (6560 <init_mem_slab_module+0x60>)
    6506:	4e17      	ldr	r6, [pc, #92]	; (6564 <init_mem_slab_module+0x64>)
    6508:	42ac      	cmp	r4, r5
    650a:	d90c      	bls.n	6526 <init_mem_slab_module+0x26>
    650c:	4916      	ldr	r1, [pc, #88]	; (6568 <init_mem_slab_module+0x68>)
    650e:	4817      	ldr	r0, [pc, #92]	; (656c <init_mem_slab_module+0x6c>)
    6510:	233d      	movs	r3, #61	; 0x3d
    6512:	4632      	mov	r2, r6
    6514:	f002 fe3d 	bl	9192 <assert_print>
    6518:	4815      	ldr	r0, [pc, #84]	; (6570 <init_mem_slab_module+0x70>)
    651a:	f002 fe3a 	bl	9192 <assert_print>
    651e:	213d      	movs	r1, #61	; 0x3d
    6520:	4630      	mov	r0, r6
    6522:	f002 fe2f 	bl	9184 <assert_post_action>
    6526:	42ac      	cmp	r4, r5
    6528:	d301      	bcc.n	652e <init_mem_slab_module+0x2e>
			goto out;
		}
		z_object_init(slab);
	}

out:
    652a:	2000      	movs	r0, #0
	return rc;
}
    652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    652e:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    6532:	ea41 0302 	orr.w	r3, r1, r2
    6536:	f013 0303 	ands.w	r3, r3, #3
    653a:	d10b      	bne.n	6554 <init_mem_slab_module+0x54>
	for (j = 0U; j < slab->num_blocks; j++) {
    653c:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    653e:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    6540:	4283      	cmp	r3, r0
    6542:	d101      	bne.n	6548 <init_mem_slab_module+0x48>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    6544:	3420      	adds	r4, #32
    6546:	e7df      	b.n	6508 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    6548:	69a7      	ldr	r7, [r4, #24]
    654a:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    654c:	3301      	adds	r3, #1
		slab->free_list = p;
    654e:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    6550:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    6552:	e7f5      	b.n	6540 <init_mem_slab_module+0x40>
	return rc;
    6554:	f06f 0015 	mvn.w	r0, #21
    6558:	e7e8      	b.n	652c <init_mem_slab_module+0x2c>
    655a:	bf00      	nop
    655c:	200001f4 	.word	0x200001f4
    6560:	200001f4 	.word	0x200001f4
    6564:	0000b9a3 	.word	0x0000b9a3
    6568:	0000b9c8 	.word	0x0000b9c8
    656c:	0000a107 	.word	0x0000a107
    6570:	0000b9e5 	.word	0x0000b9e5

00006574 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    6574:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    6578:	4604      	mov	r4, r0
    657a:	460e      	mov	r6, r1
    657c:	4690      	mov	r8, r2
    657e:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6580:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6584:	f04f 0320 	mov.w	r3, #32
    6588:	f3ef 8911 	mrs	r9, BASEPRI
    658c:	f383 8812 	msr	BASEPRI_MAX, r3
    6590:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6594:	4628      	mov	r0, r5
    6596:	f000 f9f9 	bl	698c <z_spin_lock_valid>
    659a:	b968      	cbnz	r0, 65b8 <k_mem_slab_alloc+0x44>
    659c:	4a24      	ldr	r2, [pc, #144]	; (6630 <k_mem_slab_alloc+0xbc>)
    659e:	4925      	ldr	r1, [pc, #148]	; (6634 <k_mem_slab_alloc+0xc0>)
    65a0:	4825      	ldr	r0, [pc, #148]	; (6638 <k_mem_slab_alloc+0xc4>)
    65a2:	238e      	movs	r3, #142	; 0x8e
    65a4:	f002 fdf5 	bl	9192 <assert_print>
    65a8:	4824      	ldr	r0, [pc, #144]	; (663c <k_mem_slab_alloc+0xc8>)
    65aa:	4629      	mov	r1, r5
    65ac:	f002 fdf1 	bl	9192 <assert_print>
    65b0:	481f      	ldr	r0, [pc, #124]	; (6630 <k_mem_slab_alloc+0xbc>)
    65b2:	218e      	movs	r1, #142	; 0x8e
    65b4:	f002 fde6 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    65b8:	4628      	mov	r0, r5
    65ba:	f000 fa05 	bl	69c8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    65be:	69a3      	ldr	r3, [r4, #24]
    65c0:	b1eb      	cbz	r3, 65fe <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    65c2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    65c4:	681b      	ldr	r3, [r3, #0]
    65c6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    65c8:	69e3      	ldr	r3, [r4, #28]
    65ca:	3301      	adds	r3, #1
    65cc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    65ce:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    65d0:	4628      	mov	r0, r5
    65d2:	f000 f9e9 	bl	69a8 <z_spin_unlock_valid>
    65d6:	b968      	cbnz	r0, 65f4 <k_mem_slab_alloc+0x80>
    65d8:	4a15      	ldr	r2, [pc, #84]	; (6630 <k_mem_slab_alloc+0xbc>)
    65da:	4919      	ldr	r1, [pc, #100]	; (6640 <k_mem_slab_alloc+0xcc>)
    65dc:	4816      	ldr	r0, [pc, #88]	; (6638 <k_mem_slab_alloc+0xc4>)
    65de:	23b9      	movs	r3, #185	; 0xb9
    65e0:	f002 fdd7 	bl	9192 <assert_print>
    65e4:	4817      	ldr	r0, [pc, #92]	; (6644 <k_mem_slab_alloc+0xd0>)
    65e6:	4629      	mov	r1, r5
    65e8:	f002 fdd3 	bl	9192 <assert_print>
    65ec:	4810      	ldr	r0, [pc, #64]	; (6630 <k_mem_slab_alloc+0xbc>)
    65ee:	21b9      	movs	r1, #185	; 0xb9
    65f0:	f002 fdc8 	bl	9184 <assert_post_action>
	__asm__ volatile(
    65f4:	f389 8811 	msr	BASEPRI, r9
    65f8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    65fc:	e013      	b.n	6626 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    65fe:	ea58 0207 	orrs.w	r2, r8, r7
    6602:	d103      	bne.n	660c <k_mem_slab_alloc+0x98>
		*mem = NULL;
    6604:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    6606:	f06f 040b 	mvn.w	r4, #11
    660a:	e7e1      	b.n	65d0 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    660c:	4622      	mov	r2, r4
    660e:	e9cd 8700 	strd	r8, r7, [sp]
    6612:	4649      	mov	r1, r9
    6614:	4628      	mov	r0, r5
    6616:	f001 f9a9 	bl	796c <z_pend_curr>
		if (result == 0) {
    661a:	4604      	mov	r4, r0
    661c:	b918      	cbnz	r0, 6626 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    661e:	4b0a      	ldr	r3, [pc, #40]	; (6648 <k_mem_slab_alloc+0xd4>)
    6620:	689b      	ldr	r3, [r3, #8]
    6622:	695b      	ldr	r3, [r3, #20]
    6624:	6033      	str	r3, [r6, #0]
}
    6626:	4620      	mov	r0, r4
    6628:	b003      	add	sp, #12
    662a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    662e:	bf00      	nop
    6630:	0000a768 	.word	0x0000a768
    6634:	0000a7c1 	.word	0x0000a7c1
    6638:	0000a107 	.word	0x0000a107
    663c:	0000a7d6 	.word	0x0000a7d6
    6640:	0000a795 	.word	0x0000a795
    6644:	0000a7ac 	.word	0x0000a7ac
    6648:	20000cc8 	.word	0x20000cc8

0000664c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6650:	4604      	mov	r4, r0
    6652:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    6654:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    6658:	f04f 0320 	mov.w	r3, #32
    665c:	f3ef 8711 	mrs	r7, BASEPRI
    6660:	f383 8812 	msr	BASEPRI_MAX, r3
    6664:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6668:	4628      	mov	r0, r5
    666a:	f000 f98f 	bl	698c <z_spin_lock_valid>
    666e:	b968      	cbnz	r0, 668c <k_mem_slab_free+0x40>
    6670:	4a22      	ldr	r2, [pc, #136]	; (66fc <k_mem_slab_free+0xb0>)
    6672:	4923      	ldr	r1, [pc, #140]	; (6700 <k_mem_slab_free+0xb4>)
    6674:	4823      	ldr	r0, [pc, #140]	; (6704 <k_mem_slab_free+0xb8>)
    6676:	238e      	movs	r3, #142	; 0x8e
    6678:	f002 fd8b 	bl	9192 <assert_print>
    667c:	4822      	ldr	r0, [pc, #136]	; (6708 <k_mem_slab_free+0xbc>)
    667e:	4629      	mov	r1, r5
    6680:	f002 fd87 	bl	9192 <assert_print>
    6684:	481d      	ldr	r0, [pc, #116]	; (66fc <k_mem_slab_free+0xb0>)
    6686:	218e      	movs	r1, #142	; 0x8e
    6688:	f002 fd7c 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    668c:	4628      	mov	r0, r5
    668e:	f000 f99b 	bl	69c8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    6692:	f8d4 8018 	ldr.w	r8, [r4, #24]
    6696:	f1b8 0f00 	cmp.w	r8, #0
    669a:	d10f      	bne.n	66bc <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    669c:	4620      	mov	r0, r4
    669e:	f001 fb5f 	bl	7d60 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    66a2:	b158      	cbz	r0, 66bc <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    66a4:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    66a6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    66a8:	f8c0 8078 	str.w	r8, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    66ac:	f000 ff5a 	bl	7564 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    66b0:	4639      	mov	r1, r7
    66b2:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    66b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    66b8:	f000 bd08 	b.w	70cc <z_reschedule>
	**(char ***) mem = slab->free_list;
    66bc:	6833      	ldr	r3, [r6, #0]
    66be:	69a2      	ldr	r2, [r4, #24]
    66c0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    66c2:	6833      	ldr	r3, [r6, #0]
    66c4:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    66c6:	69e3      	ldr	r3, [r4, #28]
    66c8:	3b01      	subs	r3, #1
    66ca:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    66cc:	4628      	mov	r0, r5
    66ce:	f000 f96b 	bl	69a8 <z_spin_unlock_valid>
    66d2:	b968      	cbnz	r0, 66f0 <k_mem_slab_free+0xa4>
    66d4:	4a09      	ldr	r2, [pc, #36]	; (66fc <k_mem_slab_free+0xb0>)
    66d6:	490d      	ldr	r1, [pc, #52]	; (670c <k_mem_slab_free+0xc0>)
    66d8:	480a      	ldr	r0, [pc, #40]	; (6704 <k_mem_slab_free+0xb8>)
    66da:	23b9      	movs	r3, #185	; 0xb9
    66dc:	f002 fd59 	bl	9192 <assert_print>
    66e0:	480b      	ldr	r0, [pc, #44]	; (6710 <k_mem_slab_free+0xc4>)
    66e2:	4629      	mov	r1, r5
    66e4:	f002 fd55 	bl	9192 <assert_print>
    66e8:	4804      	ldr	r0, [pc, #16]	; (66fc <k_mem_slab_free+0xb0>)
    66ea:	21b9      	movs	r1, #185	; 0xb9
    66ec:	f002 fd4a 	bl	9184 <assert_post_action>
	__asm__ volatile(
    66f0:	f387 8811 	msr	BASEPRI, r7
    66f4:	f3bf 8f6f 	isb	sy
}
    66f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    66fc:	0000a768 	.word	0x0000a768
    6700:	0000a7c1 	.word	0x0000a7c1
    6704:	0000a107 	.word	0x0000a107
    6708:	0000a7d6 	.word	0x0000a7d6
    670c:	0000a795 	.word	0x0000a795
    6710:	0000a7ac 	.word	0x0000a7ac

00006714 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6714:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6718:	b085      	sub	sp, #20
    671a:	4604      	mov	r4, r0
    671c:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    6720:	f1b8 0f0f 	cmp.w	r8, #15
{
    6724:	460f      	mov	r7, r1
    6726:	4615      	mov	r5, r2
    6728:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    672a:	d132      	bne.n	6792 <z_setup_new_thread+0x7e>
    672c:	4b25      	ldr	r3, [pc, #148]	; (67c4 <z_setup_new_thread+0xb0>)
    672e:	4599      	cmp	r9, r3
    6730:	d133      	bne.n	679a <z_setup_new_thread+0x86>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6732:	f104 0358 	add.w	r3, r4, #88	; 0x58
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    6736:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    673a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    673c:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    673e:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    6740:	2304      	movs	r3, #4
    6742:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6744:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    6748:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    674c:	e9c4 3519 	strd	r3, r5, [r4, #100]	; 0x64
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6750:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    6752:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6756:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6758:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    675c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    675e:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    6760:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6762:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    6764:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    6766:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6768:	464b      	mov	r3, r9
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    676a:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    676e:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    6770:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    6772:	66e6      	str	r6, [r4, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6774:	4642      	mov	r2, r8
    6776:	4639      	mov	r1, r7
    6778:	4620      	mov	r0, r4
    677a:	f7fc fd8d 	bl	3298 <arch_new_thread>
	if (!_current) {
    677e:	4b12      	ldr	r3, [pc, #72]	; (67c8 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    6780:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    6782:	689b      	ldr	r3, [r3, #8]
    6784:	b103      	cbz	r3, 6788 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    6786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    6788:	6723      	str	r3, [r4, #112]	; 0x70
}
    678a:	4640      	mov	r0, r8
    678c:	b005      	add	sp, #20
    678e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    6792:	f108 0310 	add.w	r3, r8, #16
    6796:	2b1e      	cmp	r3, #30
    6798:	d9cb      	bls.n	6732 <z_setup_new_thread+0x1e>
    679a:	4a0c      	ldr	r2, [pc, #48]	; (67cc <z_setup_new_thread+0xb8>)
    679c:	490c      	ldr	r1, [pc, #48]	; (67d0 <z_setup_new_thread+0xbc>)
    679e:	480d      	ldr	r0, [pc, #52]	; (67d4 <z_setup_new_thread+0xc0>)
    67a0:	f240 13ff 	movw	r3, #511	; 0x1ff
    67a4:	f002 fcf5 	bl	9192 <assert_print>
    67a8:	4641      	mov	r1, r8
    67aa:	480b      	ldr	r0, [pc, #44]	; (67d8 <z_setup_new_thread+0xc4>)
    67ac:	f06f 030f 	mvn.w	r3, #15
    67b0:	220e      	movs	r2, #14
    67b2:	f002 fcee 	bl	9192 <assert_print>
    67b6:	4805      	ldr	r0, [pc, #20]	; (67cc <z_setup_new_thread+0xb8>)
    67b8:	f240 11ff 	movw	r1, #511	; 0x1ff
    67bc:	f002 fce2 	bl	9184 <assert_post_action>
    67c0:	e7b7      	b.n	6732 <z_setup_new_thread+0x1e>
    67c2:	bf00      	nop
    67c4:	000069d9 	.word	0x000069d9
    67c8:	20000cc8 	.word	0x20000cc8
    67cc:	0000ba04 	.word	0x0000ba04
    67d0:	0000ba27 	.word	0x0000ba27
    67d4:	0000a107 	.word	0x0000a107
    67d8:	0000baa7 	.word	0x0000baa7

000067dc <z_impl_k_thread_create>:
{
    67dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    67e0:	b087      	sub	sp, #28
    67e2:	e9dd 6514 	ldrd	r6, r5, [sp, #80]	; 0x50
    67e6:	4604      	mov	r4, r0
    67e8:	460f      	mov	r7, r1
    67ea:	4690      	mov	r8, r2
    67ec:	4699      	mov	r9, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    67ee:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    67f2:	b173      	cbz	r3, 6812 <z_impl_k_thread_create+0x36>
    67f4:	491c      	ldr	r1, [pc, #112]	; (6868 <z_impl_k_thread_create+0x8c>)
    67f6:	4a1d      	ldr	r2, [pc, #116]	; (686c <z_impl_k_thread_create+0x90>)
    67f8:	481d      	ldr	r0, [pc, #116]	; (6870 <z_impl_k_thread_create+0x94>)
    67fa:	f240 236e 	movw	r3, #622	; 0x26e
    67fe:	f002 fcc8 	bl	9192 <assert_print>
    6802:	481c      	ldr	r0, [pc, #112]	; (6874 <z_impl_k_thread_create+0x98>)
    6804:	f002 fcc5 	bl	9192 <assert_print>
    6808:	4818      	ldr	r0, [pc, #96]	; (686c <z_impl_k_thread_create+0x90>)
    680a:	f240 216e 	movw	r1, #622	; 0x26e
    680e:	f002 fcb9 	bl	9184 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6812:	2300      	movs	r3, #0
    6814:	9305      	str	r3, [sp, #20]
    6816:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6818:	9304      	str	r3, [sp, #16]
    681a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    681c:	9303      	str	r3, [sp, #12]
    681e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    6820:	9302      	str	r3, [sp, #8]
    6822:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6824:	9301      	str	r3, [sp, #4]
    6826:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    6828:	9300      	str	r3, [sp, #0]
    682a:	4642      	mov	r2, r8
    682c:	464b      	mov	r3, r9
    682e:	4639      	mov	r1, r7
    6830:	4620      	mov	r0, r4
    6832:	f7ff ff6f 	bl	6714 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6836:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    683a:	bf08      	it	eq
    683c:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    6840:	d005      	beq.n	684e <z_impl_k_thread_create+0x72>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6842:	ea55 0306 	orrs.w	r3, r5, r6
    6846:	d106      	bne.n	6856 <z_impl_k_thread_create+0x7a>
	z_sched_start(thread);
    6848:	4620      	mov	r0, r4
    684a:	f000 fed3 	bl	75f4 <z_sched_start>
}
    684e:	4620      	mov	r0, r4
    6850:	b007      	add	sp, #28
    6852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6856:	4908      	ldr	r1, [pc, #32]	; (6878 <z_impl_k_thread_create+0x9c>)
    6858:	4632      	mov	r2, r6
    685a:	462b      	mov	r3, r5
    685c:	f104 0018 	add.w	r0, r4, #24
    6860:	f001 fd7a 	bl	8358 <z_add_timeout>
    6864:	e7f3      	b.n	684e <z_impl_k_thread_create+0x72>
    6866:	bf00      	nop
    6868:	0000bad8 	.word	0x0000bad8
    686c:	0000ba04 	.word	0x0000ba04
    6870:	0000a107 	.word	0x0000a107
    6874:	0000baea 	.word	0x0000baea
    6878:	00007745 	.word	0x00007745

0000687c <z_init_static_threads>:
{
    687c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6880:	4c3b      	ldr	r4, [pc, #236]	; (6970 <z_init_static_threads+0xf4>)
	_FOREACH_STATIC_THREAD(thread_data) {
    6882:	4d3c      	ldr	r5, [pc, #240]	; (6974 <z_init_static_threads+0xf8>)
    6884:	4f3c      	ldr	r7, [pc, #240]	; (6978 <z_init_static_threads+0xfc>)
{
    6886:	b087      	sub	sp, #28
	_FOREACH_STATIC_THREAD(thread_data) {
    6888:	42ac      	cmp	r4, r5
    688a:	4626      	mov	r6, r4
    688c:	d90e      	bls.n	68ac <z_init_static_threads+0x30>
    688e:	493b      	ldr	r1, [pc, #236]	; (697c <z_init_static_threads+0x100>)
    6890:	483b      	ldr	r0, [pc, #236]	; (6980 <z_init_static_threads+0x104>)
    6892:	f240 23d5 	movw	r3, #725	; 0x2d5
    6896:	463a      	mov	r2, r7
    6898:	f002 fc7b 	bl	9192 <assert_print>
    689c:	4839      	ldr	r0, [pc, #228]	; (6984 <z_init_static_threads+0x108>)
    689e:	f002 fc78 	bl	9192 <assert_print>
    68a2:	f240 21d5 	movw	r1, #725	; 0x2d5
    68a6:	4638      	mov	r0, r7
    68a8:	f002 fc6c 	bl	9184 <assert_post_action>
    68ac:	42ae      	cmp	r6, r5
    68ae:	f104 0430 	add.w	r4, r4, #48	; 0x30
    68b2:	d31f      	bcc.n	68f4 <z_init_static_threads+0x78>
	k_sched_lock();
    68b4:	f000 fc4e 	bl	7154 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    68b8:	4c2d      	ldr	r4, [pc, #180]	; (6970 <z_init_static_threads+0xf4>)
    68ba:	4e2f      	ldr	r6, [pc, #188]	; (6978 <z_init_static_threads+0xfc>)
    68bc:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 697c <z_init_static_threads+0x100>
    68c0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 6980 <z_init_static_threads+0x104>
    68c4:	42ac      	cmp	r4, r5
    68c6:	d90e      	bls.n	68e6 <z_init_static_threads+0x6a>
    68c8:	4641      	mov	r1, r8
    68ca:	f44f 733d 	mov.w	r3, #756	; 0x2f4
    68ce:	4632      	mov	r2, r6
    68d0:	4648      	mov	r0, r9
    68d2:	f002 fc5e 	bl	9192 <assert_print>
    68d6:	482b      	ldr	r0, [pc, #172]	; (6984 <z_init_static_threads+0x108>)
    68d8:	f002 fc5b 	bl	9192 <assert_print>
    68dc:	f44f 713d 	mov.w	r1, #756	; 0x2f4
    68e0:	4630      	mov	r0, r6
    68e2:	f002 fc4f 	bl	9184 <assert_post_action>
    68e6:	42ac      	cmp	r4, r5
    68e8:	d320      	bcc.n	692c <z_init_static_threads+0xb0>
}
    68ea:	b007      	add	sp, #28
    68ec:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    68f0:	f001 b96e 	b.w	7bd0 <k_sched_unlock>
		z_setup_new_thread(
    68f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    68f8:	9305      	str	r3, [sp, #20]
    68fa:	f854 3c10 	ldr.w	r3, [r4, #-16]
    68fe:	9304      	str	r3, [sp, #16]
    6900:	f854 3c14 	ldr.w	r3, [r4, #-20]
    6904:	9303      	str	r3, [sp, #12]
    6906:	f854 3c18 	ldr.w	r3, [r4, #-24]
    690a:	9302      	str	r3, [sp, #8]
    690c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    6910:	9301      	str	r3, [sp, #4]
    6912:	f854 3c20 	ldr.w	r3, [r4, #-32]
    6916:	9300      	str	r3, [sp, #0]
    6918:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    691c:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    6920:	f7ff fef8 	bl	6714 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6924:	f854 3c30 	ldr.w	r3, [r4, #-48]
    6928:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    692a:	e7ad      	b.n	6888 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    692c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    692e:	1c5a      	adds	r2, r3, #1
    6930:	d00f      	beq.n	6952 <z_init_static_threads+0xd6>
					    K_MSEC(thread_data->init_delay));
    6932:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6936:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    693a:	f240 30e7 	movw	r0, #999	; 0x3e7
    693e:	2100      	movs	r1, #0
    6940:	fbc3 0102 	smlal	r0, r1, r3, r2
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6944:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    6948:	6827      	ldr	r7, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    694a:	d104      	bne.n	6956 <z_init_static_threads+0xda>
	z_sched_start(thread);
    694c:	4638      	mov	r0, r7
    694e:	f000 fe51 	bl	75f4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6952:	3430      	adds	r4, #48	; 0x30
    6954:	e7b6      	b.n	68c4 <z_init_static_threads+0x48>
    6956:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    695a:	2300      	movs	r3, #0
    695c:	f7f9 fdb2 	bl	4c4 <__aeabi_uldivmod>
    6960:	4602      	mov	r2, r0
    6962:	460b      	mov	r3, r1
    6964:	f107 0018 	add.w	r0, r7, #24
    6968:	4907      	ldr	r1, [pc, #28]	; (6988 <z_init_static_threads+0x10c>)
    696a:	f001 fcf5 	bl	8358 <z_add_timeout>
    696e:	e7f0      	b.n	6952 <z_init_static_threads+0xd6>
    6970:	200001f4 	.word	0x200001f4
    6974:	200001f4 	.word	0x200001f4
    6978:	0000ba04 	.word	0x0000ba04
    697c:	0000bb0f 	.word	0x0000bb0f
    6980:	0000a107 	.word	0x0000a107
    6984:	0000b9e5 	.word	0x0000b9e5
    6988:	00007745 	.word	0x00007745

0000698c <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    698c:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    698e:	b138      	cbz	r0, 69a0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    6990:	4b04      	ldr	r3, [pc, #16]	; (69a4 <z_spin_lock_valid+0x18>)
    6992:	7d1b      	ldrb	r3, [r3, #20]
    6994:	f000 0003 	and.w	r0, r0, #3
    6998:	1ac0      	subs	r0, r0, r3
    699a:	bf18      	it	ne
    699c:	2001      	movne	r0, #1
    699e:	4770      	bx	lr
			return false;
		}
	}
	return true;
    69a0:	2001      	movs	r0, #1
}
    69a2:	4770      	bx	lr
    69a4:	20000cc8 	.word	0x20000cc8

000069a8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    69a8:	4906      	ldr	r1, [pc, #24]	; (69c4 <z_spin_unlock_valid+0x1c>)
{
    69aa:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    69ac:	688a      	ldr	r2, [r1, #8]
    69ae:	7d08      	ldrb	r0, [r1, #20]
    69b0:	6819      	ldr	r1, [r3, #0]
    69b2:	4302      	orrs	r2, r0
    69b4:	4291      	cmp	r1, r2
    69b6:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    69ba:	bf04      	itt	eq
    69bc:	6018      	streq	r0, [r3, #0]
	return true;
    69be:	2001      	moveq	r0, #1
}
    69c0:	4770      	bx	lr
    69c2:	bf00      	nop
    69c4:	20000cc8 	.word	0x20000cc8

000069c8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    69c8:	4a02      	ldr	r2, [pc, #8]	; (69d4 <z_spin_lock_set_owner+0xc>)
    69ca:	7d11      	ldrb	r1, [r2, #20]
    69cc:	6893      	ldr	r3, [r2, #8]
    69ce:	430b      	orrs	r3, r1
    69d0:	6003      	str	r3, [r0, #0]
}
    69d2:	4770      	bx	lr
    69d4:	20000cc8 	.word	0x20000cc8

000069d8 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    69d8:	4c13      	ldr	r4, [pc, #76]	; (6a28 <idle+0x50>)
{
    69da:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    69dc:	68a3      	ldr	r3, [r4, #8]
    69de:	f993 300e 	ldrsb.w	r3, [r3, #14]
    69e2:	2b00      	cmp	r3, #0
    69e4:	da09      	bge.n	69fa <idle+0x22>
    69e6:	4911      	ldr	r1, [pc, #68]	; (6a2c <idle+0x54>)
    69e8:	4811      	ldr	r0, [pc, #68]	; (6a30 <idle+0x58>)
    69ea:	4a12      	ldr	r2, [pc, #72]	; (6a34 <idle+0x5c>)
    69ec:	2327      	movs	r3, #39	; 0x27
    69ee:	f002 fbd0 	bl	9192 <assert_print>
    69f2:	4810      	ldr	r0, [pc, #64]	; (6a34 <idle+0x5c>)
    69f4:	2127      	movs	r1, #39	; 0x27
    69f6:	f002 fbc5 	bl	9184 <assert_post_action>
	return !z_sys_post_kernel;
    69fa:	4d0f      	ldr	r5, [pc, #60]	; (6a38 <idle+0x60>)
	__asm__ volatile(
    69fc:	f04f 0220 	mov.w	r2, #32
    6a00:	f3ef 8311 	mrs	r3, BASEPRI
    6a04:	f382 8812 	msr	BASEPRI_MAX, r2
    6a08:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    6a0c:	f001 fdba 	bl	8584 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    6a10:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    6a12:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    6a14:	b913      	cbnz	r3, 6a1c <idle+0x44>
	arch_cpu_idle();
    6a16:	f7fc fb11 	bl	303c <arch_cpu_idle>
}
    6a1a:	e7ef      	b.n	69fc <idle+0x24>
    6a1c:	f7fc f964 	bl	2ce8 <pm_system_suspend>
    6a20:	2800      	cmp	r0, #0
    6a22:	d1eb      	bne.n	69fc <idle+0x24>
    6a24:	e7f7      	b.n	6a16 <idle+0x3e>
    6a26:	bf00      	nop
    6a28:	20000cc8 	.word	0x20000cc8
    6a2c:	0000bb5d 	.word	0x0000bb5d
    6a30:	0000a107 	.word	0x0000a107
    6a34:	0000bb3c 	.word	0x0000bb3c
    6a38:	20001306 	.word	0x20001306

00006a3c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6a3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6a40:	4604      	mov	r4, r0
    6a42:	4617      	mov	r7, r2
    6a44:	461e      	mov	r6, r3
    6a46:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6a4a:	b163      	cbz	r3, 6a66 <z_impl_k_mutex_lock+0x2a>
    6a4c:	496d      	ldr	r1, [pc, #436]	; (6c04 <z_impl_k_mutex_lock+0x1c8>)
    6a4e:	4a6e      	ldr	r2, [pc, #440]	; (6c08 <z_impl_k_mutex_lock+0x1cc>)
    6a50:	486e      	ldr	r0, [pc, #440]	; (6c0c <z_impl_k_mutex_lock+0x1d0>)
    6a52:	2365      	movs	r3, #101	; 0x65
    6a54:	f002 fb9d 	bl	9192 <assert_print>
    6a58:	486d      	ldr	r0, [pc, #436]	; (6c10 <z_impl_k_mutex_lock+0x1d4>)
    6a5a:	f002 fb9a 	bl	9192 <assert_print>
    6a5e:	486a      	ldr	r0, [pc, #424]	; (6c08 <z_impl_k_mutex_lock+0x1cc>)
    6a60:	2165      	movs	r1, #101	; 0x65
    6a62:	f002 fb8f 	bl	9184 <assert_post_action>
    6a66:	f04f 0320 	mov.w	r3, #32
    6a6a:	f3ef 8811 	mrs	r8, BASEPRI
    6a6e:	f383 8812 	msr	BASEPRI_MAX, r3
    6a72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6a76:	4867      	ldr	r0, [pc, #412]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6a78:	f7ff ff88 	bl	698c <z_spin_lock_valid>
    6a7c:	b968      	cbnz	r0, 6a9a <z_impl_k_mutex_lock+0x5e>
    6a7e:	4a66      	ldr	r2, [pc, #408]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6a80:	4966      	ldr	r1, [pc, #408]	; (6c1c <z_impl_k_mutex_lock+0x1e0>)
    6a82:	4862      	ldr	r0, [pc, #392]	; (6c0c <z_impl_k_mutex_lock+0x1d0>)
    6a84:	238e      	movs	r3, #142	; 0x8e
    6a86:	f002 fb84 	bl	9192 <assert_print>
    6a8a:	4962      	ldr	r1, [pc, #392]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6a8c:	4864      	ldr	r0, [pc, #400]	; (6c20 <z_impl_k_mutex_lock+0x1e4>)
    6a8e:	f002 fb80 	bl	9192 <assert_print>
    6a92:	4861      	ldr	r0, [pc, #388]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6a94:	218e      	movs	r1, #142	; 0x8e
    6a96:	f002 fb75 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    6a9a:	485e      	ldr	r0, [pc, #376]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6a9c:	f7ff ff94 	bl	69c8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6aa0:	68e3      	ldr	r3, [r4, #12]
    6aa2:	4a60      	ldr	r2, [pc, #384]	; (6c24 <z_impl_k_mutex_lock+0x1e8>)
    6aa4:	b1fb      	cbz	r3, 6ae6 <z_impl_k_mutex_lock+0xaa>
    6aa6:	68a0      	ldr	r0, [r4, #8]
    6aa8:	6891      	ldr	r1, [r2, #8]
    6aaa:	4288      	cmp	r0, r1
    6aac:	d03d      	beq.n	6b2a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6aae:	ea57 0306 	orrs.w	r3, r7, r6
    6ab2:	d13c      	bne.n	6b2e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ab4:	4857      	ldr	r0, [pc, #348]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6ab6:	f7ff ff77 	bl	69a8 <z_spin_unlock_valid>
    6aba:	b968      	cbnz	r0, 6ad8 <z_impl_k_mutex_lock+0x9c>
    6abc:	4a56      	ldr	r2, [pc, #344]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6abe:	495a      	ldr	r1, [pc, #360]	; (6c28 <z_impl_k_mutex_lock+0x1ec>)
    6ac0:	4852      	ldr	r0, [pc, #328]	; (6c0c <z_impl_k_mutex_lock+0x1d0>)
    6ac2:	23b9      	movs	r3, #185	; 0xb9
    6ac4:	f002 fb65 	bl	9192 <assert_print>
    6ac8:	4952      	ldr	r1, [pc, #328]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6aca:	4858      	ldr	r0, [pc, #352]	; (6c2c <z_impl_k_mutex_lock+0x1f0>)
    6acc:	f002 fb61 	bl	9192 <assert_print>
    6ad0:	4851      	ldr	r0, [pc, #324]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6ad2:	21b9      	movs	r1, #185	; 0xb9
    6ad4:	f002 fb56 	bl	9184 <assert_post_action>
	__asm__ volatile(
    6ad8:	f388 8811 	msr	BASEPRI, r8
    6adc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    6ae0:	f06f 000f 	mvn.w	r0, #15
    6ae4:	e01e      	b.n	6b24 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    6ae6:	6891      	ldr	r1, [r2, #8]
    6ae8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6aec:	4849      	ldr	r0, [pc, #292]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6aee:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    6af0:	3301      	adds	r3, #1
    6af2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    6af4:	6893      	ldr	r3, [r2, #8]
    6af6:	60a3      	str	r3, [r4, #8]
    6af8:	f7ff ff56 	bl	69a8 <z_spin_unlock_valid>
    6afc:	b968      	cbnz	r0, 6b1a <z_impl_k_mutex_lock+0xde>
    6afe:	4a46      	ldr	r2, [pc, #280]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6b00:	4949      	ldr	r1, [pc, #292]	; (6c28 <z_impl_k_mutex_lock+0x1ec>)
    6b02:	4842      	ldr	r0, [pc, #264]	; (6c0c <z_impl_k_mutex_lock+0x1d0>)
    6b04:	23b9      	movs	r3, #185	; 0xb9
    6b06:	f002 fb44 	bl	9192 <assert_print>
    6b0a:	4942      	ldr	r1, [pc, #264]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6b0c:	4847      	ldr	r0, [pc, #284]	; (6c2c <z_impl_k_mutex_lock+0x1f0>)
    6b0e:	f002 fb40 	bl	9192 <assert_print>
    6b12:	4841      	ldr	r0, [pc, #260]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6b14:	21b9      	movs	r1, #185	; 0xb9
    6b16:	f002 fb35 	bl	9184 <assert_post_action>
    6b1a:	f388 8811 	msr	BASEPRI, r8
    6b1e:	f3bf 8f6f 	isb	sy
		return 0;
    6b22:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6b24:	b002      	add	sp, #8
    6b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6b2a:	6921      	ldr	r1, [r4, #16]
    6b2c:	e7de      	b.n	6aec <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6b2e:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6b32:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    6b36:	4299      	cmp	r1, r3
    6b38:	bfa8      	it	ge
    6b3a:	4619      	movge	r1, r3
    6b3c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    6b40:	4291      	cmp	r1, r2
    6b42:	bfb8      	it	lt
    6b44:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6b46:	4299      	cmp	r1, r3
    6b48:	da43      	bge.n	6bd2 <z_impl_k_mutex_lock+0x196>
		resched = adjust_owner_prio(mutex, new_prio);
    6b4a:	f002 ff3e 	bl	99ca <adjust_owner_prio.isra.0>
    6b4e:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6b50:	e9cd 7600 	strd	r7, r6, [sp]
    6b54:	482f      	ldr	r0, [pc, #188]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6b56:	4622      	mov	r2, r4
    6b58:	4641      	mov	r1, r8
    6b5a:	f000 ff07 	bl	796c <z_pend_curr>
	if (got_mutex == 0) {
    6b5e:	2800      	cmp	r0, #0
    6b60:	d0e0      	beq.n	6b24 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    6b62:	f04f 0320 	mov.w	r3, #32
    6b66:	f3ef 8611 	mrs	r6, BASEPRI
    6b6a:	f383 8812 	msr	BASEPRI_MAX, r3
    6b6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b72:	4828      	ldr	r0, [pc, #160]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6b74:	f7ff ff0a 	bl	698c <z_spin_lock_valid>
    6b78:	b968      	cbnz	r0, 6b96 <z_impl_k_mutex_lock+0x15a>
    6b7a:	4a27      	ldr	r2, [pc, #156]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6b7c:	4927      	ldr	r1, [pc, #156]	; (6c1c <z_impl_k_mutex_lock+0x1e0>)
    6b7e:	4823      	ldr	r0, [pc, #140]	; (6c0c <z_impl_k_mutex_lock+0x1d0>)
    6b80:	238e      	movs	r3, #142	; 0x8e
    6b82:	f002 fb06 	bl	9192 <assert_print>
    6b86:	4923      	ldr	r1, [pc, #140]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6b88:	4825      	ldr	r0, [pc, #148]	; (6c20 <z_impl_k_mutex_lock+0x1e4>)
    6b8a:	f002 fb02 	bl	9192 <assert_print>
    6b8e:	4822      	ldr	r0, [pc, #136]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6b90:	218e      	movs	r1, #142	; 0x8e
    6b92:	f002 faf7 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    6b96:	481f      	ldr	r0, [pc, #124]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6b98:	f7ff ff16 	bl	69c8 <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6b9c:	6823      	ldr	r3, [r4, #0]
    6b9e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ba0:	42a3      	cmp	r3, r4
    6ba2:	d00a      	beq.n	6bba <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6ba4:	b14b      	cbz	r3, 6bba <z_impl_k_mutex_lock+0x17e>
    6ba6:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6baa:	4299      	cmp	r1, r3
    6bac:	bfa8      	it	ge
    6bae:	4619      	movge	r1, r3
    6bb0:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6bb4:	4299      	cmp	r1, r3
    6bb6:	bfb8      	it	lt
    6bb8:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6bba:	68a0      	ldr	r0, [r4, #8]
    6bbc:	f002 ff05 	bl	99ca <adjust_owner_prio.isra.0>
    6bc0:	b900      	cbnz	r0, 6bc4 <z_impl_k_mutex_lock+0x188>
	if (resched) {
    6bc2:	b145      	cbz	r5, 6bd6 <z_impl_k_mutex_lock+0x19a>
		z_reschedule(&lock, key);
    6bc4:	4813      	ldr	r0, [pc, #76]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6bc6:	4631      	mov	r1, r6
    6bc8:	f000 fa80 	bl	70cc <z_reschedule>
	return -EAGAIN;
    6bcc:	f06f 000a 	mvn.w	r0, #10
    6bd0:	e7a8      	b.n	6b24 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    6bd2:	2500      	movs	r5, #0
    6bd4:	e7bc      	b.n	6b50 <z_impl_k_mutex_lock+0x114>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6bd6:	480f      	ldr	r0, [pc, #60]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6bd8:	f7ff fee6 	bl	69a8 <z_spin_unlock_valid>
    6bdc:	b968      	cbnz	r0, 6bfa <z_impl_k_mutex_lock+0x1be>
    6bde:	4a0e      	ldr	r2, [pc, #56]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6be0:	4911      	ldr	r1, [pc, #68]	; (6c28 <z_impl_k_mutex_lock+0x1ec>)
    6be2:	480a      	ldr	r0, [pc, #40]	; (6c0c <z_impl_k_mutex_lock+0x1d0>)
    6be4:	23b9      	movs	r3, #185	; 0xb9
    6be6:	f002 fad4 	bl	9192 <assert_print>
    6bea:	490a      	ldr	r1, [pc, #40]	; (6c14 <z_impl_k_mutex_lock+0x1d8>)
    6bec:	480f      	ldr	r0, [pc, #60]	; (6c2c <z_impl_k_mutex_lock+0x1f0>)
    6bee:	f002 fad0 	bl	9192 <assert_print>
    6bf2:	4809      	ldr	r0, [pc, #36]	; (6c18 <z_impl_k_mutex_lock+0x1dc>)
    6bf4:	21b9      	movs	r1, #185	; 0xb9
    6bf6:	f002 fac5 	bl	9184 <assert_post_action>
	__asm__ volatile(
    6bfa:	f386 8811 	msr	BASEPRI, r6
    6bfe:	f3bf 8f6f 	isb	sy
    6c02:	e7e3      	b.n	6bcc <z_impl_k_mutex_lock+0x190>
    6c04:	0000bad8 	.word	0x0000bad8
    6c08:	0000bb85 	.word	0x0000bb85
    6c0c:	0000a107 	.word	0x0000a107
    6c10:	0000bba7 	.word	0x0000bba7
    6c14:	20000cf0 	.word	0x20000cf0
    6c18:	0000a768 	.word	0x0000a768
    6c1c:	0000a7c1 	.word	0x0000a7c1
    6c20:	0000a7d6 	.word	0x0000a7d6
    6c24:	20000cc8 	.word	0x20000cc8
    6c28:	0000a795 	.word	0x0000a795
    6c2c:	0000a7ac 	.word	0x0000a7ac

00006c30 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    6c30:	b538      	push	{r3, r4, r5, lr}
    6c32:	4604      	mov	r4, r0
    6c34:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    6c38:	b163      	cbz	r3, 6c54 <z_impl_k_mutex_unlock+0x24>
    6c3a:	4950      	ldr	r1, [pc, #320]	; (6d7c <z_impl_k_mutex_unlock+0x14c>)
    6c3c:	4a50      	ldr	r2, [pc, #320]	; (6d80 <z_impl_k_mutex_unlock+0x150>)
    6c3e:	4851      	ldr	r0, [pc, #324]	; (6d84 <z_impl_k_mutex_unlock+0x154>)
    6c40:	23c7      	movs	r3, #199	; 0xc7
    6c42:	f002 faa6 	bl	9192 <assert_print>
    6c46:	4850      	ldr	r0, [pc, #320]	; (6d88 <z_impl_k_mutex_unlock+0x158>)
    6c48:	f002 faa3 	bl	9192 <assert_print>
    6c4c:	484c      	ldr	r0, [pc, #304]	; (6d80 <z_impl_k_mutex_unlock+0x150>)
    6c4e:	21c7      	movs	r1, #199	; 0xc7
    6c50:	f002 fa98 	bl	9184 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6c54:	68a3      	ldr	r3, [r4, #8]
    6c56:	2b00      	cmp	r3, #0
    6c58:	f000 8089 	beq.w	6d6e <z_impl_k_mutex_unlock+0x13e>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6c5c:	4d4b      	ldr	r5, [pc, #300]	; (6d8c <z_impl_k_mutex_unlock+0x15c>)
    6c5e:	68aa      	ldr	r2, [r5, #8]
    6c60:	4293      	cmp	r3, r2
    6c62:	f040 8087 	bne.w	6d74 <z_impl_k_mutex_unlock+0x144>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    6c66:	68e3      	ldr	r3, [r4, #12]
    6c68:	b94b      	cbnz	r3, 6c7e <z_impl_k_mutex_unlock+0x4e>
    6c6a:	4949      	ldr	r1, [pc, #292]	; (6d90 <z_impl_k_mutex_unlock+0x160>)
    6c6c:	4845      	ldr	r0, [pc, #276]	; (6d84 <z_impl_k_mutex_unlock+0x154>)
    6c6e:	4a44      	ldr	r2, [pc, #272]	; (6d80 <z_impl_k_mutex_unlock+0x150>)
    6c70:	23df      	movs	r3, #223	; 0xdf
    6c72:	f002 fa8e 	bl	9192 <assert_print>
    6c76:	4842      	ldr	r0, [pc, #264]	; (6d80 <z_impl_k_mutex_unlock+0x150>)
    6c78:	21df      	movs	r1, #223	; 0xdf
    6c7a:	f002 fa83 	bl	9184 <assert_post_action>
    6c7e:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    6c82:	b163      	cbz	r3, 6c9e <z_impl_k_mutex_unlock+0x6e>
    6c84:	493d      	ldr	r1, [pc, #244]	; (6d7c <z_impl_k_mutex_unlock+0x14c>)
    6c86:	4a43      	ldr	r2, [pc, #268]	; (6d94 <z_impl_k_mutex_unlock+0x164>)
    6c88:	483e      	ldr	r0, [pc, #248]	; (6d84 <z_impl_k_mutex_unlock+0x154>)
    6c8a:	23fd      	movs	r3, #253	; 0xfd
    6c8c:	f002 fa81 	bl	9192 <assert_print>
    6c90:	4841      	ldr	r0, [pc, #260]	; (6d98 <z_impl_k_mutex_unlock+0x168>)
    6c92:	f002 fa7e 	bl	9192 <assert_print>
    6c96:	483f      	ldr	r0, [pc, #252]	; (6d94 <z_impl_k_mutex_unlock+0x164>)
    6c98:	21fd      	movs	r1, #253	; 0xfd
    6c9a:	f002 fa73 	bl	9184 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    6c9e:	68ab      	ldr	r3, [r5, #8]
    6ca0:	7bdb      	ldrb	r3, [r3, #15]
    6ca2:	2b01      	cmp	r3, #1
    6ca4:	d10c      	bne.n	6cc0 <z_impl_k_mutex_unlock+0x90>
    6ca6:	493d      	ldr	r1, [pc, #244]	; (6d9c <z_impl_k_mutex_unlock+0x16c>)
    6ca8:	4a3a      	ldr	r2, [pc, #232]	; (6d94 <z_impl_k_mutex_unlock+0x164>)
    6caa:	4836      	ldr	r0, [pc, #216]	; (6d84 <z_impl_k_mutex_unlock+0x154>)
    6cac:	23fe      	movs	r3, #254	; 0xfe
    6cae:	f002 fa70 	bl	9192 <assert_print>
    6cb2:	4839      	ldr	r0, [pc, #228]	; (6d98 <z_impl_k_mutex_unlock+0x168>)
    6cb4:	f002 fa6d 	bl	9192 <assert_print>
    6cb8:	4836      	ldr	r0, [pc, #216]	; (6d94 <z_impl_k_mutex_unlock+0x164>)
    6cba:	21fe      	movs	r1, #254	; 0xfe
    6cbc:	f002 fa62 	bl	9184 <assert_post_action>

	--_current->base.sched_locked;
    6cc0:	68aa      	ldr	r2, [r5, #8]
    6cc2:	7bd3      	ldrb	r3, [r2, #15]
    6cc4:	3b01      	subs	r3, #1
    6cc6:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6cc8:	68e3      	ldr	r3, [r4, #12]
    6cca:	2b01      	cmp	r3, #1
    6ccc:	d905      	bls.n	6cda <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    6cce:	3b01      	subs	r3, #1
    6cd0:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    6cd2:	f000 ff7d 	bl	7bd0 <k_sched_unlock>

	return 0;
    6cd6:	2000      	movs	r0, #0
}
    6cd8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6cda:	f04f 0320 	mov.w	r3, #32
    6cde:	f3ef 8511 	mrs	r5, BASEPRI
    6ce2:	f383 8812 	msr	BASEPRI_MAX, r3
    6ce6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6cea:	482d      	ldr	r0, [pc, #180]	; (6da0 <z_impl_k_mutex_unlock+0x170>)
    6cec:	f7ff fe4e 	bl	698c <z_spin_lock_valid>
    6cf0:	b968      	cbnz	r0, 6d0e <z_impl_k_mutex_unlock+0xde>
    6cf2:	4a2c      	ldr	r2, [pc, #176]	; (6da4 <z_impl_k_mutex_unlock+0x174>)
    6cf4:	492c      	ldr	r1, [pc, #176]	; (6da8 <z_impl_k_mutex_unlock+0x178>)
    6cf6:	4823      	ldr	r0, [pc, #140]	; (6d84 <z_impl_k_mutex_unlock+0x154>)
    6cf8:	238e      	movs	r3, #142	; 0x8e
    6cfa:	f002 fa4a 	bl	9192 <assert_print>
    6cfe:	4928      	ldr	r1, [pc, #160]	; (6da0 <z_impl_k_mutex_unlock+0x170>)
    6d00:	482a      	ldr	r0, [pc, #168]	; (6dac <z_impl_k_mutex_unlock+0x17c>)
    6d02:	f002 fa46 	bl	9192 <assert_print>
    6d06:	4827      	ldr	r0, [pc, #156]	; (6da4 <z_impl_k_mutex_unlock+0x174>)
    6d08:	218e      	movs	r1, #142	; 0x8e
    6d0a:	f002 fa3b 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d0e:	4824      	ldr	r0, [pc, #144]	; (6da0 <z_impl_k_mutex_unlock+0x170>)
    6d10:	f7ff fe5a 	bl	69c8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6d14:	6921      	ldr	r1, [r4, #16]
    6d16:	68a0      	ldr	r0, [r4, #8]
    6d18:	f002 fe57 	bl	99ca <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6d1c:	4620      	mov	r0, r4
    6d1e:	f001 f81f 	bl	7d60 <z_unpend_first_thread>
	mutex->owner = new_owner;
    6d22:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6d24:	b158      	cbz	r0, 6d3e <z_impl_k_mutex_unlock+0x10e>
		mutex->owner_orig_prio = new_owner->base.prio;
    6d26:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6d2a:	6122      	str	r2, [r4, #16]
    6d2c:	2200      	movs	r2, #0
    6d2e:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    6d30:	f000 fc18 	bl	7564 <z_ready_thread>
		z_reschedule(&lock, key);
    6d34:	481a      	ldr	r0, [pc, #104]	; (6da0 <z_impl_k_mutex_unlock+0x170>)
    6d36:	4629      	mov	r1, r5
    6d38:	f000 f9c8 	bl	70cc <z_reschedule>
    6d3c:	e7c9      	b.n	6cd2 <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    6d3e:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d40:	4817      	ldr	r0, [pc, #92]	; (6da0 <z_impl_k_mutex_unlock+0x170>)
    6d42:	f7ff fe31 	bl	69a8 <z_spin_unlock_valid>
    6d46:	b968      	cbnz	r0, 6d64 <z_impl_k_mutex_unlock+0x134>
    6d48:	4a16      	ldr	r2, [pc, #88]	; (6da4 <z_impl_k_mutex_unlock+0x174>)
    6d4a:	4919      	ldr	r1, [pc, #100]	; (6db0 <z_impl_k_mutex_unlock+0x180>)
    6d4c:	480d      	ldr	r0, [pc, #52]	; (6d84 <z_impl_k_mutex_unlock+0x154>)
    6d4e:	23b9      	movs	r3, #185	; 0xb9
    6d50:	f002 fa1f 	bl	9192 <assert_print>
    6d54:	4912      	ldr	r1, [pc, #72]	; (6da0 <z_impl_k_mutex_unlock+0x170>)
    6d56:	4817      	ldr	r0, [pc, #92]	; (6db4 <z_impl_k_mutex_unlock+0x184>)
    6d58:	f002 fa1b 	bl	9192 <assert_print>
    6d5c:	4811      	ldr	r0, [pc, #68]	; (6da4 <z_impl_k_mutex_unlock+0x174>)
    6d5e:	21b9      	movs	r1, #185	; 0xb9
    6d60:	f002 fa10 	bl	9184 <assert_post_action>
	__asm__ volatile(
    6d64:	f385 8811 	msr	BASEPRI, r5
    6d68:	f3bf 8f6f 	isb	sy
    6d6c:	e7b1      	b.n	6cd2 <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    6d6e:	f06f 0015 	mvn.w	r0, #21
    6d72:	e7b1      	b.n	6cd8 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    6d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    6d78:	e7ae      	b.n	6cd8 <z_impl_k_mutex_unlock+0xa8>
    6d7a:	bf00      	nop
    6d7c:	0000bad8 	.word	0x0000bad8
    6d80:	0000bb85 	.word	0x0000bb85
    6d84:	0000a107 	.word	0x0000a107
    6d88:	0000bba7 	.word	0x0000bba7
    6d8c:	20000cc8 	.word	0x20000cc8
    6d90:	0000bbcc 	.word	0x0000bbcc
    6d94:	0000bbe3 	.word	0x0000bbe3
    6d98:	0000bc0e 	.word	0x0000bc0e
    6d9c:	0000bc11 	.word	0x0000bc11
    6da0:	20000cf0 	.word	0x20000cf0
    6da4:	0000a768 	.word	0x0000a768
    6da8:	0000a7c1 	.word	0x0000a7c1
    6dac:	0000a7d6 	.word	0x0000a7d6
    6db0:	0000a795 	.word	0x0000a795
    6db4:	0000a7ac 	.word	0x0000a7ac

00006db8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6db8:	b538      	push	{r3, r4, r5, lr}
    6dba:	4604      	mov	r4, r0
	__asm__ volatile(
    6dbc:	f04f 0320 	mov.w	r3, #32
    6dc0:	f3ef 8511 	mrs	r5, BASEPRI
    6dc4:	f383 8812 	msr	BASEPRI_MAX, r3
    6dc8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6dcc:	4814      	ldr	r0, [pc, #80]	; (6e20 <z_impl_k_sem_give+0x68>)
    6dce:	f7ff fddd 	bl	698c <z_spin_lock_valid>
    6dd2:	b968      	cbnz	r0, 6df0 <z_impl_k_sem_give+0x38>
    6dd4:	4a13      	ldr	r2, [pc, #76]	; (6e24 <z_impl_k_sem_give+0x6c>)
    6dd6:	4914      	ldr	r1, [pc, #80]	; (6e28 <z_impl_k_sem_give+0x70>)
    6dd8:	4814      	ldr	r0, [pc, #80]	; (6e2c <z_impl_k_sem_give+0x74>)
    6dda:	238e      	movs	r3, #142	; 0x8e
    6ddc:	f002 f9d9 	bl	9192 <assert_print>
    6de0:	490f      	ldr	r1, [pc, #60]	; (6e20 <z_impl_k_sem_give+0x68>)
    6de2:	4813      	ldr	r0, [pc, #76]	; (6e30 <z_impl_k_sem_give+0x78>)
    6de4:	f002 f9d5 	bl	9192 <assert_print>
    6de8:	480e      	ldr	r0, [pc, #56]	; (6e24 <z_impl_k_sem_give+0x6c>)
    6dea:	218e      	movs	r1, #142	; 0x8e
    6dec:	f002 f9ca 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    6df0:	480b      	ldr	r0, [pc, #44]	; (6e20 <z_impl_k_sem_give+0x68>)
    6df2:	f7ff fde9 	bl	69c8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6df6:	4620      	mov	r0, r4
    6df8:	f000 ffb2 	bl	7d60 <z_unpend_first_thread>

	if (thread != NULL) {
    6dfc:	b148      	cbz	r0, 6e12 <z_impl_k_sem_give+0x5a>
    6dfe:	2200      	movs	r2, #0
    6e00:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6e02:	f000 fbaf 	bl	7564 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6e06:	4629      	mov	r1, r5
    6e08:	4805      	ldr	r0, [pc, #20]	; (6e20 <z_impl_k_sem_give+0x68>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6e0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6e0e:	f000 b95d 	b.w	70cc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6e12:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6e16:	429a      	cmp	r2, r3
    6e18:	bf18      	it	ne
    6e1a:	3301      	addne	r3, #1
    6e1c:	60a3      	str	r3, [r4, #8]
}
    6e1e:	e7f2      	b.n	6e06 <z_impl_k_sem_give+0x4e>
    6e20:	20000cf4 	.word	0x20000cf4
    6e24:	0000a768 	.word	0x0000a768
    6e28:	0000a7c1 	.word	0x0000a7c1
    6e2c:	0000a107 	.word	0x0000a107
    6e30:	0000a7d6 	.word	0x0000a7d6

00006e34 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    6e36:	4604      	mov	r4, r0
    6e38:	4616      	mov	r6, r2
    6e3a:	461d      	mov	r5, r3
    6e3c:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    6e40:	b17b      	cbz	r3, 6e62 <z_impl_k_sem_take+0x2e>
    6e42:	ea52 0305 	orrs.w	r3, r2, r5
    6e46:	d00c      	beq.n	6e62 <z_impl_k_sem_take+0x2e>
    6e48:	4935      	ldr	r1, [pc, #212]	; (6f20 <z_impl_k_sem_take+0xec>)
    6e4a:	4a36      	ldr	r2, [pc, #216]	; (6f24 <z_impl_k_sem_take+0xf0>)
    6e4c:	4836      	ldr	r0, [pc, #216]	; (6f28 <z_impl_k_sem_take+0xf4>)
    6e4e:	2379      	movs	r3, #121	; 0x79
    6e50:	f002 f99f 	bl	9192 <assert_print>
    6e54:	4835      	ldr	r0, [pc, #212]	; (6f2c <z_impl_k_sem_take+0xf8>)
    6e56:	f002 f99c 	bl	9192 <assert_print>
    6e5a:	4832      	ldr	r0, [pc, #200]	; (6f24 <z_impl_k_sem_take+0xf0>)
    6e5c:	2179      	movs	r1, #121	; 0x79
    6e5e:	f002 f991 	bl	9184 <assert_post_action>
    6e62:	f04f 0320 	mov.w	r3, #32
    6e66:	f3ef 8711 	mrs	r7, BASEPRI
    6e6a:	f383 8812 	msr	BASEPRI_MAX, r3
    6e6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e72:	482f      	ldr	r0, [pc, #188]	; (6f30 <z_impl_k_sem_take+0xfc>)
    6e74:	f7ff fd8a 	bl	698c <z_spin_lock_valid>
    6e78:	b968      	cbnz	r0, 6e96 <z_impl_k_sem_take+0x62>
    6e7a:	4a2e      	ldr	r2, [pc, #184]	; (6f34 <z_impl_k_sem_take+0x100>)
    6e7c:	492e      	ldr	r1, [pc, #184]	; (6f38 <z_impl_k_sem_take+0x104>)
    6e7e:	482a      	ldr	r0, [pc, #168]	; (6f28 <z_impl_k_sem_take+0xf4>)
    6e80:	238e      	movs	r3, #142	; 0x8e
    6e82:	f002 f986 	bl	9192 <assert_print>
    6e86:	492a      	ldr	r1, [pc, #168]	; (6f30 <z_impl_k_sem_take+0xfc>)
    6e88:	482c      	ldr	r0, [pc, #176]	; (6f3c <z_impl_k_sem_take+0x108>)
    6e8a:	f002 f982 	bl	9192 <assert_print>
    6e8e:	4829      	ldr	r0, [pc, #164]	; (6f34 <z_impl_k_sem_take+0x100>)
    6e90:	218e      	movs	r1, #142	; 0x8e
    6e92:	f002 f977 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e96:	4826      	ldr	r0, [pc, #152]	; (6f30 <z_impl_k_sem_take+0xfc>)
    6e98:	f7ff fd96 	bl	69c8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6e9c:	68a3      	ldr	r3, [r4, #8]
    6e9e:	b1d3      	cbz	r3, 6ed6 <z_impl_k_sem_take+0xa2>
		sem->count--;
    6ea0:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6ea2:	4823      	ldr	r0, [pc, #140]	; (6f30 <z_impl_k_sem_take+0xfc>)
    6ea4:	60a3      	str	r3, [r4, #8]
    6ea6:	f7ff fd7f 	bl	69a8 <z_spin_unlock_valid>
    6eaa:	b968      	cbnz	r0, 6ec8 <z_impl_k_sem_take+0x94>
    6eac:	4a21      	ldr	r2, [pc, #132]	; (6f34 <z_impl_k_sem_take+0x100>)
    6eae:	4924      	ldr	r1, [pc, #144]	; (6f40 <z_impl_k_sem_take+0x10c>)
    6eb0:	481d      	ldr	r0, [pc, #116]	; (6f28 <z_impl_k_sem_take+0xf4>)
    6eb2:	23b9      	movs	r3, #185	; 0xb9
    6eb4:	f002 f96d 	bl	9192 <assert_print>
    6eb8:	491d      	ldr	r1, [pc, #116]	; (6f30 <z_impl_k_sem_take+0xfc>)
    6eba:	4822      	ldr	r0, [pc, #136]	; (6f44 <z_impl_k_sem_take+0x110>)
    6ebc:	f002 f969 	bl	9192 <assert_print>
    6ec0:	481c      	ldr	r0, [pc, #112]	; (6f34 <z_impl_k_sem_take+0x100>)
    6ec2:	21b9      	movs	r1, #185	; 0xb9
    6ec4:	f002 f95e 	bl	9184 <assert_post_action>
	__asm__ volatile(
    6ec8:	f387 8811 	msr	BASEPRI, r7
    6ecc:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6ed0:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6ed2:	b003      	add	sp, #12
    6ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6ed6:	ea56 0305 	orrs.w	r3, r6, r5
    6eda:	d118      	bne.n	6f0e <z_impl_k_sem_take+0xda>
    6edc:	4814      	ldr	r0, [pc, #80]	; (6f30 <z_impl_k_sem_take+0xfc>)
    6ede:	f7ff fd63 	bl	69a8 <z_spin_unlock_valid>
    6ee2:	b968      	cbnz	r0, 6f00 <z_impl_k_sem_take+0xcc>
    6ee4:	4a13      	ldr	r2, [pc, #76]	; (6f34 <z_impl_k_sem_take+0x100>)
    6ee6:	4916      	ldr	r1, [pc, #88]	; (6f40 <z_impl_k_sem_take+0x10c>)
    6ee8:	480f      	ldr	r0, [pc, #60]	; (6f28 <z_impl_k_sem_take+0xf4>)
    6eea:	23b9      	movs	r3, #185	; 0xb9
    6eec:	f002 f951 	bl	9192 <assert_print>
    6ef0:	490f      	ldr	r1, [pc, #60]	; (6f30 <z_impl_k_sem_take+0xfc>)
    6ef2:	4814      	ldr	r0, [pc, #80]	; (6f44 <z_impl_k_sem_take+0x110>)
    6ef4:	f002 f94d 	bl	9192 <assert_print>
    6ef8:	480e      	ldr	r0, [pc, #56]	; (6f34 <z_impl_k_sem_take+0x100>)
    6efa:	21b9      	movs	r1, #185	; 0xb9
    6efc:	f002 f942 	bl	9184 <assert_post_action>
    6f00:	f387 8811 	msr	BASEPRI, r7
    6f04:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6f08:	f06f 000f 	mvn.w	r0, #15
    6f0c:	e7e1      	b.n	6ed2 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6f0e:	e9cd 6500 	strd	r6, r5, [sp]
    6f12:	4622      	mov	r2, r4
    6f14:	4639      	mov	r1, r7
    6f16:	4806      	ldr	r0, [pc, #24]	; (6f30 <z_impl_k_sem_take+0xfc>)
    6f18:	f000 fd28 	bl	796c <z_pend_curr>
	return ret;
    6f1c:	e7d9      	b.n	6ed2 <z_impl_k_sem_take+0x9e>
    6f1e:	bf00      	nop
    6f20:	0000bc62 	.word	0x0000bc62
    6f24:	0000bc42 	.word	0x0000bc42
    6f28:	0000a107 	.word	0x0000a107
    6f2c:	0000bc0e 	.word	0x0000bc0e
    6f30:	20000cf4 	.word	0x20000cf4
    6f34:	0000a768 	.word	0x0000a768
    6f38:	0000a7c1 	.word	0x0000a7c1
    6f3c:	0000a7d6 	.word	0x0000a7d6
    6f40:	0000a795 	.word	0x0000a795
    6f44:	0000a7ac 	.word	0x0000a7ac

00006f48 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    6f48:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    6f4a:	4d07      	ldr	r5, [pc, #28]	; (6f68 <z_reset_time_slice+0x20>)
    6f4c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    6f4e:	b154      	cbz	r4, 6f66 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    6f50:	f7fe f98e 	bl	5270 <sys_clock_elapsed>
    6f54:	4b05      	ldr	r3, [pc, #20]	; (6f6c <z_reset_time_slice+0x24>)
    6f56:	4404      	add	r4, r0
    6f58:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6f5a:	6828      	ldr	r0, [r5, #0]
    6f5c:	2100      	movs	r1, #0
	}
}
    6f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    6f62:	f001 bb57 	b.w	8614 <z_set_timeout_expiry>
}
    6f66:	bd38      	pop	{r3, r4, r5, pc}
    6f68:	20000d04 	.word	0x20000d04
    6f6c:	20000cc8 	.word	0x20000cc8

00006f70 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    6f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6f72:	4604      	mov	r4, r0
    6f74:	460d      	mov	r5, r1
	__asm__ volatile(
    6f76:	f04f 0320 	mov.w	r3, #32
    6f7a:	f3ef 8711 	mrs	r7, BASEPRI
    6f7e:	f383 8812 	msr	BASEPRI_MAX, r3
    6f82:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6f86:	4823      	ldr	r0, [pc, #140]	; (7014 <k_sched_time_slice_set+0xa4>)
    6f88:	f7ff fd00 	bl	698c <z_spin_lock_valid>
    6f8c:	b968      	cbnz	r0, 6faa <k_sched_time_slice_set+0x3a>
    6f8e:	4a22      	ldr	r2, [pc, #136]	; (7018 <k_sched_time_slice_set+0xa8>)
    6f90:	4922      	ldr	r1, [pc, #136]	; (701c <k_sched_time_slice_set+0xac>)
    6f92:	4823      	ldr	r0, [pc, #140]	; (7020 <k_sched_time_slice_set+0xb0>)
    6f94:	238e      	movs	r3, #142	; 0x8e
    6f96:	f002 f8fc 	bl	9192 <assert_print>
    6f9a:	491e      	ldr	r1, [pc, #120]	; (7014 <k_sched_time_slice_set+0xa4>)
    6f9c:	4821      	ldr	r0, [pc, #132]	; (7024 <k_sched_time_slice_set+0xb4>)
    6f9e:	f002 f8f8 	bl	9192 <assert_print>
    6fa2:	481d      	ldr	r0, [pc, #116]	; (7018 <k_sched_time_slice_set+0xa8>)
    6fa4:	218e      	movs	r1, #142	; 0x8e
    6fa6:	f002 f8ed 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    6faa:	481a      	ldr	r0, [pc, #104]	; (7014 <k_sched_time_slice_set+0xa4>)
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    6fac:	4e1e      	ldr	r6, [pc, #120]	; (7028 <k_sched_time_slice_set+0xb8>)
    6fae:	f7ff fd0b 	bl	69c8 <z_spin_lock_set_owner>
    6fb2:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    6fb4:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    6fb8:	f240 30e7 	movw	r0, #999	; 0x3e7
    6fbc:	6131      	str	r1, [r6, #16]
    6fbe:	2300      	movs	r3, #0
    6fc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6fc4:	fbe4 010c 	umlal	r0, r1, r4, ip
    6fc8:	f7f9 fa7c 	bl	4c4 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6fcc:	2c00      	cmp	r4, #0
    6fce:	4b17      	ldr	r3, [pc, #92]	; (702c <k_sched_time_slice_set+0xbc>)
    6fd0:	dc1c      	bgt.n	700c <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    6fd2:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    6fd4:	4b16      	ldr	r3, [pc, #88]	; (7030 <k_sched_time_slice_set+0xc0>)
		z_reset_time_slice(_current);
    6fd6:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    6fd8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    6fda:	f7ff ffb5 	bl	6f48 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6fde:	480d      	ldr	r0, [pc, #52]	; (7014 <k_sched_time_slice_set+0xa4>)
    6fe0:	f7ff fce2 	bl	69a8 <z_spin_unlock_valid>
    6fe4:	b968      	cbnz	r0, 7002 <k_sched_time_slice_set+0x92>
    6fe6:	4a0c      	ldr	r2, [pc, #48]	; (7018 <k_sched_time_slice_set+0xa8>)
    6fe8:	4912      	ldr	r1, [pc, #72]	; (7034 <k_sched_time_slice_set+0xc4>)
    6fea:	480d      	ldr	r0, [pc, #52]	; (7020 <k_sched_time_slice_set+0xb0>)
    6fec:	23b9      	movs	r3, #185	; 0xb9
    6fee:	f002 f8d0 	bl	9192 <assert_print>
    6ff2:	4908      	ldr	r1, [pc, #32]	; (7014 <k_sched_time_slice_set+0xa4>)
    6ff4:	4810      	ldr	r0, [pc, #64]	; (7038 <k_sched_time_slice_set+0xc8>)
    6ff6:	f002 f8cc 	bl	9192 <assert_print>
    6ffa:	4807      	ldr	r0, [pc, #28]	; (7018 <k_sched_time_slice_set+0xa8>)
    6ffc:	21b9      	movs	r1, #185	; 0xb9
    6ffe:	f002 f8c1 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7002:	f387 8811 	msr	BASEPRI, r7
    7006:	f3bf 8f6f 	isb	sy
	}
}
    700a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    700c:	2802      	cmp	r0, #2
    700e:	bfb8      	it	lt
    7010:	2002      	movlt	r0, #2
    7012:	e7de      	b.n	6fd2 <k_sched_time_slice_set+0x62>
    7014:	20000cfc 	.word	0x20000cfc
    7018:	0000a768 	.word	0x0000a768
    701c:	0000a7c1 	.word	0x0000a7c1
    7020:	0000a107 	.word	0x0000a107
    7024:	0000a7d6 	.word	0x0000a7d6
    7028:	20000cc8 	.word	0x20000cc8
    702c:	20000d04 	.word	0x20000d04
    7030:	20000d00 	.word	0x20000d00
    7034:	0000a795 	.word	0x0000a795
    7038:	0000a7ac 	.word	0x0000a7ac

0000703c <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    703c:	b538      	push	{r3, r4, r5, lr}
    703e:	4604      	mov	r4, r0
	__asm__ volatile(
    7040:	f04f 0320 	mov.w	r3, #32
    7044:	f3ef 8511 	mrs	r5, BASEPRI
    7048:	f383 8812 	msr	BASEPRI_MAX, r3
    704c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7050:	4817      	ldr	r0, [pc, #92]	; (70b0 <z_unpend_thread_no_timeout+0x74>)
    7052:	f7ff fc9b 	bl	698c <z_spin_lock_valid>
    7056:	b968      	cbnz	r0, 7074 <z_unpend_thread_no_timeout+0x38>
    7058:	4a16      	ldr	r2, [pc, #88]	; (70b4 <z_unpend_thread_no_timeout+0x78>)
    705a:	4917      	ldr	r1, [pc, #92]	; (70b8 <z_unpend_thread_no_timeout+0x7c>)
    705c:	4817      	ldr	r0, [pc, #92]	; (70bc <z_unpend_thread_no_timeout+0x80>)
    705e:	238e      	movs	r3, #142	; 0x8e
    7060:	f002 f897 	bl	9192 <assert_print>
    7064:	4912      	ldr	r1, [pc, #72]	; (70b0 <z_unpend_thread_no_timeout+0x74>)
    7066:	4816      	ldr	r0, [pc, #88]	; (70c0 <z_unpend_thread_no_timeout+0x84>)
    7068:	f002 f893 	bl	9192 <assert_print>
    706c:	4811      	ldr	r0, [pc, #68]	; (70b4 <z_unpend_thread_no_timeout+0x78>)
    706e:	218e      	movs	r1, #142	; 0x8e
    7070:	f002 f888 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    7074:	480e      	ldr	r0, [pc, #56]	; (70b0 <z_unpend_thread_no_timeout+0x74>)
    7076:	f7ff fca7 	bl	69c8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    707a:	4620      	mov	r0, r4
    707c:	f000 f900 	bl	7280 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7080:	480b      	ldr	r0, [pc, #44]	; (70b0 <z_unpend_thread_no_timeout+0x74>)
    7082:	f7ff fc91 	bl	69a8 <z_spin_unlock_valid>
    7086:	b968      	cbnz	r0, 70a4 <z_unpend_thread_no_timeout+0x68>
    7088:	4a0a      	ldr	r2, [pc, #40]	; (70b4 <z_unpend_thread_no_timeout+0x78>)
    708a:	490e      	ldr	r1, [pc, #56]	; (70c4 <z_unpend_thread_no_timeout+0x88>)
    708c:	480b      	ldr	r0, [pc, #44]	; (70bc <z_unpend_thread_no_timeout+0x80>)
    708e:	23b9      	movs	r3, #185	; 0xb9
    7090:	f002 f87f 	bl	9192 <assert_print>
    7094:	4906      	ldr	r1, [pc, #24]	; (70b0 <z_unpend_thread_no_timeout+0x74>)
    7096:	480c      	ldr	r0, [pc, #48]	; (70c8 <z_unpend_thread_no_timeout+0x8c>)
    7098:	f002 f87b 	bl	9192 <assert_print>
    709c:	4805      	ldr	r0, [pc, #20]	; (70b4 <z_unpend_thread_no_timeout+0x78>)
    709e:	21b9      	movs	r1, #185	; 0xb9
    70a0:	f002 f870 	bl	9184 <assert_post_action>
	__asm__ volatile(
    70a4:	f385 8811 	msr	BASEPRI, r5
    70a8:	f3bf 8f6f 	isb	sy
	}
}
    70ac:	bd38      	pop	{r3, r4, r5, pc}
    70ae:	bf00      	nop
    70b0:	20000cfc 	.word	0x20000cfc
    70b4:	0000a768 	.word	0x0000a768
    70b8:	0000a7c1 	.word	0x0000a7c1
    70bc:	0000a107 	.word	0x0000a107
    70c0:	0000a7d6 	.word	0x0000a7d6
    70c4:	0000a795 	.word	0x0000a795
    70c8:	0000a7ac 	.word	0x0000a7ac

000070cc <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    70cc:	b538      	push	{r3, r4, r5, lr}
    70ce:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    70d0:	460d      	mov	r5, r1
    70d2:	b9e9      	cbnz	r1, 7110 <z_reschedule+0x44>
    70d4:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    70d8:	b9d3      	cbnz	r3, 7110 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    70da:	4b19      	ldr	r3, [pc, #100]	; (7140 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    70dc:	69da      	ldr	r2, [r3, #28]
    70de:	689b      	ldr	r3, [r3, #8]
    70e0:	429a      	cmp	r2, r3
    70e2:	d015      	beq.n	7110 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    70e4:	f7ff fc60 	bl	69a8 <z_spin_unlock_valid>
    70e8:	b968      	cbnz	r0, 7106 <z_reschedule+0x3a>
    70ea:	4a16      	ldr	r2, [pc, #88]	; (7144 <z_reschedule+0x78>)
    70ec:	4916      	ldr	r1, [pc, #88]	; (7148 <z_reschedule+0x7c>)
    70ee:	4817      	ldr	r0, [pc, #92]	; (714c <z_reschedule+0x80>)
    70f0:	23d0      	movs	r3, #208	; 0xd0
    70f2:	f002 f84e 	bl	9192 <assert_print>
    70f6:	4816      	ldr	r0, [pc, #88]	; (7150 <z_reschedule+0x84>)
    70f8:	4621      	mov	r1, r4
    70fa:	f002 f84a 	bl	9192 <assert_print>
    70fe:	4811      	ldr	r0, [pc, #68]	; (7144 <z_reschedule+0x78>)
    7100:	21d0      	movs	r1, #208	; 0xd0
    7102:	f002 f83f 	bl	9184 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    7106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    710a:	2000      	movs	r0, #0
    710c:	f7fc b870 	b.w	31f0 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7110:	4620      	mov	r0, r4
    7112:	f7ff fc49 	bl	69a8 <z_spin_unlock_valid>
    7116:	b968      	cbnz	r0, 7134 <z_reschedule+0x68>
    7118:	4a0a      	ldr	r2, [pc, #40]	; (7144 <z_reschedule+0x78>)
    711a:	490b      	ldr	r1, [pc, #44]	; (7148 <z_reschedule+0x7c>)
    711c:	480b      	ldr	r0, [pc, #44]	; (714c <z_reschedule+0x80>)
    711e:	23b9      	movs	r3, #185	; 0xb9
    7120:	f002 f837 	bl	9192 <assert_print>
    7124:	480a      	ldr	r0, [pc, #40]	; (7150 <z_reschedule+0x84>)
    7126:	4621      	mov	r1, r4
    7128:	f002 f833 	bl	9192 <assert_print>
    712c:	4805      	ldr	r0, [pc, #20]	; (7144 <z_reschedule+0x78>)
    712e:	21b9      	movs	r1, #185	; 0xb9
    7130:	f002 f828 	bl	9184 <assert_post_action>
    7134:	f385 8811 	msr	BASEPRI, r5
    7138:	f3bf 8f6f 	isb	sy
    713c:	bd38      	pop	{r3, r4, r5, pc}
    713e:	bf00      	nop
    7140:	20000cc8 	.word	0x20000cc8
    7144:	0000a768 	.word	0x0000a768
    7148:	0000a795 	.word	0x0000a795
    714c:	0000a107 	.word	0x0000a107
    7150:	0000a7ac 	.word	0x0000a7ac

00007154 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    7154:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7156:	f04f 0320 	mov.w	r3, #32
    715a:	f3ef 8511 	mrs	r5, BASEPRI
    715e:	f383 8812 	msr	BASEPRI_MAX, r3
    7162:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7166:	4829      	ldr	r0, [pc, #164]	; (720c <k_sched_lock+0xb8>)
    7168:	f7ff fc10 	bl	698c <z_spin_lock_valid>
    716c:	b968      	cbnz	r0, 718a <k_sched_lock+0x36>
    716e:	4a28      	ldr	r2, [pc, #160]	; (7210 <k_sched_lock+0xbc>)
    7170:	4928      	ldr	r1, [pc, #160]	; (7214 <k_sched_lock+0xc0>)
    7172:	4829      	ldr	r0, [pc, #164]	; (7218 <k_sched_lock+0xc4>)
    7174:	238e      	movs	r3, #142	; 0x8e
    7176:	f002 f80c 	bl	9192 <assert_print>
    717a:	4924      	ldr	r1, [pc, #144]	; (720c <k_sched_lock+0xb8>)
    717c:	4827      	ldr	r0, [pc, #156]	; (721c <k_sched_lock+0xc8>)
    717e:	f002 f808 	bl	9192 <assert_print>
    7182:	4823      	ldr	r0, [pc, #140]	; (7210 <k_sched_lock+0xbc>)
    7184:	218e      	movs	r1, #142	; 0x8e
    7186:	f001 fffd 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    718a:	4820      	ldr	r0, [pc, #128]	; (720c <k_sched_lock+0xb8>)
    718c:	f7ff fc1c 	bl	69c8 <z_spin_lock_set_owner>
    7190:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7194:	b163      	cbz	r3, 71b0 <k_sched_lock+0x5c>
    7196:	4922      	ldr	r1, [pc, #136]	; (7220 <k_sched_lock+0xcc>)
    7198:	4a22      	ldr	r2, [pc, #136]	; (7224 <k_sched_lock+0xd0>)
    719a:	481f      	ldr	r0, [pc, #124]	; (7218 <k_sched_lock+0xc4>)
    719c:	23fd      	movs	r3, #253	; 0xfd
    719e:	f001 fff8 	bl	9192 <assert_print>
    71a2:	4821      	ldr	r0, [pc, #132]	; (7228 <k_sched_lock+0xd4>)
    71a4:	f001 fff5 	bl	9192 <assert_print>
    71a8:	481e      	ldr	r0, [pc, #120]	; (7224 <k_sched_lock+0xd0>)
    71aa:	21fd      	movs	r1, #253	; 0xfd
    71ac:	f001 ffea 	bl	9184 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    71b0:	4c1e      	ldr	r4, [pc, #120]	; (722c <k_sched_lock+0xd8>)
    71b2:	68a3      	ldr	r3, [r4, #8]
    71b4:	7bdb      	ldrb	r3, [r3, #15]
    71b6:	2b01      	cmp	r3, #1
    71b8:	d10c      	bne.n	71d4 <k_sched_lock+0x80>
    71ba:	491d      	ldr	r1, [pc, #116]	; (7230 <k_sched_lock+0xdc>)
    71bc:	4a19      	ldr	r2, [pc, #100]	; (7224 <k_sched_lock+0xd0>)
    71be:	4816      	ldr	r0, [pc, #88]	; (7218 <k_sched_lock+0xc4>)
    71c0:	23fe      	movs	r3, #254	; 0xfe
    71c2:	f001 ffe6 	bl	9192 <assert_print>
    71c6:	4818      	ldr	r0, [pc, #96]	; (7228 <k_sched_lock+0xd4>)
    71c8:	f001 ffe3 	bl	9192 <assert_print>
    71cc:	4815      	ldr	r0, [pc, #84]	; (7224 <k_sched_lock+0xd0>)
    71ce:	21fe      	movs	r1, #254	; 0xfe
    71d0:	f001 ffd8 	bl	9184 <assert_post_action>
	--_current->base.sched_locked;
    71d4:	68a2      	ldr	r2, [r4, #8]
    71d6:	7bd3      	ldrb	r3, [r2, #15]
    71d8:	3b01      	subs	r3, #1
    71da:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71dc:	480b      	ldr	r0, [pc, #44]	; (720c <k_sched_lock+0xb8>)
    71de:	f7ff fbe3 	bl	69a8 <z_spin_unlock_valid>
    71e2:	b968      	cbnz	r0, 7200 <k_sched_lock+0xac>
    71e4:	4a0a      	ldr	r2, [pc, #40]	; (7210 <k_sched_lock+0xbc>)
    71e6:	4913      	ldr	r1, [pc, #76]	; (7234 <k_sched_lock+0xe0>)
    71e8:	480b      	ldr	r0, [pc, #44]	; (7218 <k_sched_lock+0xc4>)
    71ea:	23b9      	movs	r3, #185	; 0xb9
    71ec:	f001 ffd1 	bl	9192 <assert_print>
    71f0:	4906      	ldr	r1, [pc, #24]	; (720c <k_sched_lock+0xb8>)
    71f2:	4811      	ldr	r0, [pc, #68]	; (7238 <k_sched_lock+0xe4>)
    71f4:	f001 ffcd 	bl	9192 <assert_print>
    71f8:	4805      	ldr	r0, [pc, #20]	; (7210 <k_sched_lock+0xbc>)
    71fa:	21b9      	movs	r1, #185	; 0xb9
    71fc:	f001 ffc2 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7200:	f385 8811 	msr	BASEPRI, r5
    7204:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    7208:	bd38      	pop	{r3, r4, r5, pc}
    720a:	bf00      	nop
    720c:	20000cfc 	.word	0x20000cfc
    7210:	0000a768 	.word	0x0000a768
    7214:	0000a7c1 	.word	0x0000a7c1
    7218:	0000a107 	.word	0x0000a107
    721c:	0000a7d6 	.word	0x0000a7d6
    7220:	0000bad8 	.word	0x0000bad8
    7224:	0000bbe3 	.word	0x0000bbe3
    7228:	0000bc0e 	.word	0x0000bc0e
    722c:	20000cc8 	.word	0x20000cc8
    7230:	0000bc11 	.word	0x0000bc11
    7234:	0000a795 	.word	0x0000a795
    7238:	0000a7ac 	.word	0x0000a7ac

0000723c <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    723c:	4b0c      	ldr	r3, [pc, #48]	; (7270 <z_priq_dumb_remove+0x34>)
    723e:	4299      	cmp	r1, r3
{
    7240:	b510      	push	{r4, lr}
    7242:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7244:	d10b      	bne.n	725e <z_priq_dumb_remove+0x22>
    7246:	490b      	ldr	r1, [pc, #44]	; (7274 <z_priq_dumb_remove+0x38>)
    7248:	480b      	ldr	r0, [pc, #44]	; (7278 <z_priq_dumb_remove+0x3c>)
    724a:	4a0c      	ldr	r2, [pc, #48]	; (727c <z_priq_dumb_remove+0x40>)
    724c:	f240 433d 	movw	r3, #1085	; 0x43d
    7250:	f001 ff9f 	bl	9192 <assert_print>
    7254:	4809      	ldr	r0, [pc, #36]	; (727c <z_priq_dumb_remove+0x40>)
    7256:	f240 413d 	movw	r1, #1085	; 0x43d
    725a:	f001 ff93 	bl	9184 <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    725e:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
    7262:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7264:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7266:	2300      	movs	r3, #0
	node->prev = NULL;
    7268:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    726c:	bd10      	pop	{r4, pc}
    726e:	bf00      	nop
    7270:	20000480 	.word	0x20000480
    7274:	0000bcd2 	.word	0x0000bcd2
    7278:	0000a107 	.word	0x0000a107
    727c:	0000bcb0 	.word	0x0000bcb0

00007280 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    7280:	6883      	ldr	r3, [r0, #8]
{
    7282:	b510      	push	{r4, lr}
    7284:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    7286:	b95b      	cbnz	r3, 72a0 <unpend_thread_no_timeout+0x20>
    7288:	490b      	ldr	r1, [pc, #44]	; (72b8 <unpend_thread_no_timeout+0x38>)
    728a:	480c      	ldr	r0, [pc, #48]	; (72bc <unpend_thread_no_timeout+0x3c>)
    728c:	4a0c      	ldr	r2, [pc, #48]	; (72c0 <unpend_thread_no_timeout+0x40>)
    728e:	f240 23b9 	movw	r3, #697	; 0x2b9
    7292:	f001 ff7e 	bl	9192 <assert_print>
    7296:	480a      	ldr	r0, [pc, #40]	; (72c0 <unpend_thread_no_timeout+0x40>)
    7298:	f240 21b9 	movw	r1, #697	; 0x2b9
    729c:	f001 ff72 	bl	9184 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    72a0:	68a0      	ldr	r0, [r4, #8]
    72a2:	4621      	mov	r1, r4
    72a4:	f7ff ffca 	bl	723c <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    72a8:	7b63      	ldrb	r3, [r4, #13]
    72aa:	f023 0302 	bic.w	r3, r3, #2
    72ae:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    72b0:	2300      	movs	r3, #0
    72b2:	60a3      	str	r3, [r4, #8]
}
    72b4:	bd10      	pop	{r4, pc}
    72b6:	bf00      	nop
    72b8:	0000bcf3 	.word	0x0000bcf3
    72bc:	0000a107 	.word	0x0000a107
    72c0:	0000bcb0 	.word	0x0000bcb0

000072c4 <update_cache>:
{
    72c4:	b538      	push	{r3, r4, r5, lr}
    72c6:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    72c8:	4814      	ldr	r0, [pc, #80]	; (731c <update_cache+0x58>)
    72ca:	4d15      	ldr	r5, [pc, #84]	; (7320 <update_cache+0x5c>)
    72cc:	f002 fbae 	bl	9a2c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    72d0:	4604      	mov	r4, r0
    72d2:	b900      	cbnz	r0, 72d6 <update_cache+0x12>
    72d4:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    72d6:	b9ca      	cbnz	r2, 730c <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    72d8:	68ab      	ldr	r3, [r5, #8]
    72da:	b963      	cbnz	r3, 72f6 <update_cache+0x32>
    72dc:	4911      	ldr	r1, [pc, #68]	; (7324 <update_cache+0x60>)
    72de:	4a12      	ldr	r2, [pc, #72]	; (7328 <update_cache+0x64>)
    72e0:	4812      	ldr	r0, [pc, #72]	; (732c <update_cache+0x68>)
    72e2:	2389      	movs	r3, #137	; 0x89
    72e4:	f001 ff55 	bl	9192 <assert_print>
    72e8:	4811      	ldr	r0, [pc, #68]	; (7330 <update_cache+0x6c>)
    72ea:	f001 ff52 	bl	9192 <assert_print>
    72ee:	480e      	ldr	r0, [pc, #56]	; (7328 <update_cache+0x64>)
    72f0:	2189      	movs	r1, #137	; 0x89
    72f2:	f001 ff47 	bl	9184 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    72f6:	68ab      	ldr	r3, [r5, #8]
    72f8:	7b5a      	ldrb	r2, [r3, #13]
    72fa:	06d2      	lsls	r2, r2, #27
    72fc:	d106      	bne.n	730c <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    72fe:	69a2      	ldr	r2, [r4, #24]
    7300:	b922      	cbnz	r2, 730c <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    7302:	89da      	ldrh	r2, [r3, #14]
    7304:	2a7f      	cmp	r2, #127	; 0x7f
    7306:	d901      	bls.n	730c <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    7308:	61eb      	str	r3, [r5, #28]
}
    730a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    730c:	68ab      	ldr	r3, [r5, #8]
    730e:	42a3      	cmp	r3, r4
    7310:	d002      	beq.n	7318 <update_cache+0x54>
			z_reset_time_slice(thread);
    7312:	4620      	mov	r0, r4
    7314:	f7ff fe18 	bl	6f48 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    7318:	61ec      	str	r4, [r5, #28]
}
    731a:	e7f6      	b.n	730a <update_cache+0x46>
    731c:	20000ce8 	.word	0x20000ce8
    7320:	20000cc8 	.word	0x20000cc8
    7324:	0000bd0a 	.word	0x0000bd0a
    7328:	0000bcb0 	.word	0x0000bcb0
    732c:	0000a107 	.word	0x0000a107
    7330:	0000bc0e 	.word	0x0000bc0e

00007334 <move_thread_to_end_of_prio_q>:
{
    7334:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    7336:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    733a:	7b43      	ldrb	r3, [r0, #13]
    733c:	2a00      	cmp	r2, #0
{
    733e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7340:	da06      	bge.n	7350 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7342:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7346:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7348:	4601      	mov	r1, r0
    734a:	481e      	ldr	r0, [pc, #120]	; (73c4 <move_thread_to_end_of_prio_q+0x90>)
    734c:	f7ff ff76 	bl	723c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7350:	7b63      	ldrb	r3, [r4, #13]
    7352:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7356:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7358:	4b1b      	ldr	r3, [pc, #108]	; (73c8 <move_thread_to_end_of_prio_q+0x94>)
    735a:	429c      	cmp	r4, r3
    735c:	d109      	bne.n	7372 <move_thread_to_end_of_prio_q+0x3e>
    735e:	491b      	ldr	r1, [pc, #108]	; (73cc <move_thread_to_end_of_prio_q+0x98>)
    7360:	481b      	ldr	r0, [pc, #108]	; (73d0 <move_thread_to_end_of_prio_q+0x9c>)
    7362:	4a1c      	ldr	r2, [pc, #112]	; (73d4 <move_thread_to_end_of_prio_q+0xa0>)
    7364:	23ba      	movs	r3, #186	; 0xba
    7366:	f001 ff14 	bl	9192 <assert_print>
    736a:	481a      	ldr	r0, [pc, #104]	; (73d4 <move_thread_to_end_of_prio_q+0xa0>)
    736c:	21ba      	movs	r1, #186	; 0xba
    736e:	f001 ff09 	bl	9184 <assert_post_action>
	return list->head == list;
    7372:	4a19      	ldr	r2, [pc, #100]	; (73d8 <move_thread_to_end_of_prio_q+0xa4>)
	return (node == list->tail) ? NULL : node->next;
    7374:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7378:	f102 0520 	add.w	r5, r2, #32
    737c:	42ab      	cmp	r3, r5
    737e:	d01b      	beq.n	73b8 <move_thread_to_end_of_prio_q+0x84>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7380:	b1d3      	cbz	r3, 73b8 <move_thread_to_end_of_prio_q+0x84>
	int32_t b1 = thread_1->base.prio;
    7382:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7386:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    738a:	428e      	cmp	r6, r1
    738c:	d00f      	beq.n	73ae <move_thread_to_end_of_prio_q+0x7a>
		return b2 - b1;
    738e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7390:	2900      	cmp	r1, #0
    7392:	dd0c      	ble.n	73ae <move_thread_to_end_of_prio_q+0x7a>
	sys_dnode_t *const prev = successor->prev;
    7394:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    7396:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    739a:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    739c:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    739e:	6890      	ldr	r0, [r2, #8]
    73a0:	1b03      	subs	r3, r0, r4
    73a2:	4258      	negs	r0, r3
}
    73a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    73a8:	4158      	adcs	r0, r3
    73aa:	f7ff bf8b 	b.w	72c4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    73ae:	4283      	cmp	r3, r0
    73b0:	d002      	beq.n	73b8 <move_thread_to_end_of_prio_q+0x84>
    73b2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    73b4:	2b00      	cmp	r3, #0
    73b6:	d1e6      	bne.n	7386 <move_thread_to_end_of_prio_q+0x52>
	node->prev = tail;
    73b8:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    73bc:	6004      	str	r4, [r0, #0]
	list->tail = node;
    73be:	6254      	str	r4, [r2, #36]	; 0x24
}
    73c0:	e7ed      	b.n	739e <move_thread_to_end_of_prio_q+0x6a>
    73c2:	bf00      	nop
    73c4:	20000ce8 	.word	0x20000ce8
    73c8:	20000480 	.word	0x20000480
    73cc:	0000bcd2 	.word	0x0000bcd2
    73d0:	0000a107 	.word	0x0000a107
    73d4:	0000bcb0 	.word	0x0000bcb0
    73d8:	20000cc8 	.word	0x20000cc8

000073dc <z_time_slice>:
{
    73dc:	b570      	push	{r4, r5, r6, lr}
    73de:	4605      	mov	r5, r0
	__asm__ volatile(
    73e0:	f04f 0320 	mov.w	r3, #32
    73e4:	f3ef 8611 	mrs	r6, BASEPRI
    73e8:	f383 8812 	msr	BASEPRI_MAX, r3
    73ec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    73f0:	482a      	ldr	r0, [pc, #168]	; (749c <z_time_slice+0xc0>)
    73f2:	f7ff facb 	bl	698c <z_spin_lock_valid>
    73f6:	b968      	cbnz	r0, 7414 <z_time_slice+0x38>
    73f8:	4a29      	ldr	r2, [pc, #164]	; (74a0 <z_time_slice+0xc4>)
    73fa:	492a      	ldr	r1, [pc, #168]	; (74a4 <z_time_slice+0xc8>)
    73fc:	482a      	ldr	r0, [pc, #168]	; (74a8 <z_time_slice+0xcc>)
    73fe:	238e      	movs	r3, #142	; 0x8e
    7400:	f001 fec7 	bl	9192 <assert_print>
    7404:	4925      	ldr	r1, [pc, #148]	; (749c <z_time_slice+0xc0>)
    7406:	4829      	ldr	r0, [pc, #164]	; (74ac <z_time_slice+0xd0>)
    7408:	f001 fec3 	bl	9192 <assert_print>
    740c:	4824      	ldr	r0, [pc, #144]	; (74a0 <z_time_slice+0xc4>)
    740e:	218e      	movs	r1, #142	; 0x8e
    7410:	f001 feb8 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    7414:	4821      	ldr	r0, [pc, #132]	; (749c <z_time_slice+0xc0>)
    7416:	f7ff fad7 	bl	69c8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
    741a:	4b25      	ldr	r3, [pc, #148]	; (74b0 <z_time_slice+0xd4>)
    741c:	4a25      	ldr	r2, [pc, #148]	; (74b4 <z_time_slice+0xd8>)
    741e:	689c      	ldr	r4, [r3, #8]
    7420:	6811      	ldr	r1, [r2, #0]
    7422:	428c      	cmp	r4, r1
    7424:	d119      	bne.n	745a <z_time_slice+0x7e>
	z_reset_time_slice(curr);
    7426:	4620      	mov	r0, r4
    7428:	f7ff fd8e 	bl	6f48 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    742c:	481b      	ldr	r0, [pc, #108]	; (749c <z_time_slice+0xc0>)
    742e:	f7ff fabb 	bl	69a8 <z_spin_unlock_valid>
    7432:	b968      	cbnz	r0, 7450 <z_time_slice+0x74>
    7434:	4a1a      	ldr	r2, [pc, #104]	; (74a0 <z_time_slice+0xc4>)
    7436:	4920      	ldr	r1, [pc, #128]	; (74b8 <z_time_slice+0xdc>)
    7438:	481b      	ldr	r0, [pc, #108]	; (74a8 <z_time_slice+0xcc>)
    743a:	23b9      	movs	r3, #185	; 0xb9
    743c:	f001 fea9 	bl	9192 <assert_print>
    7440:	4916      	ldr	r1, [pc, #88]	; (749c <z_time_slice+0xc0>)
    7442:	481e      	ldr	r0, [pc, #120]	; (74bc <z_time_slice+0xe0>)
    7444:	f001 fea5 	bl	9192 <assert_print>
    7448:	4815      	ldr	r0, [pc, #84]	; (74a0 <z_time_slice+0xc4>)
    744a:	21b9      	movs	r1, #185	; 0xb9
    744c:	f001 fe9a 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7450:	f386 8811 	msr	BASEPRI, r6
    7454:	f3bf 8f6f 	isb	sy
}
    7458:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    745a:	2100      	movs	r1, #0
    745c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    745e:	4a18      	ldr	r2, [pc, #96]	; (74c0 <z_time_slice+0xe4>)
	if (slice_time(_current) && sliceable(_current)) {
    7460:	6812      	ldr	r2, [r2, #0]
    7462:	b1c2      	cbz	r2, 7496 <z_time_slice+0xba>
		&& !z_is_idle_thread_object(thread);
    7464:	89e2      	ldrh	r2, [r4, #14]
    7466:	2a7f      	cmp	r2, #127	; 0x7f
    7468:	d815      	bhi.n	7496 <z_time_slice+0xba>
		&& !z_is_thread_prevented_from_running(thread)
    746a:	7b62      	ldrb	r2, [r4, #13]
    746c:	06d2      	lsls	r2, r2, #27
    746e:	d112      	bne.n	7496 <z_time_slice+0xba>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    7470:	4a14      	ldr	r2, [pc, #80]	; (74c4 <z_time_slice+0xe8>)
    7472:	f994 100e 	ldrsb.w	r1, [r4, #14]
    7476:	6812      	ldr	r2, [r2, #0]
    7478:	4291      	cmp	r1, r2
    747a:	db0c      	blt.n	7496 <z_time_slice+0xba>
	if (slice_time(_current) && sliceable(_current)) {
    747c:	4a12      	ldr	r2, [pc, #72]	; (74c8 <z_time_slice+0xec>)
    747e:	4294      	cmp	r4, r2
    7480:	d009      	beq.n	7496 <z_time_slice+0xba>
		if (ticks >= _current_cpu->slice_ticks) {
    7482:	691a      	ldr	r2, [r3, #16]
    7484:	42aa      	cmp	r2, r5
    7486:	dc03      	bgt.n	7490 <z_time_slice+0xb4>
		move_thread_to_end_of_prio_q(curr);
    7488:	4620      	mov	r0, r4
    748a:	f7ff ff53 	bl	7334 <move_thread_to_end_of_prio_q>
    748e:	e7ca      	b.n	7426 <z_time_slice+0x4a>
			_current_cpu->slice_ticks -= ticks;
    7490:	1b52      	subs	r2, r2, r5
		_current_cpu->slice_ticks = 0;
    7492:	611a      	str	r2, [r3, #16]
    7494:	e7ca      	b.n	742c <z_time_slice+0x50>
    7496:	2200      	movs	r2, #0
    7498:	e7fb      	b.n	7492 <z_time_slice+0xb6>
    749a:	bf00      	nop
    749c:	20000cfc 	.word	0x20000cfc
    74a0:	0000a768 	.word	0x0000a768
    74a4:	0000a7c1 	.word	0x0000a7c1
    74a8:	0000a107 	.word	0x0000a107
    74ac:	0000a7d6 	.word	0x0000a7d6
    74b0:	20000cc8 	.word	0x20000cc8
    74b4:	20000cf8 	.word	0x20000cf8
    74b8:	0000a795 	.word	0x0000a795
    74bc:	0000a7ac 	.word	0x0000a7ac
    74c0:	20000d04 	.word	0x20000d04
    74c4:	20000d00 	.word	0x20000d00
    74c8:	20000480 	.word	0x20000480

000074cc <ready_thread>:
{
    74cc:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    74ce:	f990 200d 	ldrsb.w	r2, [r0, #13]
    74d2:	7b43      	ldrb	r3, [r0, #13]
    74d4:	2a00      	cmp	r2, #0
{
    74d6:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    74d8:	db39      	blt.n	754e <ready_thread+0x82>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    74da:	06da      	lsls	r2, r3, #27
    74dc:	d137      	bne.n	754e <ready_thread+0x82>
    74de:	6982      	ldr	r2, [r0, #24]
    74e0:	2a00      	cmp	r2, #0
    74e2:	d134      	bne.n	754e <ready_thread+0x82>
	thread->base.thread_state |= _THREAD_QUEUED;
    74e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    74e8:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    74ea:	4b19      	ldr	r3, [pc, #100]	; (7550 <ready_thread+0x84>)
    74ec:	4298      	cmp	r0, r3
    74ee:	d109      	bne.n	7504 <ready_thread+0x38>
    74f0:	4918      	ldr	r1, [pc, #96]	; (7554 <ready_thread+0x88>)
    74f2:	4819      	ldr	r0, [pc, #100]	; (7558 <ready_thread+0x8c>)
    74f4:	4a19      	ldr	r2, [pc, #100]	; (755c <ready_thread+0x90>)
    74f6:	23ba      	movs	r3, #186	; 0xba
    74f8:	f001 fe4b 	bl	9192 <assert_print>
    74fc:	4817      	ldr	r0, [pc, #92]	; (755c <ready_thread+0x90>)
    74fe:	21ba      	movs	r1, #186	; 0xba
    7500:	f001 fe40 	bl	9184 <assert_post_action>
	return list->head == list;
    7504:	4a16      	ldr	r2, [pc, #88]	; (7560 <ready_thread+0x94>)
	return (node == list->tail) ? NULL : node->next;
    7506:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    750a:	f102 0520 	add.w	r5, r2, #32
    750e:	42ab      	cmp	r3, r5
    7510:	d018      	beq.n	7544 <ready_thread+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7512:	b1bb      	cbz	r3, 7544 <ready_thread+0x78>
	int32_t b1 = thread_1->base.prio;
    7514:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7518:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    751c:	428e      	cmp	r6, r1
    751e:	d00c      	beq.n	753a <ready_thread+0x6e>
		return b2 - b1;
    7520:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    7522:	2900      	cmp	r1, #0
    7524:	dd09      	ble.n	753a <ready_thread+0x6e>
	sys_dnode_t *const prev = successor->prev;
    7526:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7528:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    752c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    752e:	605c      	str	r4, [r3, #4]
}
    7530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    7534:	2000      	movs	r0, #0
    7536:	f7ff bec5 	b.w	72c4 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    753a:	4298      	cmp	r0, r3
    753c:	d002      	beq.n	7544 <ready_thread+0x78>
    753e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7540:	2b00      	cmp	r3, #0
    7542:	d1e9      	bne.n	7518 <ready_thread+0x4c>
	node->prev = tail;
    7544:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    7548:	6004      	str	r4, [r0, #0]
	list->tail = node;
    754a:	6254      	str	r4, [r2, #36]	; 0x24
}
    754c:	e7f0      	b.n	7530 <ready_thread+0x64>
}
    754e:	bd70      	pop	{r4, r5, r6, pc}
    7550:	20000480 	.word	0x20000480
    7554:	0000bcd2 	.word	0x0000bcd2
    7558:	0000a107 	.word	0x0000a107
    755c:	0000bcb0 	.word	0x0000bcb0
    7560:	20000cc8 	.word	0x20000cc8

00007564 <z_ready_thread>:
{
    7564:	b538      	push	{r3, r4, r5, lr}
    7566:	4604      	mov	r4, r0
	__asm__ volatile(
    7568:	f04f 0320 	mov.w	r3, #32
    756c:	f3ef 8511 	mrs	r5, BASEPRI
    7570:	f383 8812 	msr	BASEPRI_MAX, r3
    7574:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7578:	4817      	ldr	r0, [pc, #92]	; (75d8 <z_ready_thread+0x74>)
    757a:	f7ff fa07 	bl	698c <z_spin_lock_valid>
    757e:	b968      	cbnz	r0, 759c <z_ready_thread+0x38>
    7580:	4a16      	ldr	r2, [pc, #88]	; (75dc <z_ready_thread+0x78>)
    7582:	4917      	ldr	r1, [pc, #92]	; (75e0 <z_ready_thread+0x7c>)
    7584:	4817      	ldr	r0, [pc, #92]	; (75e4 <z_ready_thread+0x80>)
    7586:	238e      	movs	r3, #142	; 0x8e
    7588:	f001 fe03 	bl	9192 <assert_print>
    758c:	4912      	ldr	r1, [pc, #72]	; (75d8 <z_ready_thread+0x74>)
    758e:	4816      	ldr	r0, [pc, #88]	; (75e8 <z_ready_thread+0x84>)
    7590:	f001 fdff 	bl	9192 <assert_print>
    7594:	4811      	ldr	r0, [pc, #68]	; (75dc <z_ready_thread+0x78>)
    7596:	218e      	movs	r1, #142	; 0x8e
    7598:	f001 fdf4 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    759c:	480e      	ldr	r0, [pc, #56]	; (75d8 <z_ready_thread+0x74>)
    759e:	f7ff fa13 	bl	69c8 <z_spin_lock_set_owner>
			ready_thread(thread);
    75a2:	4620      	mov	r0, r4
    75a4:	f7ff ff92 	bl	74cc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    75a8:	480b      	ldr	r0, [pc, #44]	; (75d8 <z_ready_thread+0x74>)
    75aa:	f7ff f9fd 	bl	69a8 <z_spin_unlock_valid>
    75ae:	b968      	cbnz	r0, 75cc <z_ready_thread+0x68>
    75b0:	4a0a      	ldr	r2, [pc, #40]	; (75dc <z_ready_thread+0x78>)
    75b2:	490e      	ldr	r1, [pc, #56]	; (75ec <z_ready_thread+0x88>)
    75b4:	480b      	ldr	r0, [pc, #44]	; (75e4 <z_ready_thread+0x80>)
    75b6:	23b9      	movs	r3, #185	; 0xb9
    75b8:	f001 fdeb 	bl	9192 <assert_print>
    75bc:	4906      	ldr	r1, [pc, #24]	; (75d8 <z_ready_thread+0x74>)
    75be:	480c      	ldr	r0, [pc, #48]	; (75f0 <z_ready_thread+0x8c>)
    75c0:	f001 fde7 	bl	9192 <assert_print>
    75c4:	4805      	ldr	r0, [pc, #20]	; (75dc <z_ready_thread+0x78>)
    75c6:	21b9      	movs	r1, #185	; 0xb9
    75c8:	f001 fddc 	bl	9184 <assert_post_action>
	__asm__ volatile(
    75cc:	f385 8811 	msr	BASEPRI, r5
    75d0:	f3bf 8f6f 	isb	sy
}
    75d4:	bd38      	pop	{r3, r4, r5, pc}
    75d6:	bf00      	nop
    75d8:	20000cfc 	.word	0x20000cfc
    75dc:	0000a768 	.word	0x0000a768
    75e0:	0000a7c1 	.word	0x0000a7c1
    75e4:	0000a107 	.word	0x0000a107
    75e8:	0000a7d6 	.word	0x0000a7d6
    75ec:	0000a795 	.word	0x0000a795
    75f0:	0000a7ac 	.word	0x0000a7ac

000075f4 <z_sched_start>:
{
    75f4:	b538      	push	{r3, r4, r5, lr}
    75f6:	4604      	mov	r4, r0
	__asm__ volatile(
    75f8:	f04f 0320 	mov.w	r3, #32
    75fc:	f3ef 8511 	mrs	r5, BASEPRI
    7600:	f383 8812 	msr	BASEPRI_MAX, r3
    7604:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7608:	481d      	ldr	r0, [pc, #116]	; (7680 <z_sched_start+0x8c>)
    760a:	f7ff f9bf 	bl	698c <z_spin_lock_valid>
    760e:	b968      	cbnz	r0, 762c <z_sched_start+0x38>
    7610:	4a1c      	ldr	r2, [pc, #112]	; (7684 <z_sched_start+0x90>)
    7612:	491d      	ldr	r1, [pc, #116]	; (7688 <z_sched_start+0x94>)
    7614:	481d      	ldr	r0, [pc, #116]	; (768c <z_sched_start+0x98>)
    7616:	238e      	movs	r3, #142	; 0x8e
    7618:	f001 fdbb 	bl	9192 <assert_print>
    761c:	4918      	ldr	r1, [pc, #96]	; (7680 <z_sched_start+0x8c>)
    761e:	481c      	ldr	r0, [pc, #112]	; (7690 <z_sched_start+0x9c>)
    7620:	f001 fdb7 	bl	9192 <assert_print>
    7624:	4817      	ldr	r0, [pc, #92]	; (7684 <z_sched_start+0x90>)
    7626:	218e      	movs	r1, #142	; 0x8e
    7628:	f001 fdac 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    762c:	4814      	ldr	r0, [pc, #80]	; (7680 <z_sched_start+0x8c>)
    762e:	f7ff f9cb 	bl	69c8 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    7632:	7b63      	ldrb	r3, [r4, #13]
	if (z_has_thread_started(thread)) {
    7634:	075a      	lsls	r2, r3, #29
    7636:	d416      	bmi.n	7666 <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7638:	4811      	ldr	r0, [pc, #68]	; (7680 <z_sched_start+0x8c>)
    763a:	f7ff f9b5 	bl	69a8 <z_spin_unlock_valid>
    763e:	b968      	cbnz	r0, 765c <z_sched_start+0x68>
    7640:	4a10      	ldr	r2, [pc, #64]	; (7684 <z_sched_start+0x90>)
    7642:	4914      	ldr	r1, [pc, #80]	; (7694 <z_sched_start+0xa0>)
    7644:	4811      	ldr	r0, [pc, #68]	; (768c <z_sched_start+0x98>)
    7646:	23b9      	movs	r3, #185	; 0xb9
    7648:	f001 fda3 	bl	9192 <assert_print>
    764c:	490c      	ldr	r1, [pc, #48]	; (7680 <z_sched_start+0x8c>)
    764e:	4812      	ldr	r0, [pc, #72]	; (7698 <z_sched_start+0xa4>)
    7650:	f001 fd9f 	bl	9192 <assert_print>
    7654:	480b      	ldr	r0, [pc, #44]	; (7684 <z_sched_start+0x90>)
    7656:	21b9      	movs	r1, #185	; 0xb9
    7658:	f001 fd94 	bl	9184 <assert_post_action>
	__asm__ volatile(
    765c:	f385 8811 	msr	BASEPRI, r5
    7660:	f3bf 8f6f 	isb	sy
}
    7664:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    7666:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    766a:	4620      	mov	r0, r4
    766c:	7363      	strb	r3, [r4, #13]
    766e:	f7ff ff2d 	bl	74cc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7672:	4629      	mov	r1, r5
    7674:	4802      	ldr	r0, [pc, #8]	; (7680 <z_sched_start+0x8c>)
}
    7676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    767a:	f7ff bd27 	b.w	70cc <z_reschedule>
    767e:	bf00      	nop
    7680:	20000cfc 	.word	0x20000cfc
    7684:	0000a768 	.word	0x0000a768
    7688:	0000a7c1 	.word	0x0000a7c1
    768c:	0000a107 	.word	0x0000a107
    7690:	0000a7d6 	.word	0x0000a7d6
    7694:	0000a795 	.word	0x0000a795
    7698:	0000a7ac 	.word	0x0000a7ac

0000769c <z_impl_k_thread_resume>:
{
    769c:	b538      	push	{r3, r4, r5, lr}
    769e:	4604      	mov	r4, r0
	__asm__ volatile(
    76a0:	f04f 0320 	mov.w	r3, #32
    76a4:	f3ef 8511 	mrs	r5, BASEPRI
    76a8:	f383 8812 	msr	BASEPRI_MAX, r3
    76ac:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    76b0:	481d      	ldr	r0, [pc, #116]	; (7728 <z_impl_k_thread_resume+0x8c>)
    76b2:	f7ff f96b 	bl	698c <z_spin_lock_valid>
    76b6:	b968      	cbnz	r0, 76d4 <z_impl_k_thread_resume+0x38>
    76b8:	4a1c      	ldr	r2, [pc, #112]	; (772c <z_impl_k_thread_resume+0x90>)
    76ba:	491d      	ldr	r1, [pc, #116]	; (7730 <z_impl_k_thread_resume+0x94>)
    76bc:	481d      	ldr	r0, [pc, #116]	; (7734 <z_impl_k_thread_resume+0x98>)
    76be:	238e      	movs	r3, #142	; 0x8e
    76c0:	f001 fd67 	bl	9192 <assert_print>
    76c4:	4918      	ldr	r1, [pc, #96]	; (7728 <z_impl_k_thread_resume+0x8c>)
    76c6:	481c      	ldr	r0, [pc, #112]	; (7738 <z_impl_k_thread_resume+0x9c>)
    76c8:	f001 fd63 	bl	9192 <assert_print>
    76cc:	4817      	ldr	r0, [pc, #92]	; (772c <z_impl_k_thread_resume+0x90>)
    76ce:	218e      	movs	r1, #142	; 0x8e
    76d0:	f001 fd58 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    76d4:	4814      	ldr	r0, [pc, #80]	; (7728 <z_impl_k_thread_resume+0x8c>)
    76d6:	f7ff f977 	bl	69c8 <z_spin_lock_set_owner>
	return (thread->base.thread_state & _THREAD_SUSPENDED) != 0U;
    76da:	7b63      	ldrb	r3, [r4, #13]
	if (!z_is_thread_suspended(thread)) {
    76dc:	06da      	lsls	r2, r3, #27
    76de:	d416      	bmi.n	770e <z_impl_k_thread_resume+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76e0:	4811      	ldr	r0, [pc, #68]	; (7728 <z_impl_k_thread_resume+0x8c>)
    76e2:	f7ff f961 	bl	69a8 <z_spin_unlock_valid>
    76e6:	b968      	cbnz	r0, 7704 <z_impl_k_thread_resume+0x68>
    76e8:	4a10      	ldr	r2, [pc, #64]	; (772c <z_impl_k_thread_resume+0x90>)
    76ea:	4914      	ldr	r1, [pc, #80]	; (773c <z_impl_k_thread_resume+0xa0>)
    76ec:	4811      	ldr	r0, [pc, #68]	; (7734 <z_impl_k_thread_resume+0x98>)
    76ee:	23b9      	movs	r3, #185	; 0xb9
    76f0:	f001 fd4f 	bl	9192 <assert_print>
    76f4:	490c      	ldr	r1, [pc, #48]	; (7728 <z_impl_k_thread_resume+0x8c>)
    76f6:	4812      	ldr	r0, [pc, #72]	; (7740 <z_impl_k_thread_resume+0xa4>)
    76f8:	f001 fd4b 	bl	9192 <assert_print>
    76fc:	480b      	ldr	r0, [pc, #44]	; (772c <z_impl_k_thread_resume+0x90>)
    76fe:	21b9      	movs	r1, #185	; 0xb9
    7700:	f001 fd40 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7704:	f385 8811 	msr	BASEPRI, r5
    7708:	f3bf 8f6f 	isb	sy
}
    770c:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    770e:	f023 0310 	bic.w	r3, r3, #16
	ready_thread(thread);
    7712:	4620      	mov	r0, r4
    7714:	7363      	strb	r3, [r4, #13]
    7716:	f7ff fed9 	bl	74cc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    771a:	4629      	mov	r1, r5
    771c:	4802      	ldr	r0, [pc, #8]	; (7728 <z_impl_k_thread_resume+0x8c>)
}
    771e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    7722:	f7ff bcd3 	b.w	70cc <z_reschedule>
    7726:	bf00      	nop
    7728:	20000cfc 	.word	0x20000cfc
    772c:	0000a768 	.word	0x0000a768
    7730:	0000a7c1 	.word	0x0000a7c1
    7734:	0000a107 	.word	0x0000a107
    7738:	0000a7d6 	.word	0x0000a7d6
    773c:	0000a795 	.word	0x0000a795
    7740:	0000a7ac 	.word	0x0000a7ac

00007744 <z_thread_timeout>:
{
    7744:	b570      	push	{r4, r5, r6, lr}
    7746:	4604      	mov	r4, r0
	__asm__ volatile(
    7748:	f04f 0320 	mov.w	r3, #32
    774c:	f3ef 8611 	mrs	r6, BASEPRI
    7750:	f383 8812 	msr	BASEPRI_MAX, r3
    7754:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7758:	4820      	ldr	r0, [pc, #128]	; (77dc <z_thread_timeout+0x98>)
    775a:	f7ff f917 	bl	698c <z_spin_lock_valid>
    775e:	b968      	cbnz	r0, 777c <z_thread_timeout+0x38>
    7760:	4a1f      	ldr	r2, [pc, #124]	; (77e0 <z_thread_timeout+0x9c>)
    7762:	4920      	ldr	r1, [pc, #128]	; (77e4 <z_thread_timeout+0xa0>)
    7764:	4820      	ldr	r0, [pc, #128]	; (77e8 <z_thread_timeout+0xa4>)
    7766:	238e      	movs	r3, #142	; 0x8e
    7768:	f001 fd13 	bl	9192 <assert_print>
    776c:	491b      	ldr	r1, [pc, #108]	; (77dc <z_thread_timeout+0x98>)
    776e:	481f      	ldr	r0, [pc, #124]	; (77ec <z_thread_timeout+0xa8>)
    7770:	f001 fd0f 	bl	9192 <assert_print>
    7774:	481a      	ldr	r0, [pc, #104]	; (77e0 <z_thread_timeout+0x9c>)
    7776:	218e      	movs	r1, #142	; 0x8e
    7778:	f001 fd04 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    777c:	4817      	ldr	r0, [pc, #92]	; (77dc <z_thread_timeout+0x98>)
    777e:	f7ff f923 	bl	69c8 <z_spin_lock_set_owner>
		if (!killed) {
    7782:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    7786:	f013 0f28 	tst.w	r3, #40	; 0x28
    778a:	d110      	bne.n	77ae <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    778c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7790:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    7794:	b113      	cbz	r3, 779c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    7796:	4628      	mov	r0, r5
    7798:	f7ff fd72 	bl	7280 <unpend_thread_no_timeout>
    779c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    77a0:	f023 0314 	bic.w	r3, r3, #20
    77a4:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    77a8:	4628      	mov	r0, r5
    77aa:	f7ff fe8f 	bl	74cc <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77ae:	480b      	ldr	r0, [pc, #44]	; (77dc <z_thread_timeout+0x98>)
    77b0:	f7ff f8fa 	bl	69a8 <z_spin_unlock_valid>
    77b4:	b968      	cbnz	r0, 77d2 <z_thread_timeout+0x8e>
    77b6:	4a0a      	ldr	r2, [pc, #40]	; (77e0 <z_thread_timeout+0x9c>)
    77b8:	490d      	ldr	r1, [pc, #52]	; (77f0 <z_thread_timeout+0xac>)
    77ba:	480b      	ldr	r0, [pc, #44]	; (77e8 <z_thread_timeout+0xa4>)
    77bc:	23b9      	movs	r3, #185	; 0xb9
    77be:	f001 fce8 	bl	9192 <assert_print>
    77c2:	4906      	ldr	r1, [pc, #24]	; (77dc <z_thread_timeout+0x98>)
    77c4:	480b      	ldr	r0, [pc, #44]	; (77f4 <z_thread_timeout+0xb0>)
    77c6:	f001 fce4 	bl	9192 <assert_print>
    77ca:	4805      	ldr	r0, [pc, #20]	; (77e0 <z_thread_timeout+0x9c>)
    77cc:	21b9      	movs	r1, #185	; 0xb9
    77ce:	f001 fcd9 	bl	9184 <assert_post_action>
	__asm__ volatile(
    77d2:	f386 8811 	msr	BASEPRI, r6
    77d6:	f3bf 8f6f 	isb	sy
}
    77da:	bd70      	pop	{r4, r5, r6, pc}
    77dc:	20000cfc 	.word	0x20000cfc
    77e0:	0000a768 	.word	0x0000a768
    77e4:	0000a7c1 	.word	0x0000a7c1
    77e8:	0000a107 	.word	0x0000a107
    77ec:	0000a7d6 	.word	0x0000a7d6
    77f0:	0000a795 	.word	0x0000a795
    77f4:	0000a7ac 	.word	0x0000a7ac

000077f8 <unready_thread>:
{
    77f8:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    77fa:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    77fe:	7b43      	ldrb	r3, [r0, #13]
    7800:	2a00      	cmp	r2, #0
{
    7802:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    7804:	da06      	bge.n	7814 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    780a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    780c:	4601      	mov	r1, r0
    780e:	4806      	ldr	r0, [pc, #24]	; (7828 <unready_thread+0x30>)
    7810:	f7ff fd14 	bl	723c <z_priq_dumb_remove>
	update_cache(thread == _current);
    7814:	4b05      	ldr	r3, [pc, #20]	; (782c <unready_thread+0x34>)
    7816:	6898      	ldr	r0, [r3, #8]
    7818:	1b03      	subs	r3, r0, r4
    781a:	4258      	negs	r0, r3
}
    781c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    7820:	4158      	adcs	r0, r3
    7822:	f7ff bd4f 	b.w	72c4 <update_cache>
    7826:	bf00      	nop
    7828:	20000ce8 	.word	0x20000ce8
    782c:	20000cc8 	.word	0x20000cc8

00007830 <add_to_waitq_locked>:
{
    7830:	b538      	push	{r3, r4, r5, lr}
    7832:	4604      	mov	r4, r0
    7834:	460d      	mov	r5, r1
	unready_thread(thread);
    7836:	f7ff ffdf 	bl	77f8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    783a:	7b63      	ldrb	r3, [r4, #13]
    783c:	f043 0302 	orr.w	r3, r3, #2
    7840:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7842:	b1fd      	cbz	r5, 7884 <add_to_waitq_locked+0x54>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7844:	4b16      	ldr	r3, [pc, #88]	; (78a0 <add_to_waitq_locked+0x70>)
		thread->base.pended_on = wait_q;
    7846:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7848:	429c      	cmp	r4, r3
    784a:	d109      	bne.n	7860 <add_to_waitq_locked+0x30>
    784c:	4915      	ldr	r1, [pc, #84]	; (78a4 <add_to_waitq_locked+0x74>)
    784e:	4816      	ldr	r0, [pc, #88]	; (78a8 <add_to_waitq_locked+0x78>)
    7850:	4a16      	ldr	r2, [pc, #88]	; (78ac <add_to_waitq_locked+0x7c>)
    7852:	23ba      	movs	r3, #186	; 0xba
    7854:	f001 fc9d 	bl	9192 <assert_print>
    7858:	4814      	ldr	r0, [pc, #80]	; (78ac <add_to_waitq_locked+0x7c>)
    785a:	21ba      	movs	r1, #186	; 0xba
    785c:	f001 fc92 	bl	9184 <assert_post_action>
	return list->head == list;
    7860:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7862:	429d      	cmp	r5, r3
    7864:	d015      	beq.n	7892 <add_to_waitq_locked+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7866:	b1a3      	cbz	r3, 7892 <add_to_waitq_locked+0x62>
	int32_t b1 = thread_1->base.prio;
    7868:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    786c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    7870:	4291      	cmp	r1, r2
    7872:	d008      	beq.n	7886 <add_to_waitq_locked+0x56>
		return b2 - b1;
    7874:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    7876:	2a00      	cmp	r2, #0
    7878:	dd05      	ble.n	7886 <add_to_waitq_locked+0x56>
	sys_dnode_t *const prev = successor->prev;
    787a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    787c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7880:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7882:	605c      	str	r4, [r3, #4]
}
    7884:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    7886:	686a      	ldr	r2, [r5, #4]
    7888:	4293      	cmp	r3, r2
    788a:	d002      	beq.n	7892 <add_to_waitq_locked+0x62>
    788c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    788e:	2b00      	cmp	r3, #0
    7890:	d1ec      	bne.n	786c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const tail = list->tail;
    7892:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    7894:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    7898:	601c      	str	r4, [r3, #0]
	list->tail = node;
    789a:	606c      	str	r4, [r5, #4]
}
    789c:	e7f2      	b.n	7884 <add_to_waitq_locked+0x54>
    789e:	bf00      	nop
    78a0:	20000480 	.word	0x20000480
    78a4:	0000bcd2 	.word	0x0000bcd2
    78a8:	0000a107 	.word	0x0000a107
    78ac:	0000bcb0 	.word	0x0000bcb0

000078b0 <pend>:
{
    78b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78b4:	4604      	mov	r4, r0
    78b6:	4688      	mov	r8, r1
    78b8:	4616      	mov	r6, r2
    78ba:	461d      	mov	r5, r3
	__asm__ volatile(
    78bc:	f04f 0320 	mov.w	r3, #32
    78c0:	f3ef 8711 	mrs	r7, BASEPRI
    78c4:	f383 8812 	msr	BASEPRI_MAX, r3
    78c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78cc:	481f      	ldr	r0, [pc, #124]	; (794c <pend+0x9c>)
    78ce:	f7ff f85d 	bl	698c <z_spin_lock_valid>
    78d2:	b968      	cbnz	r0, 78f0 <pend+0x40>
    78d4:	4a1e      	ldr	r2, [pc, #120]	; (7950 <pend+0xa0>)
    78d6:	491f      	ldr	r1, [pc, #124]	; (7954 <pend+0xa4>)
    78d8:	481f      	ldr	r0, [pc, #124]	; (7958 <pend+0xa8>)
    78da:	238e      	movs	r3, #142	; 0x8e
    78dc:	f001 fc59 	bl	9192 <assert_print>
    78e0:	491a      	ldr	r1, [pc, #104]	; (794c <pend+0x9c>)
    78e2:	481e      	ldr	r0, [pc, #120]	; (795c <pend+0xac>)
    78e4:	f001 fc55 	bl	9192 <assert_print>
    78e8:	4819      	ldr	r0, [pc, #100]	; (7950 <pend+0xa0>)
    78ea:	218e      	movs	r1, #142	; 0x8e
    78ec:	f001 fc4a 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    78f0:	4816      	ldr	r0, [pc, #88]	; (794c <pend+0x9c>)
    78f2:	f7ff f869 	bl	69c8 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    78f6:	4620      	mov	r0, r4
    78f8:	4641      	mov	r1, r8
    78fa:	f7ff ff99 	bl	7830 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    78fe:	4813      	ldr	r0, [pc, #76]	; (794c <pend+0x9c>)
    7900:	f7ff f852 	bl	69a8 <z_spin_unlock_valid>
    7904:	b968      	cbnz	r0, 7922 <pend+0x72>
    7906:	4a12      	ldr	r2, [pc, #72]	; (7950 <pend+0xa0>)
    7908:	4915      	ldr	r1, [pc, #84]	; (7960 <pend+0xb0>)
    790a:	4813      	ldr	r0, [pc, #76]	; (7958 <pend+0xa8>)
    790c:	23b9      	movs	r3, #185	; 0xb9
    790e:	f001 fc40 	bl	9192 <assert_print>
    7912:	490e      	ldr	r1, [pc, #56]	; (794c <pend+0x9c>)
    7914:	4813      	ldr	r0, [pc, #76]	; (7964 <pend+0xb4>)
    7916:	f001 fc3c 	bl	9192 <assert_print>
    791a:	480d      	ldr	r0, [pc, #52]	; (7950 <pend+0xa0>)
    791c:	21b9      	movs	r1, #185	; 0xb9
    791e:	f001 fc31 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7922:	f387 8811 	msr	BASEPRI, r7
    7926:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    792a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    792e:	bf08      	it	eq
    7930:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
    7934:	d008      	beq.n	7948 <pend+0x98>
    7936:	4632      	mov	r2, r6
    7938:	462b      	mov	r3, r5
    793a:	f104 0018 	add.w	r0, r4, #24
    793e:	490a      	ldr	r1, [pc, #40]	; (7968 <pend+0xb8>)
}
    7940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    7944:	f000 bd08 	b.w	8358 <z_add_timeout>
    7948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    794c:	20000cfc 	.word	0x20000cfc
    7950:	0000a768 	.word	0x0000a768
    7954:	0000a7c1 	.word	0x0000a7c1
    7958:	0000a107 	.word	0x0000a107
    795c:	0000a7d6 	.word	0x0000a7d6
    7960:	0000a795 	.word	0x0000a795
    7964:	0000a7ac 	.word	0x0000a7ac
    7968:	00007745 	.word	0x00007745

0000796c <z_pend_curr>:
{
    796c:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    796e:	4b11      	ldr	r3, [pc, #68]	; (79b4 <z_pend_curr+0x48>)
{
    7970:	4604      	mov	r4, r0
	pending_current = _current;
    7972:	6898      	ldr	r0, [r3, #8]
    7974:	4b10      	ldr	r3, [pc, #64]	; (79b8 <z_pend_curr+0x4c>)
{
    7976:	460d      	mov	r5, r1
	pending_current = _current;
    7978:	6018      	str	r0, [r3, #0]
{
    797a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    797c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    7980:	f7ff ff96 	bl	78b0 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7984:	4620      	mov	r0, r4
    7986:	f7ff f80f 	bl	69a8 <z_spin_unlock_valid>
    798a:	b968      	cbnz	r0, 79a8 <z_pend_curr+0x3c>
    798c:	4a0b      	ldr	r2, [pc, #44]	; (79bc <z_pend_curr+0x50>)
    798e:	490c      	ldr	r1, [pc, #48]	; (79c0 <z_pend_curr+0x54>)
    7990:	480c      	ldr	r0, [pc, #48]	; (79c4 <z_pend_curr+0x58>)
    7992:	23d0      	movs	r3, #208	; 0xd0
    7994:	f001 fbfd 	bl	9192 <assert_print>
    7998:	480b      	ldr	r0, [pc, #44]	; (79c8 <z_pend_curr+0x5c>)
    799a:	4621      	mov	r1, r4
    799c:	f001 fbf9 	bl	9192 <assert_print>
    79a0:	4806      	ldr	r0, [pc, #24]	; (79bc <z_pend_curr+0x50>)
    79a2:	21d0      	movs	r1, #208	; 0xd0
    79a4:	f001 fbee 	bl	9184 <assert_post_action>
    79a8:	4628      	mov	r0, r5
}
    79aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    79ae:	f7fb bc1f 	b.w	31f0 <arch_swap>
    79b2:	bf00      	nop
    79b4:	20000cc8 	.word	0x20000cc8
    79b8:	20000cf8 	.word	0x20000cf8
    79bc:	0000a768 	.word	0x0000a768
    79c0:	0000a795 	.word	0x0000a795
    79c4:	0000a107 	.word	0x0000a107
    79c8:	0000a7ac 	.word	0x0000a7ac

000079cc <z_set_prio>:
{
    79cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79ce:	4604      	mov	r4, r0
    79d0:	460d      	mov	r5, r1
	__asm__ volatile(
    79d2:	f04f 0320 	mov.w	r3, #32
    79d6:	f3ef 8611 	mrs	r6, BASEPRI
    79da:	f383 8812 	msr	BASEPRI_MAX, r3
    79de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    79e2:	483a      	ldr	r0, [pc, #232]	; (7acc <z_set_prio+0x100>)
    79e4:	f7fe ffd2 	bl	698c <z_spin_lock_valid>
    79e8:	b968      	cbnz	r0, 7a06 <z_set_prio+0x3a>
    79ea:	4a39      	ldr	r2, [pc, #228]	; (7ad0 <z_set_prio+0x104>)
    79ec:	4939      	ldr	r1, [pc, #228]	; (7ad4 <z_set_prio+0x108>)
    79ee:	483a      	ldr	r0, [pc, #232]	; (7ad8 <z_set_prio+0x10c>)
    79f0:	238e      	movs	r3, #142	; 0x8e
    79f2:	f001 fbce 	bl	9192 <assert_print>
    79f6:	4935      	ldr	r1, [pc, #212]	; (7acc <z_set_prio+0x100>)
    79f8:	4838      	ldr	r0, [pc, #224]	; (7adc <z_set_prio+0x110>)
    79fa:	f001 fbca 	bl	9192 <assert_print>
    79fe:	4834      	ldr	r0, [pc, #208]	; (7ad0 <z_set_prio+0x104>)
    7a00:	218e      	movs	r1, #142	; 0x8e
    7a02:	f001 fbbf 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    7a06:	4831      	ldr	r0, [pc, #196]	; (7acc <z_set_prio+0x100>)
    7a08:	f7fe ffde 	bl	69c8 <z_spin_lock_set_owner>
	uint8_t state = thread->base.thread_state;
    7a0c:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    7a0e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    7a10:	b26d      	sxtb	r5, r5
    7a12:	d157      	bne.n	7ac4 <z_set_prio+0xf8>
		if (need_sched) {
    7a14:	69a2      	ldr	r2, [r4, #24]
    7a16:	2a00      	cmp	r2, #0
    7a18:	d154      	bne.n	7ac4 <z_set_prio+0xf8>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7a1e:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7a20:	482f      	ldr	r0, [pc, #188]	; (7ae0 <z_set_prio+0x114>)
    7a22:	4621      	mov	r1, r4
    7a24:	f7ff fc0a 	bl	723c <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7a28:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    7a2a:	73a5      	strb	r5, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7a2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7a30:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7a32:	4b2c      	ldr	r3, [pc, #176]	; (7ae4 <z_set_prio+0x118>)
    7a34:	429c      	cmp	r4, r3
    7a36:	d109      	bne.n	7a4c <z_set_prio+0x80>
    7a38:	492b      	ldr	r1, [pc, #172]	; (7ae8 <z_set_prio+0x11c>)
    7a3a:	4827      	ldr	r0, [pc, #156]	; (7ad8 <z_set_prio+0x10c>)
    7a3c:	4a2b      	ldr	r2, [pc, #172]	; (7aec <z_set_prio+0x120>)
    7a3e:	23ba      	movs	r3, #186	; 0xba
    7a40:	f001 fba7 	bl	9192 <assert_print>
    7a44:	4829      	ldr	r0, [pc, #164]	; (7aec <z_set_prio+0x120>)
    7a46:	21ba      	movs	r1, #186	; 0xba
    7a48:	f001 fb9c 	bl	9184 <assert_post_action>
	return list->head == list;
    7a4c:	4a28      	ldr	r2, [pc, #160]	; (7af0 <z_set_prio+0x124>)
	return (node == list->tail) ? NULL : node->next;
    7a4e:	e9d2 3008 	ldrd	r3, r0, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7a52:	f102 0520 	add.w	r5, r2, #32
    7a56:	42ab      	cmp	r3, r5
    7a58:	d02f      	beq.n	7aba <z_set_prio+0xee>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7a5a:	b373      	cbz	r3, 7aba <z_set_prio+0xee>
	int32_t b1 = thread_1->base.prio;
    7a5c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7a60:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    7a64:	428f      	cmp	r7, r1
    7a66:	d023      	beq.n	7ab0 <z_set_prio+0xe4>
		return b2 - b1;
    7a68:	1bc9      	subs	r1, r1, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    7a6a:	2900      	cmp	r1, #0
    7a6c:	dd20      	ble.n	7ab0 <z_set_prio+0xe4>
	sys_dnode_t *const prev = successor->prev;
    7a6e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7a70:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7a74:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7a76:	605c      	str	r4, [r3, #4]
			update_cache(1);
    7a78:	2001      	movs	r0, #1
    7a7a:	f7ff fc23 	bl	72c4 <update_cache>
    7a7e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7a80:	4812      	ldr	r0, [pc, #72]	; (7acc <z_set_prio+0x100>)
    7a82:	f7fe ff91 	bl	69a8 <z_spin_unlock_valid>
    7a86:	b968      	cbnz	r0, 7aa4 <z_set_prio+0xd8>
    7a88:	4a11      	ldr	r2, [pc, #68]	; (7ad0 <z_set_prio+0x104>)
    7a8a:	491a      	ldr	r1, [pc, #104]	; (7af4 <z_set_prio+0x128>)
    7a8c:	4812      	ldr	r0, [pc, #72]	; (7ad8 <z_set_prio+0x10c>)
    7a8e:	23b9      	movs	r3, #185	; 0xb9
    7a90:	f001 fb7f 	bl	9192 <assert_print>
    7a94:	490d      	ldr	r1, [pc, #52]	; (7acc <z_set_prio+0x100>)
    7a96:	4818      	ldr	r0, [pc, #96]	; (7af8 <z_set_prio+0x12c>)
    7a98:	f001 fb7b 	bl	9192 <assert_print>
    7a9c:	480c      	ldr	r0, [pc, #48]	; (7ad0 <z_set_prio+0x104>)
    7a9e:	21b9      	movs	r1, #185	; 0xb9
    7aa0:	f001 fb70 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7aa4:	f386 8811 	msr	BASEPRI, r6
    7aa8:	f3bf 8f6f 	isb	sy
}
    7aac:	4620      	mov	r0, r4
    7aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    7ab0:	4283      	cmp	r3, r0
    7ab2:	d002      	beq.n	7aba <z_set_prio+0xee>
    7ab4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7ab6:	2b00      	cmp	r3, #0
    7ab8:	d1d2      	bne.n	7a60 <z_set_prio+0x94>
	node->prev = tail;
    7aba:	e9c4 5000 	strd	r5, r0, [r4]
	tail->next = node;
    7abe:	6004      	str	r4, [r0, #0]
	list->tail = node;
    7ac0:	6254      	str	r4, [r2, #36]	; 0x24
}
    7ac2:	e7d9      	b.n	7a78 <z_set_prio+0xac>
			thread->base.prio = prio;
    7ac4:	73a5      	strb	r5, [r4, #14]
    7ac6:	2400      	movs	r4, #0
    7ac8:	e7da      	b.n	7a80 <z_set_prio+0xb4>
    7aca:	bf00      	nop
    7acc:	20000cfc 	.word	0x20000cfc
    7ad0:	0000a768 	.word	0x0000a768
    7ad4:	0000a7c1 	.word	0x0000a7c1
    7ad8:	0000a107 	.word	0x0000a107
    7adc:	0000a7d6 	.word	0x0000a7d6
    7ae0:	20000ce8 	.word	0x20000ce8
    7ae4:	20000480 	.word	0x20000480
    7ae8:	0000bcd2 	.word	0x0000bcd2
    7aec:	0000bcb0 	.word	0x0000bcb0
    7af0:	20000cc8 	.word	0x20000cc8
    7af4:	0000a795 	.word	0x0000a795
    7af8:	0000a7ac 	.word	0x0000a7ac

00007afc <z_impl_k_thread_suspend>:
{
    7afc:	b570      	push	{r4, r5, r6, lr}
    7afe:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7b00:	3018      	adds	r0, #24
    7b02:	f000 fcf1 	bl	84e8 <z_abort_timeout>
	__asm__ volatile(
    7b06:	f04f 0320 	mov.w	r3, #32
    7b0a:	f3ef 8611 	mrs	r6, BASEPRI
    7b0e:	f383 8812 	msr	BASEPRI_MAX, r3
    7b12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7b16:	4825      	ldr	r0, [pc, #148]	; (7bac <z_impl_k_thread_suspend+0xb0>)
    7b18:	f7fe ff38 	bl	698c <z_spin_lock_valid>
    7b1c:	b968      	cbnz	r0, 7b3a <z_impl_k_thread_suspend+0x3e>
    7b1e:	4a24      	ldr	r2, [pc, #144]	; (7bb0 <z_impl_k_thread_suspend+0xb4>)
    7b20:	4924      	ldr	r1, [pc, #144]	; (7bb4 <z_impl_k_thread_suspend+0xb8>)
    7b22:	4825      	ldr	r0, [pc, #148]	; (7bb8 <z_impl_k_thread_suspend+0xbc>)
    7b24:	238e      	movs	r3, #142	; 0x8e
    7b26:	f001 fb34 	bl	9192 <assert_print>
    7b2a:	4920      	ldr	r1, [pc, #128]	; (7bac <z_impl_k_thread_suspend+0xb0>)
    7b2c:	4823      	ldr	r0, [pc, #140]	; (7bbc <z_impl_k_thread_suspend+0xc0>)
    7b2e:	f001 fb30 	bl	9192 <assert_print>
    7b32:	481f      	ldr	r0, [pc, #124]	; (7bb0 <z_impl_k_thread_suspend+0xb4>)
    7b34:	218e      	movs	r1, #142	; 0x8e
    7b36:	f001 fb25 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    7b3a:	481c      	ldr	r0, [pc, #112]	; (7bac <z_impl_k_thread_suspend+0xb0>)
    7b3c:	f7fe ff44 	bl	69c8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    7b40:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    7b44:	7b63      	ldrb	r3, [r4, #13]
    7b46:	2a00      	cmp	r2, #0
    7b48:	da06      	bge.n	7b58 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    7b4e:	481c      	ldr	r0, [pc, #112]	; (7bc0 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7b50:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7b52:	4621      	mov	r1, r4
    7b54:	f7ff fb72 	bl	723c <z_priq_dumb_remove>
		update_cache(thread == _current);
    7b58:	4d1a      	ldr	r5, [pc, #104]	; (7bc4 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7b5a:	7b63      	ldrb	r3, [r4, #13]
    7b5c:	68a8      	ldr	r0, [r5, #8]
    7b5e:	f043 0310 	orr.w	r3, r3, #16
    7b62:	7363      	strb	r3, [r4, #13]
    7b64:	1b03      	subs	r3, r0, r4
    7b66:	4258      	negs	r0, r3
    7b68:	4158      	adcs	r0, r3
    7b6a:	f7ff fbab 	bl	72c4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7b6e:	480f      	ldr	r0, [pc, #60]	; (7bac <z_impl_k_thread_suspend+0xb0>)
    7b70:	f7fe ff1a 	bl	69a8 <z_spin_unlock_valid>
    7b74:	b968      	cbnz	r0, 7b92 <z_impl_k_thread_suspend+0x96>
    7b76:	4a0e      	ldr	r2, [pc, #56]	; (7bb0 <z_impl_k_thread_suspend+0xb4>)
    7b78:	4913      	ldr	r1, [pc, #76]	; (7bc8 <z_impl_k_thread_suspend+0xcc>)
    7b7a:	480f      	ldr	r0, [pc, #60]	; (7bb8 <z_impl_k_thread_suspend+0xbc>)
    7b7c:	23b9      	movs	r3, #185	; 0xb9
    7b7e:	f001 fb08 	bl	9192 <assert_print>
    7b82:	490a      	ldr	r1, [pc, #40]	; (7bac <z_impl_k_thread_suspend+0xb0>)
    7b84:	4811      	ldr	r0, [pc, #68]	; (7bcc <z_impl_k_thread_suspend+0xd0>)
    7b86:	f001 fb04 	bl	9192 <assert_print>
    7b8a:	4809      	ldr	r0, [pc, #36]	; (7bb0 <z_impl_k_thread_suspend+0xb4>)
    7b8c:	21b9      	movs	r1, #185	; 0xb9
    7b8e:	f001 faf9 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7b92:	f386 8811 	msr	BASEPRI, r6
    7b96:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    7b9a:	68ab      	ldr	r3, [r5, #8]
    7b9c:	42a3      	cmp	r3, r4
    7b9e:	d103      	bne.n	7ba8 <z_impl_k_thread_suspend+0xac>
}
    7ba0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    7ba4:	f001 bf38 	b.w	9a18 <z_reschedule_unlocked>
}
    7ba8:	bd70      	pop	{r4, r5, r6, pc}
    7baa:	bf00      	nop
    7bac:	20000cfc 	.word	0x20000cfc
    7bb0:	0000a768 	.word	0x0000a768
    7bb4:	0000a7c1 	.word	0x0000a7c1
    7bb8:	0000a107 	.word	0x0000a107
    7bbc:	0000a7d6 	.word	0x0000a7d6
    7bc0:	20000ce8 	.word	0x20000ce8
    7bc4:	20000cc8 	.word	0x20000cc8
    7bc8:	0000a795 	.word	0x0000a795
    7bcc:	0000a7ac 	.word	0x0000a7ac

00007bd0 <k_sched_unlock>:
{
    7bd0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7bd2:	f04f 0320 	mov.w	r3, #32
    7bd6:	f3ef 8511 	mrs	r5, BASEPRI
    7bda:	f383 8812 	msr	BASEPRI_MAX, r3
    7bde:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7be2:	482d      	ldr	r0, [pc, #180]	; (7c98 <k_sched_unlock+0xc8>)
    7be4:	f7fe fed2 	bl	698c <z_spin_lock_valid>
    7be8:	b968      	cbnz	r0, 7c06 <k_sched_unlock+0x36>
    7bea:	4a2c      	ldr	r2, [pc, #176]	; (7c9c <k_sched_unlock+0xcc>)
    7bec:	492c      	ldr	r1, [pc, #176]	; (7ca0 <k_sched_unlock+0xd0>)
    7bee:	482d      	ldr	r0, [pc, #180]	; (7ca4 <k_sched_unlock+0xd4>)
    7bf0:	238e      	movs	r3, #142	; 0x8e
    7bf2:	f001 face 	bl	9192 <assert_print>
    7bf6:	4928      	ldr	r1, [pc, #160]	; (7c98 <k_sched_unlock+0xc8>)
    7bf8:	482b      	ldr	r0, [pc, #172]	; (7ca8 <k_sched_unlock+0xd8>)
    7bfa:	f001 faca 	bl	9192 <assert_print>
    7bfe:	4827      	ldr	r0, [pc, #156]	; (7c9c <k_sched_unlock+0xcc>)
    7c00:	218e      	movs	r1, #142	; 0x8e
    7c02:	f001 fabf 	bl	9184 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    7c06:	4c29      	ldr	r4, [pc, #164]	; (7cac <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    7c08:	4823      	ldr	r0, [pc, #140]	; (7c98 <k_sched_unlock+0xc8>)
    7c0a:	f7fe fedd 	bl	69c8 <z_spin_lock_set_owner>
    7c0e:	68a3      	ldr	r3, [r4, #8]
    7c10:	7bdb      	ldrb	r3, [r3, #15]
    7c12:	b973      	cbnz	r3, 7c32 <k_sched_unlock+0x62>
    7c14:	4926      	ldr	r1, [pc, #152]	; (7cb0 <k_sched_unlock+0xe0>)
    7c16:	4a27      	ldr	r2, [pc, #156]	; (7cb4 <k_sched_unlock+0xe4>)
    7c18:	4822      	ldr	r0, [pc, #136]	; (7ca4 <k_sched_unlock+0xd4>)
    7c1a:	f240 33bb 	movw	r3, #955	; 0x3bb
    7c1e:	f001 fab8 	bl	9192 <assert_print>
    7c22:	4825      	ldr	r0, [pc, #148]	; (7cb8 <k_sched_unlock+0xe8>)
    7c24:	f001 fab5 	bl	9192 <assert_print>
    7c28:	4822      	ldr	r0, [pc, #136]	; (7cb4 <k_sched_unlock+0xe4>)
    7c2a:	f240 31bb 	movw	r1, #955	; 0x3bb
    7c2e:	f001 faa9 	bl	9184 <assert_post_action>
    7c32:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    7c36:	b173      	cbz	r3, 7c56 <k_sched_unlock+0x86>
    7c38:	4920      	ldr	r1, [pc, #128]	; (7cbc <k_sched_unlock+0xec>)
    7c3a:	4a1e      	ldr	r2, [pc, #120]	; (7cb4 <k_sched_unlock+0xe4>)
    7c3c:	4819      	ldr	r0, [pc, #100]	; (7ca4 <k_sched_unlock+0xd4>)
    7c3e:	f44f 736f 	mov.w	r3, #956	; 0x3bc
    7c42:	f001 faa6 	bl	9192 <assert_print>
    7c46:	481c      	ldr	r0, [pc, #112]	; (7cb8 <k_sched_unlock+0xe8>)
    7c48:	f001 faa3 	bl	9192 <assert_print>
    7c4c:	4819      	ldr	r0, [pc, #100]	; (7cb4 <k_sched_unlock+0xe4>)
    7c4e:	f44f 716f 	mov.w	r1, #956	; 0x3bc
    7c52:	f001 fa97 	bl	9184 <assert_post_action>
		++_current->base.sched_locked;
    7c56:	68a2      	ldr	r2, [r4, #8]
    7c58:	7bd3      	ldrb	r3, [r2, #15]
    7c5a:	3301      	adds	r3, #1
		update_cache(0);
    7c5c:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    7c5e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    7c60:	f7ff fb30 	bl	72c4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7c64:	480c      	ldr	r0, [pc, #48]	; (7c98 <k_sched_unlock+0xc8>)
    7c66:	f7fe fe9f 	bl	69a8 <z_spin_unlock_valid>
    7c6a:	b968      	cbnz	r0, 7c88 <k_sched_unlock+0xb8>
    7c6c:	4a0b      	ldr	r2, [pc, #44]	; (7c9c <k_sched_unlock+0xcc>)
    7c6e:	4914      	ldr	r1, [pc, #80]	; (7cc0 <k_sched_unlock+0xf0>)
    7c70:	480c      	ldr	r0, [pc, #48]	; (7ca4 <k_sched_unlock+0xd4>)
    7c72:	23b9      	movs	r3, #185	; 0xb9
    7c74:	f001 fa8d 	bl	9192 <assert_print>
    7c78:	4907      	ldr	r1, [pc, #28]	; (7c98 <k_sched_unlock+0xc8>)
    7c7a:	4812      	ldr	r0, [pc, #72]	; (7cc4 <k_sched_unlock+0xf4>)
    7c7c:	f001 fa89 	bl	9192 <assert_print>
    7c80:	4806      	ldr	r0, [pc, #24]	; (7c9c <k_sched_unlock+0xcc>)
    7c82:	21b9      	movs	r1, #185	; 0xb9
    7c84:	f001 fa7e 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7c88:	f385 8811 	msr	BASEPRI, r5
    7c8c:	f3bf 8f6f 	isb	sy
}
    7c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    7c94:	f001 bec0 	b.w	9a18 <z_reschedule_unlocked>
    7c98:	20000cfc 	.word	0x20000cfc
    7c9c:	0000a768 	.word	0x0000a768
    7ca0:	0000a7c1 	.word	0x0000a7c1
    7ca4:	0000a107 	.word	0x0000a107
    7ca8:	0000a7d6 	.word	0x0000a7d6
    7cac:	20000cc8 	.word	0x20000cc8
    7cb0:	0000bd31 	.word	0x0000bd31
    7cb4:	0000bcb0 	.word	0x0000bcb0
    7cb8:	0000bc0e 	.word	0x0000bc0e
    7cbc:	0000bad8 	.word	0x0000bad8
    7cc0:	0000a795 	.word	0x0000a795
    7cc4:	0000a7ac 	.word	0x0000a7ac

00007cc8 <z_unpend1_no_timeout>:
{
    7cc8:	b538      	push	{r3, r4, r5, lr}
    7cca:	4604      	mov	r4, r0
	__asm__ volatile(
    7ccc:	f04f 0320 	mov.w	r3, #32
    7cd0:	f3ef 8511 	mrs	r5, BASEPRI
    7cd4:	f383 8812 	msr	BASEPRI_MAX, r3
    7cd8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7cdc:	4819      	ldr	r0, [pc, #100]	; (7d44 <z_unpend1_no_timeout+0x7c>)
    7cde:	f7fe fe55 	bl	698c <z_spin_lock_valid>
    7ce2:	b968      	cbnz	r0, 7d00 <z_unpend1_no_timeout+0x38>
    7ce4:	4a18      	ldr	r2, [pc, #96]	; (7d48 <z_unpend1_no_timeout+0x80>)
    7ce6:	4919      	ldr	r1, [pc, #100]	; (7d4c <z_unpend1_no_timeout+0x84>)
    7ce8:	4819      	ldr	r0, [pc, #100]	; (7d50 <z_unpend1_no_timeout+0x88>)
    7cea:	238e      	movs	r3, #142	; 0x8e
    7cec:	f001 fa51 	bl	9192 <assert_print>
    7cf0:	4914      	ldr	r1, [pc, #80]	; (7d44 <z_unpend1_no_timeout+0x7c>)
    7cf2:	4818      	ldr	r0, [pc, #96]	; (7d54 <z_unpend1_no_timeout+0x8c>)
    7cf4:	f001 fa4d 	bl	9192 <assert_print>
    7cf8:	4813      	ldr	r0, [pc, #76]	; (7d48 <z_unpend1_no_timeout+0x80>)
    7cfa:	218e      	movs	r1, #142	; 0x8e
    7cfc:	f001 fa42 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    7d00:	4810      	ldr	r0, [pc, #64]	; (7d44 <z_unpend1_no_timeout+0x7c>)
    7d02:	f7fe fe61 	bl	69c8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    7d06:	4620      	mov	r0, r4
    7d08:	f001 fe90 	bl	9a2c <z_priq_dumb_best>
		if (thread != NULL) {
    7d0c:	4604      	mov	r4, r0
    7d0e:	b108      	cbz	r0, 7d14 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    7d10:	f7ff fab6 	bl	7280 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7d14:	480b      	ldr	r0, [pc, #44]	; (7d44 <z_unpend1_no_timeout+0x7c>)
    7d16:	f7fe fe47 	bl	69a8 <z_spin_unlock_valid>
    7d1a:	b968      	cbnz	r0, 7d38 <z_unpend1_no_timeout+0x70>
    7d1c:	4a0a      	ldr	r2, [pc, #40]	; (7d48 <z_unpend1_no_timeout+0x80>)
    7d1e:	490e      	ldr	r1, [pc, #56]	; (7d58 <z_unpend1_no_timeout+0x90>)
    7d20:	480b      	ldr	r0, [pc, #44]	; (7d50 <z_unpend1_no_timeout+0x88>)
    7d22:	23b9      	movs	r3, #185	; 0xb9
    7d24:	f001 fa35 	bl	9192 <assert_print>
    7d28:	4906      	ldr	r1, [pc, #24]	; (7d44 <z_unpend1_no_timeout+0x7c>)
    7d2a:	480c      	ldr	r0, [pc, #48]	; (7d5c <z_unpend1_no_timeout+0x94>)
    7d2c:	f001 fa31 	bl	9192 <assert_print>
    7d30:	4805      	ldr	r0, [pc, #20]	; (7d48 <z_unpend1_no_timeout+0x80>)
    7d32:	21b9      	movs	r1, #185	; 0xb9
    7d34:	f001 fa26 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7d38:	f385 8811 	msr	BASEPRI, r5
    7d3c:	f3bf 8f6f 	isb	sy
}
    7d40:	4620      	mov	r0, r4
    7d42:	bd38      	pop	{r3, r4, r5, pc}
    7d44:	20000cfc 	.word	0x20000cfc
    7d48:	0000a768 	.word	0x0000a768
    7d4c:	0000a7c1 	.word	0x0000a7c1
    7d50:	0000a107 	.word	0x0000a107
    7d54:	0000a7d6 	.word	0x0000a7d6
    7d58:	0000a795 	.word	0x0000a795
    7d5c:	0000a7ac 	.word	0x0000a7ac

00007d60 <z_unpend_first_thread>:
{
    7d60:	b538      	push	{r3, r4, r5, lr}
    7d62:	4604      	mov	r4, r0
	__asm__ volatile(
    7d64:	f04f 0320 	mov.w	r3, #32
    7d68:	f3ef 8511 	mrs	r5, BASEPRI
    7d6c:	f383 8812 	msr	BASEPRI_MAX, r3
    7d70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7d74:	481b      	ldr	r0, [pc, #108]	; (7de4 <z_unpend_first_thread+0x84>)
    7d76:	f7fe fe09 	bl	698c <z_spin_lock_valid>
    7d7a:	b968      	cbnz	r0, 7d98 <z_unpend_first_thread+0x38>
    7d7c:	4a1a      	ldr	r2, [pc, #104]	; (7de8 <z_unpend_first_thread+0x88>)
    7d7e:	491b      	ldr	r1, [pc, #108]	; (7dec <z_unpend_first_thread+0x8c>)
    7d80:	481b      	ldr	r0, [pc, #108]	; (7df0 <z_unpend_first_thread+0x90>)
    7d82:	238e      	movs	r3, #142	; 0x8e
    7d84:	f001 fa05 	bl	9192 <assert_print>
    7d88:	4916      	ldr	r1, [pc, #88]	; (7de4 <z_unpend_first_thread+0x84>)
    7d8a:	481a      	ldr	r0, [pc, #104]	; (7df4 <z_unpend_first_thread+0x94>)
    7d8c:	f001 fa01 	bl	9192 <assert_print>
    7d90:	4815      	ldr	r0, [pc, #84]	; (7de8 <z_unpend_first_thread+0x88>)
    7d92:	218e      	movs	r1, #142	; 0x8e
    7d94:	f001 f9f6 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    7d98:	4812      	ldr	r0, [pc, #72]	; (7de4 <z_unpend_first_thread+0x84>)
    7d9a:	f7fe fe15 	bl	69c8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    7d9e:	4620      	mov	r0, r4
    7da0:	f001 fe44 	bl	9a2c <z_priq_dumb_best>
		if (thread != NULL) {
    7da4:	4604      	mov	r4, r0
    7da6:	b128      	cbz	r0, 7db4 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    7da8:	f7ff fa6a 	bl	7280 <unpend_thread_no_timeout>
    7dac:	f104 0018 	add.w	r0, r4, #24
    7db0:	f000 fb9a 	bl	84e8 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7db4:	480b      	ldr	r0, [pc, #44]	; (7de4 <z_unpend_first_thread+0x84>)
    7db6:	f7fe fdf7 	bl	69a8 <z_spin_unlock_valid>
    7dba:	b968      	cbnz	r0, 7dd8 <z_unpend_first_thread+0x78>
    7dbc:	4a0a      	ldr	r2, [pc, #40]	; (7de8 <z_unpend_first_thread+0x88>)
    7dbe:	490e      	ldr	r1, [pc, #56]	; (7df8 <z_unpend_first_thread+0x98>)
    7dc0:	480b      	ldr	r0, [pc, #44]	; (7df0 <z_unpend_first_thread+0x90>)
    7dc2:	23b9      	movs	r3, #185	; 0xb9
    7dc4:	f001 f9e5 	bl	9192 <assert_print>
    7dc8:	4906      	ldr	r1, [pc, #24]	; (7de4 <z_unpend_first_thread+0x84>)
    7dca:	480c      	ldr	r0, [pc, #48]	; (7dfc <z_unpend_first_thread+0x9c>)
    7dcc:	f001 f9e1 	bl	9192 <assert_print>
    7dd0:	4805      	ldr	r0, [pc, #20]	; (7de8 <z_unpend_first_thread+0x88>)
    7dd2:	21b9      	movs	r1, #185	; 0xb9
    7dd4:	f001 f9d6 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7dd8:	f385 8811 	msr	BASEPRI, r5
    7ddc:	f3bf 8f6f 	isb	sy
}
    7de0:	4620      	mov	r0, r4
    7de2:	bd38      	pop	{r3, r4, r5, pc}
    7de4:	20000cfc 	.word	0x20000cfc
    7de8:	0000a768 	.word	0x0000a768
    7dec:	0000a7c1 	.word	0x0000a7c1
    7df0:	0000a107 	.word	0x0000a107
    7df4:	0000a7d6 	.word	0x0000a7d6
    7df8:	0000a795 	.word	0x0000a795
    7dfc:	0000a7ac 	.word	0x0000a7ac

00007e00 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7e00:	4b04      	ldr	r3, [pc, #16]	; (7e14 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7e02:	2100      	movs	r1, #0
    7e04:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    7e08:	e9c3 2208 	strd	r2, r2, [r3, #32]
    7e0c:	4608      	mov	r0, r1
    7e0e:	f7ff b8af 	b.w	6f70 <k_sched_time_slice_set>
    7e12:	bf00      	nop
    7e14:	20000cc8 	.word	0x20000cc8

00007e18 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    7e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7e1a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    7e1e:	b173      	cbz	r3, 7e3e <z_impl_k_yield+0x26>
    7e20:	493f      	ldr	r1, [pc, #252]	; (7f20 <z_impl_k_yield+0x108>)
    7e22:	4a40      	ldr	r2, [pc, #256]	; (7f24 <z_impl_k_yield+0x10c>)
    7e24:	4840      	ldr	r0, [pc, #256]	; (7f28 <z_impl_k_yield+0x110>)
    7e26:	f240 5332 	movw	r3, #1330	; 0x532
    7e2a:	f001 f9b2 	bl	9192 <assert_print>
    7e2e:	483f      	ldr	r0, [pc, #252]	; (7f2c <z_impl_k_yield+0x114>)
    7e30:	f001 f9af 	bl	9192 <assert_print>
    7e34:	483b      	ldr	r0, [pc, #236]	; (7f24 <z_impl_k_yield+0x10c>)
    7e36:	f240 5132 	movw	r1, #1330	; 0x532
    7e3a:	f001 f9a3 	bl	9184 <assert_post_action>
	__asm__ volatile(
    7e3e:	f04f 0320 	mov.w	r3, #32
    7e42:	f3ef 8611 	mrs	r6, BASEPRI
    7e46:	f383 8812 	msr	BASEPRI_MAX, r3
    7e4a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7e4e:	4838      	ldr	r0, [pc, #224]	; (7f30 <z_impl_k_yield+0x118>)
    7e50:	f7fe fd9c 	bl	698c <z_spin_lock_valid>
    7e54:	b968      	cbnz	r0, 7e72 <z_impl_k_yield+0x5a>
    7e56:	4a37      	ldr	r2, [pc, #220]	; (7f34 <z_impl_k_yield+0x11c>)
    7e58:	4937      	ldr	r1, [pc, #220]	; (7f38 <z_impl_k_yield+0x120>)
    7e5a:	4833      	ldr	r0, [pc, #204]	; (7f28 <z_impl_k_yield+0x110>)
    7e5c:	238e      	movs	r3, #142	; 0x8e
    7e5e:	f001 f998 	bl	9192 <assert_print>
    7e62:	4933      	ldr	r1, [pc, #204]	; (7f30 <z_impl_k_yield+0x118>)
    7e64:	4835      	ldr	r0, [pc, #212]	; (7f3c <z_impl_k_yield+0x124>)
    7e66:	f001 f994 	bl	9192 <assert_print>
    7e6a:	4832      	ldr	r0, [pc, #200]	; (7f34 <z_impl_k_yield+0x11c>)
    7e6c:	218e      	movs	r1, #142	; 0x8e
    7e6e:	f001 f989 	bl	9184 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    7e72:	4d33      	ldr	r5, [pc, #204]	; (7f40 <z_impl_k_yield+0x128>)
	z_spin_lock_set_owner(l);
    7e74:	482e      	ldr	r0, [pc, #184]	; (7f30 <z_impl_k_yield+0x118>)
    7e76:	f7fe fda7 	bl	69c8 <z_spin_lock_set_owner>
    7e7a:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7e7c:	7b4b      	ldrb	r3, [r1, #13]
    7e7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7e82:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7e84:	f105 0020 	add.w	r0, r5, #32
    7e88:	f7ff f9d8 	bl	723c <z_priq_dumb_remove>
	}
	queue_thread(_current);
    7e8c:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7e8e:	7b63      	ldrb	r3, [r4, #13]
    7e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7e94:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    7e96:	4b2b      	ldr	r3, [pc, #172]	; (7f44 <z_impl_k_yield+0x12c>)
    7e98:	429c      	cmp	r4, r3
    7e9a:	d109      	bne.n	7eb0 <z_impl_k_yield+0x98>
    7e9c:	492a      	ldr	r1, [pc, #168]	; (7f48 <z_impl_k_yield+0x130>)
    7e9e:	4822      	ldr	r0, [pc, #136]	; (7f28 <z_impl_k_yield+0x110>)
    7ea0:	4a20      	ldr	r2, [pc, #128]	; (7f24 <z_impl_k_yield+0x10c>)
    7ea2:	23ba      	movs	r3, #186	; 0xba
    7ea4:	f001 f975 	bl	9192 <assert_print>
    7ea8:	481e      	ldr	r0, [pc, #120]	; (7f24 <z_impl_k_yield+0x10c>)
    7eaa:	21ba      	movs	r1, #186	; 0xba
    7eac:	f001 f96a 	bl	9184 <assert_post_action>
	return (node == list->tail) ? NULL : node->next;
    7eb0:	e9d5 3108 	ldrd	r3, r1, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7eb4:	4825      	ldr	r0, [pc, #148]	; (7f4c <z_impl_k_yield+0x134>)
    7eb6:	4283      	cmp	r3, r0
    7eb8:	d02d      	beq.n	7f16 <z_impl_k_yield+0xfe>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7eba:	b363      	cbz	r3, 7f16 <z_impl_k_yield+0xfe>
	int32_t b1 = thread_1->base.prio;
    7ebc:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7ec0:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    7ec4:	4297      	cmp	r7, r2
    7ec6:	d021      	beq.n	7f0c <z_impl_k_yield+0xf4>
		return b2 - b1;
    7ec8:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    7eca:	2a00      	cmp	r2, #0
    7ecc:	dd1e      	ble.n	7f0c <z_impl_k_yield+0xf4>
	sys_dnode_t *const prev = successor->prev;
    7ece:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7ed0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7ed4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7ed6:	605c      	str	r4, [r3, #4]
	update_cache(1);
    7ed8:	2001      	movs	r0, #1
    7eda:	f7ff f9f3 	bl	72c4 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ede:	4814      	ldr	r0, [pc, #80]	; (7f30 <z_impl_k_yield+0x118>)
    7ee0:	f7fe fd62 	bl	69a8 <z_spin_unlock_valid>
    7ee4:	b968      	cbnz	r0, 7f02 <z_impl_k_yield+0xea>
    7ee6:	4a13      	ldr	r2, [pc, #76]	; (7f34 <z_impl_k_yield+0x11c>)
    7ee8:	4919      	ldr	r1, [pc, #100]	; (7f50 <z_impl_k_yield+0x138>)
    7eea:	480f      	ldr	r0, [pc, #60]	; (7f28 <z_impl_k_yield+0x110>)
    7eec:	23d0      	movs	r3, #208	; 0xd0
    7eee:	f001 f950 	bl	9192 <assert_print>
    7ef2:	490f      	ldr	r1, [pc, #60]	; (7f30 <z_impl_k_yield+0x118>)
    7ef4:	4817      	ldr	r0, [pc, #92]	; (7f54 <z_impl_k_yield+0x13c>)
    7ef6:	f001 f94c 	bl	9192 <assert_print>
    7efa:	480e      	ldr	r0, [pc, #56]	; (7f34 <z_impl_k_yield+0x11c>)
    7efc:	21d0      	movs	r1, #208	; 0xd0
    7efe:	f001 f941 	bl	9184 <assert_post_action>
    7f02:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    7f04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7f08:	f7fb b972 	b.w	31f0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7f0c:	428b      	cmp	r3, r1
    7f0e:	d002      	beq.n	7f16 <z_impl_k_yield+0xfe>
    7f10:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7f12:	2b00      	cmp	r3, #0
    7f14:	d1d4      	bne.n	7ec0 <z_impl_k_yield+0xa8>
	node->prev = tail;
    7f16:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    7f1a:	600c      	str	r4, [r1, #0]
	list->tail = node;
    7f1c:	626c      	str	r4, [r5, #36]	; 0x24
}
    7f1e:	e7db      	b.n	7ed8 <z_impl_k_yield+0xc0>
    7f20:	0000bad8 	.word	0x0000bad8
    7f24:	0000bcb0 	.word	0x0000bcb0
    7f28:	0000a107 	.word	0x0000a107
    7f2c:	0000bc0e 	.word	0x0000bc0e
    7f30:	20000cfc 	.word	0x20000cfc
    7f34:	0000a768 	.word	0x0000a768
    7f38:	0000a7c1 	.word	0x0000a7c1
    7f3c:	0000a7d6 	.word	0x0000a7d6
    7f40:	20000cc8 	.word	0x20000cc8
    7f44:	20000480 	.word	0x20000480
    7f48:	0000bcd2 	.word	0x0000bcd2
    7f4c:	20000ce8 	.word	0x20000ce8
    7f50:	0000a795 	.word	0x0000a795
    7f54:	0000a7ac 	.word	0x0000a7ac

00007f58 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    7f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f5c:	4605      	mov	r5, r0
    7f5e:	460e      	mov	r6, r1
    7f60:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7f64:	b173      	cbz	r3, 7f84 <z_tick_sleep+0x2c>
    7f66:	4943      	ldr	r1, [pc, #268]	; (8074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>)
    7f68:	4a43      	ldr	r2, [pc, #268]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    7f6a:	4844      	ldr	r0, [pc, #272]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    7f6c:	f240 534e 	movw	r3, #1358	; 0x54e
    7f70:	f001 f90f 	bl	9192 <assert_print>
    7f74:	4842      	ldr	r0, [pc, #264]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    7f76:	f001 f90c 	bl	9192 <assert_print>
    7f7a:	483f      	ldr	r0, [pc, #252]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    7f7c:	f240 514e 	movw	r1, #1358	; 0x54e
    7f80:	f001 f900 	bl	9184 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7f84:	ea55 0306 	orrs.w	r3, r5, r6
    7f88:	d103      	bne.n	7f92 <z_tick_sleep+0x3a>
	z_impl_k_yield();
    7f8a:	f7ff ff45 	bl	7e18 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    7f8e:	2000      	movs	r0, #0
    7f90:	e06d      	b.n	806e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e>
	if (Z_TICK_ABS(ticks) <= 0) {
    7f92:	f06f 0401 	mvn.w	r4, #1
    7f96:	1b64      	subs	r4, r4, r5
    7f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7f9c:	eb63 0306 	sbc.w	r3, r3, r6
    7fa0:	2c01      	cmp	r4, #1
    7fa2:	f173 0300 	sbcs.w	r3, r3, #0
    7fa6:	da02      	bge.n	7fae <z_tick_sleep+0x56>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7fa8:	f001 fd46 	bl	9a38 <sys_clock_tick_get_32>
    7fac:	1944      	adds	r4, r0, r5
    7fae:	f04f 0320 	mov.w	r3, #32
    7fb2:	f3ef 8811 	mrs	r8, BASEPRI
    7fb6:	f383 8812 	msr	BASEPRI_MAX, r3
    7fba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7fbe:	4831      	ldr	r0, [pc, #196]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    7fc0:	f7fe fce4 	bl	698c <z_spin_lock_valid>
    7fc4:	b968      	cbnz	r0, 7fe2 <z_tick_sleep+0x8a>
    7fc6:	4a30      	ldr	r2, [pc, #192]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7fc8:	4930      	ldr	r1, [pc, #192]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7fca:	482c      	ldr	r0, [pc, #176]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    7fcc:	238e      	movs	r3, #142	; 0x8e
    7fce:	f001 f8e0 	bl	9192 <assert_print>
    7fd2:	492c      	ldr	r1, [pc, #176]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    7fd4:	482e      	ldr	r0, [pc, #184]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    7fd6:	f001 f8dc 	bl	9192 <assert_print>
    7fda:	482b      	ldr	r0, [pc, #172]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7fdc:	218e      	movs	r1, #142	; 0x8e
    7fde:	f001 f8d1 	bl	9184 <assert_post_action>
	pending_current = _current;
    7fe2:	4f2c      	ldr	r7, [pc, #176]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
	z_spin_lock_set_owner(l);
    7fe4:	4827      	ldr	r0, [pc, #156]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    7fe6:	f7fe fcef 	bl	69c8 <z_spin_lock_set_owner>
    7fea:	4b2b      	ldr	r3, [pc, #172]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    7fec:	68b8      	ldr	r0, [r7, #8]
    7fee:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7ff0:	f7ff fc02 	bl	77f8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7ff4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7ff6:	4929      	ldr	r1, [pc, #164]	; (809c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9c>)
    7ff8:	462a      	mov	r2, r5
    7ffa:	4633      	mov	r3, r6
    7ffc:	3018      	adds	r0, #24
    7ffe:	f000 f9ab 	bl	8358 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    8002:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8004:	481f      	ldr	r0, [pc, #124]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    8006:	7b53      	ldrb	r3, [r2, #13]
    8008:	f043 0310 	orr.w	r3, r3, #16
    800c:	7353      	strb	r3, [r2, #13]
    800e:	f7fe fccb 	bl	69a8 <z_spin_unlock_valid>
    8012:	b968      	cbnz	r0, 8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    8014:	4a1c      	ldr	r2, [pc, #112]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    8016:	4922      	ldr	r1, [pc, #136]	; (80a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>)
    8018:	4818      	ldr	r0, [pc, #96]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    801a:	23d0      	movs	r3, #208	; 0xd0
    801c:	f001 f8b9 	bl	9192 <assert_print>
    8020:	4918      	ldr	r1, [pc, #96]	; (8084 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x84>)
    8022:	4820      	ldr	r0, [pc, #128]	; (80a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    8024:	f001 f8b5 	bl	9192 <assert_print>
    8028:	4817      	ldr	r0, [pc, #92]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    802a:	21d0      	movs	r1, #208	; 0xd0
    802c:	f001 f8aa 	bl	9184 <assert_post_action>
    8030:	4640      	mov	r0, r8
    8032:	f7fb f8dd 	bl	31f0 <arch_swap>
	return (thread->base.thread_state & state) != 0U;
    8036:	68bb      	ldr	r3, [r7, #8]
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    8038:	7b5b      	ldrb	r3, [r3, #13]
    803a:	06db      	lsls	r3, r3, #27
    803c:	d50e      	bpl.n	805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>
    803e:	491a      	ldr	r1, [pc, #104]	; (80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>)
    8040:	4a0d      	ldr	r2, [pc, #52]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    8042:	480e      	ldr	r0, [pc, #56]	; (807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>)
    8044:	f240 536f 	movw	r3, #1391	; 0x56f
    8048:	f001 f8a3 	bl	9192 <assert_print>
    804c:	480c      	ldr	r0, [pc, #48]	; (8080 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x80>)
    804e:	f001 f8a0 	bl	9192 <assert_print>
    8052:	4809      	ldr	r0, [pc, #36]	; (8078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    8054:	f240 516f 	movw	r1, #1391	; 0x56f
    8058:	f001 f894 	bl	9184 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    805c:	f001 fcec 	bl	9a38 <sys_clock_tick_get_32>
    8060:	1a20      	subs	r0, r4, r0
    8062:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    8066:	2801      	cmp	r0, #1
    8068:	f173 0300 	sbcs.w	r3, r3, #0
    806c:	db8f      	blt.n	7f8e <z_tick_sleep+0x36>
}
    806e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8072:	bf00      	nop
    8074:	0000bad8 	.word	0x0000bad8
    8078:	0000bcb0 	.word	0x0000bcb0
    807c:	0000a107 	.word	0x0000a107
    8080:	0000bc0e 	.word	0x0000bc0e
    8084:	20000cfc 	.word	0x20000cfc
    8088:	0000a768 	.word	0x0000a768
    808c:	0000a7c1 	.word	0x0000a7c1
    8090:	0000a7d6 	.word	0x0000a7d6
    8094:	20000cc8 	.word	0x20000cc8
    8098:	20000cf8 	.word	0x20000cf8
    809c:	00007745 	.word	0x00007745
    80a0:	0000a795 	.word	0x0000a795
    80a4:	0000a7ac 	.word	0x0000a7ac
    80a8:	0000bd62 	.word	0x0000bd62

000080ac <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    80ac:	b538      	push	{r3, r4, r5, lr}
    80ae:	4605      	mov	r5, r0
    80b0:	460c      	mov	r4, r1
    80b2:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    80b6:	b173      	cbz	r3, 80d6 <z_impl_k_sleep+0x2a>
    80b8:	4913      	ldr	r1, [pc, #76]	; (8108 <z_impl_k_sleep+0x5c>)
    80ba:	4a14      	ldr	r2, [pc, #80]	; (810c <z_impl_k_sleep+0x60>)
    80bc:	4814      	ldr	r0, [pc, #80]	; (8110 <z_impl_k_sleep+0x64>)
    80be:	f240 537e 	movw	r3, #1406	; 0x57e
    80c2:	f001 f866 	bl	9192 <assert_print>
    80c6:	4813      	ldr	r0, [pc, #76]	; (8114 <z_impl_k_sleep+0x68>)
    80c8:	f001 f863 	bl	9192 <assert_print>
    80cc:	480f      	ldr	r0, [pc, #60]	; (810c <z_impl_k_sleep+0x60>)
    80ce:	f240 517e 	movw	r1, #1406	; 0x57e
    80d2:	f001 f857 	bl	9184 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    80d6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
    80da:	bf08      	it	eq
    80dc:	f1b5 3fff 	cmpeq.w	r5, #4294967295	; 0xffffffff
    80e0:	d106      	bne.n	80f0 <z_impl_k_sleep+0x44>
		k_thread_suspend(_current);
    80e2:	4b0d      	ldr	r3, [pc, #52]	; (8118 <z_impl_k_sleep+0x6c>)
    80e4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    80e6:	f7ff fd09 	bl	7afc <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    80ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    80ee:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    80f0:	4628      	mov	r0, r5
    80f2:	4621      	mov	r1, r4
    80f4:	f7ff ff30 	bl	7f58 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    80f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    80fc:	fb80 0303 	smull	r0, r3, r0, r3
    8100:	0bc0      	lsrs	r0, r0, #15
    8102:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    8106:	e7f2      	b.n	80ee <z_impl_k_sleep+0x42>
    8108:	0000bad8 	.word	0x0000bad8
    810c:	0000bcb0 	.word	0x0000bcb0
    8110:	0000a107 	.word	0x0000a107
    8114:	0000bc0e 	.word	0x0000bc0e
    8118:	20000cc8 	.word	0x20000cc8

0000811c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    811c:	4b01      	ldr	r3, [pc, #4]	; (8124 <z_impl_z_current_get+0x8>)
    811e:	6898      	ldr	r0, [r3, #8]
    8120:	4770      	bx	lr
    8122:	bf00      	nop
    8124:	20000cc8 	.word	0x20000cc8

00008128 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    8128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    812c:	4604      	mov	r4, r0
    812e:	f04f 0320 	mov.w	r3, #32
    8132:	f3ef 8611 	mrs	r6, BASEPRI
    8136:	f383 8812 	msr	BASEPRI_MAX, r3
    813a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    813e:	4848      	ldr	r0, [pc, #288]	; (8260 <z_thread_abort+0x138>)
    8140:	f7fe fc24 	bl	698c <z_spin_lock_valid>
    8144:	b968      	cbnz	r0, 8162 <z_thread_abort+0x3a>
    8146:	4a47      	ldr	r2, [pc, #284]	; (8264 <z_thread_abort+0x13c>)
    8148:	4947      	ldr	r1, [pc, #284]	; (8268 <z_thread_abort+0x140>)
    814a:	4848      	ldr	r0, [pc, #288]	; (826c <z_thread_abort+0x144>)
    814c:	238e      	movs	r3, #142	; 0x8e
    814e:	f001 f820 	bl	9192 <assert_print>
    8152:	4943      	ldr	r1, [pc, #268]	; (8260 <z_thread_abort+0x138>)
    8154:	4846      	ldr	r0, [pc, #280]	; (8270 <z_thread_abort+0x148>)
    8156:	f001 f81c 	bl	9192 <assert_print>
    815a:	4842      	ldr	r0, [pc, #264]	; (8264 <z_thread_abort+0x13c>)
    815c:	218e      	movs	r1, #142	; 0x8e
    815e:	f001 f811 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    8162:	483f      	ldr	r0, [pc, #252]	; (8260 <z_thread_abort+0x138>)
    8164:	f7fe fc30 	bl	69c8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    8168:	7b63      	ldrb	r3, [r4, #13]
    816a:	071a      	lsls	r2, r3, #28
    816c:	d517      	bpl.n	819e <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    816e:	483c      	ldr	r0, [pc, #240]	; (8260 <z_thread_abort+0x138>)
    8170:	f7fe fc1a 	bl	69a8 <z_spin_unlock_valid>
    8174:	b968      	cbnz	r0, 8192 <z_thread_abort+0x6a>
    8176:	4a3b      	ldr	r2, [pc, #236]	; (8264 <z_thread_abort+0x13c>)
    8178:	493e      	ldr	r1, [pc, #248]	; (8274 <z_thread_abort+0x14c>)
    817a:	483c      	ldr	r0, [pc, #240]	; (826c <z_thread_abort+0x144>)
    817c:	23b9      	movs	r3, #185	; 0xb9
    817e:	f001 f808 	bl	9192 <assert_print>
    8182:	4937      	ldr	r1, [pc, #220]	; (8260 <z_thread_abort+0x138>)
    8184:	483c      	ldr	r0, [pc, #240]	; (8278 <z_thread_abort+0x150>)
    8186:	f001 f804 	bl	9192 <assert_print>
    818a:	4836      	ldr	r0, [pc, #216]	; (8264 <z_thread_abort+0x13c>)
    818c:	21b9      	movs	r1, #185	; 0xb9
    818e:	f000 fff9 	bl	9184 <assert_post_action>
	__asm__ volatile(
    8192:	f386 8811 	msr	BASEPRI, r6
    8196:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    819a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    819e:	f023 0220 	bic.w	r2, r3, #32
    81a2:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    81a6:	09d2      	lsrs	r2, r2, #7
    81a8:	d142      	bne.n	8230 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    81aa:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    81ac:	68a3      	ldr	r3, [r4, #8]
    81ae:	b113      	cbz	r3, 81b6 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    81b0:	4620      	mov	r0, r4
    81b2:	f7ff f865 	bl	7280 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    81b6:	f104 0018 	add.w	r0, r4, #24
    81ba:	f000 f995 	bl	84e8 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    81be:	f104 0758 	add.w	r7, r4, #88	; 0x58
    81c2:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    81c6:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    81c8:	42bd      	cmp	r5, r7
    81ca:	d001      	beq.n	81d0 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    81cc:	2d00      	cmp	r5, #0
    81ce:	d139      	bne.n	8244 <z_thread_abort+0x11c>
		update_cache(1);
    81d0:	2001      	movs	r0, #1
    81d2:	f7ff f877 	bl	72c4 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    81d6:	4b29      	ldr	r3, [pc, #164]	; (827c <z_thread_abort+0x154>)
    81d8:	689b      	ldr	r3, [r3, #8]
    81da:	42a3      	cmp	r3, r4
    81dc:	d1c7      	bne.n	816e <z_thread_abort+0x46>
    81de:	f3ef 8305 	mrs	r3, IPSR
    81e2:	2b00      	cmp	r3, #0
    81e4:	d1c3      	bne.n	816e <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    81e6:	481e      	ldr	r0, [pc, #120]	; (8260 <z_thread_abort+0x138>)
    81e8:	f7fe fbde 	bl	69a8 <z_spin_unlock_valid>
    81ec:	b968      	cbnz	r0, 820a <z_thread_abort+0xe2>
    81ee:	4a1d      	ldr	r2, [pc, #116]	; (8264 <z_thread_abort+0x13c>)
    81f0:	4920      	ldr	r1, [pc, #128]	; (8274 <z_thread_abort+0x14c>)
    81f2:	481e      	ldr	r0, [pc, #120]	; (826c <z_thread_abort+0x144>)
    81f4:	23d0      	movs	r3, #208	; 0xd0
    81f6:	f000 ffcc 	bl	9192 <assert_print>
    81fa:	4919      	ldr	r1, [pc, #100]	; (8260 <z_thread_abort+0x138>)
    81fc:	481e      	ldr	r0, [pc, #120]	; (8278 <z_thread_abort+0x150>)
    81fe:	f000 ffc8 	bl	9192 <assert_print>
    8202:	4818      	ldr	r0, [pc, #96]	; (8264 <z_thread_abort+0x13c>)
    8204:	21d0      	movs	r1, #208	; 0xd0
    8206:	f000 ffbd 	bl	9184 <assert_post_action>
    820a:	4630      	mov	r0, r6
    820c:	f7fa fff0 	bl	31f0 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    8210:	4a1b      	ldr	r2, [pc, #108]	; (8280 <z_thread_abort+0x158>)
    8212:	491c      	ldr	r1, [pc, #112]	; (8284 <z_thread_abort+0x15c>)
    8214:	4815      	ldr	r0, [pc, #84]	; (826c <z_thread_abort+0x144>)
    8216:	f240 63ac 	movw	r3, #1708	; 0x6ac
    821a:	f000 ffba 	bl	9192 <assert_print>
    821e:	481a      	ldr	r0, [pc, #104]	; (8288 <z_thread_abort+0x160>)
    8220:	f000 ffb7 	bl	9192 <assert_print>
    8224:	4816      	ldr	r0, [pc, #88]	; (8280 <z_thread_abort+0x158>)
    8226:	f240 61ac 	movw	r1, #1708	; 0x6ac
    822a:	f000 ffab 	bl	9184 <assert_post_action>
    822e:	e79e      	b.n	816e <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8230:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    8234:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    8238:	4814      	ldr	r0, [pc, #80]	; (828c <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    823a:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    823c:	4621      	mov	r1, r4
    823e:	f7fe fffd 	bl	723c <z_priq_dumb_remove>
}
    8242:	e7b3      	b.n	81ac <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    8244:	4628      	mov	r0, r5
    8246:	f7ff f81b 	bl	7280 <unpend_thread_no_timeout>
    824a:	f105 0018 	add.w	r0, r5, #24
    824e:	f000 f94b 	bl	84e8 <z_abort_timeout>
    8252:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    8256:	4628      	mov	r0, r5
    8258:	f7ff f938 	bl	74cc <ready_thread>
    825c:	e7b3      	b.n	81c6 <z_thread_abort+0x9e>
    825e:	bf00      	nop
    8260:	20000cfc 	.word	0x20000cfc
    8264:	0000a768 	.word	0x0000a768
    8268:	0000a7c1 	.word	0x0000a7c1
    826c:	0000a107 	.word	0x0000a107
    8270:	0000a7d6 	.word	0x0000a7d6
    8274:	0000a795 	.word	0x0000a795
    8278:	0000a7ac 	.word	0x0000a7ac
    827c:	20000cc8 	.word	0x20000cc8
    8280:	0000bcb0 	.word	0x0000bcb0
    8284:	0000a2aa 	.word	0x0000a2aa
    8288:	0000bda2 	.word	0x0000bda2
    828c:	20000ce8 	.word	0x20000ce8

00008290 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    8290:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    8292:	4806      	ldr	r0, [pc, #24]	; (82ac <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    8294:	4a06      	ldr	r2, [pc, #24]	; (82b0 <z_data_copy+0x20>)
    8296:	4907      	ldr	r1, [pc, #28]	; (82b4 <z_data_copy+0x24>)
    8298:	1a12      	subs	r2, r2, r0
    829a:	f001 fb69 	bl	9970 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    829e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    82a2:	4a05      	ldr	r2, [pc, #20]	; (82b8 <z_data_copy+0x28>)
    82a4:	4905      	ldr	r1, [pc, #20]	; (82bc <z_data_copy+0x2c>)
    82a6:	4806      	ldr	r0, [pc, #24]	; (82c0 <z_data_copy+0x30>)
    82a8:	f001 bb62 	b.w	9970 <z_early_memcpy>
    82ac:	20000000 	.word	0x20000000
    82b0:	2000025c 	.word	0x2000025c
    82b4:	0000be74 	.word	0x0000be74
    82b8:	00000000 	.word	0x00000000
    82bc:	0000be74 	.word	0x0000be74
    82c0:	20000000 	.word	0x20000000

000082c4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    82c4:	4b03      	ldr	r3, [pc, #12]	; (82d4 <elapsed+0x10>)
    82c6:	681b      	ldr	r3, [r3, #0]
    82c8:	b90b      	cbnz	r3, 82ce <elapsed+0xa>
    82ca:	f7fc bfd1 	b.w	5270 <sys_clock_elapsed>
}
    82ce:	2000      	movs	r0, #0
    82d0:	4770      	bx	lr
    82d2:	bf00      	nop
    82d4:	20000d08 	.word	0x20000d08

000082d8 <next_timeout>:
	return list->head == list;
    82d8:	4b10      	ldr	r3, [pc, #64]	; (831c <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    82da:	b510      	push	{r4, lr}
    82dc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    82de:	429c      	cmp	r4, r3
    82e0:	bf08      	it	eq
    82e2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    82e4:	f7ff ffee 	bl	82c4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    82e8:	b1a4      	cbz	r4, 8314 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    82ea:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    82ee:	1a1b      	subs	r3, r3, r0
    82f0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    82f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    82f8:	f170 0200 	sbcs.w	r2, r0, #0
    82fc:	da0a      	bge.n	8314 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    82fe:	2800      	cmp	r0, #0
    8300:	bfac      	ite	ge
    8302:	4618      	movge	r0, r3
    8304:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    8306:	4b06      	ldr	r3, [pc, #24]	; (8320 <next_timeout+0x48>)
    8308:	691b      	ldr	r3, [r3, #16]
    830a:	b113      	cbz	r3, 8312 <next_timeout+0x3a>
    830c:	4298      	cmp	r0, r3
    830e:	bfa8      	it	ge
    8310:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    8312:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    8314:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    8318:	e7f5      	b.n	8306 <next_timeout+0x2e>
    831a:	bf00      	nop
    831c:	20000174 	.word	0x20000174
    8320:	20000cc8 	.word	0x20000cc8

00008324 <remove_timeout>:
{
    8324:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    8326:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    8328:	b168      	cbz	r0, 8346 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    832a:	4a0a      	ldr	r2, [pc, #40]	; (8354 <remove_timeout+0x30>)
    832c:	6852      	ldr	r2, [r2, #4]
    832e:	4290      	cmp	r0, r2
    8330:	d009      	beq.n	8346 <remove_timeout+0x22>
	if (next(t) != NULL) {
    8332:	b143      	cbz	r3, 8346 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    8334:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    8338:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    833c:	1912      	adds	r2, r2, r4
    833e:	eb41 0105 	adc.w	r1, r1, r5
    8342:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    8346:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    8348:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    834a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    834c:	2300      	movs	r3, #0
	node->prev = NULL;
    834e:	e9c0 3300 	strd	r3, r3, [r0]
}
    8352:	bd30      	pop	{r4, r5, pc}
    8354:	20000174 	.word	0x20000174

00008358 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8358:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    835c:	bf08      	it	eq
    835e:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
    8362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8366:	4604      	mov	r4, r0
    8368:	460e      	mov	r6, r1
    836a:	4698      	mov	r8, r3
    836c:	4615      	mov	r5, r2
    836e:	461f      	mov	r7, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    8370:	f000 809e 	beq.w	84b0 <z_add_timeout+0x158>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    8374:	6803      	ldr	r3, [r0, #0]
    8376:	b163      	cbz	r3, 8392 <z_add_timeout+0x3a>
    8378:	494e      	ldr	r1, [pc, #312]	; (84b4 <z_add_timeout+0x15c>)
    837a:	4a4f      	ldr	r2, [pc, #316]	; (84b8 <z_add_timeout+0x160>)
    837c:	484f      	ldr	r0, [pc, #316]	; (84bc <z_add_timeout+0x164>)
    837e:	2363      	movs	r3, #99	; 0x63
    8380:	f000 ff07 	bl	9192 <assert_print>
    8384:	484e      	ldr	r0, [pc, #312]	; (84c0 <z_add_timeout+0x168>)
    8386:	f000 ff04 	bl	9192 <assert_print>
    838a:	484b      	ldr	r0, [pc, #300]	; (84b8 <z_add_timeout+0x160>)
    838c:	2163      	movs	r1, #99	; 0x63
    838e:	f000 fef9 	bl	9184 <assert_post_action>
	to->fn = fn;
    8392:	60a6      	str	r6, [r4, #8]
	__asm__ volatile(
    8394:	f04f 0320 	mov.w	r3, #32
    8398:	f3ef 8611 	mrs	r6, BASEPRI
    839c:	f383 8812 	msr	BASEPRI_MAX, r3
    83a0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83a4:	4847      	ldr	r0, [pc, #284]	; (84c4 <z_add_timeout+0x16c>)
    83a6:	f7fe faf1 	bl	698c <z_spin_lock_valid>
    83aa:	b968      	cbnz	r0, 83c8 <z_add_timeout+0x70>
    83ac:	4a46      	ldr	r2, [pc, #280]	; (84c8 <z_add_timeout+0x170>)
    83ae:	4947      	ldr	r1, [pc, #284]	; (84cc <z_add_timeout+0x174>)
    83b0:	4842      	ldr	r0, [pc, #264]	; (84bc <z_add_timeout+0x164>)
    83b2:	238e      	movs	r3, #142	; 0x8e
    83b4:	f000 feed 	bl	9192 <assert_print>
    83b8:	4942      	ldr	r1, [pc, #264]	; (84c4 <z_add_timeout+0x16c>)
    83ba:	4845      	ldr	r0, [pc, #276]	; (84d0 <z_add_timeout+0x178>)
    83bc:	f000 fee9 	bl	9192 <assert_print>
    83c0:	4841      	ldr	r0, [pc, #260]	; (84c8 <z_add_timeout+0x170>)
    83c2:	218e      	movs	r1, #142	; 0x8e
    83c4:	f000 fede 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    83c8:	483e      	ldr	r0, [pc, #248]	; (84c4 <z_add_timeout+0x16c>)
    83ca:	f7fe fafd 	bl	69c8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    83ce:	f06f 0201 	mvn.w	r2, #1
    83d2:	1b53      	subs	r3, r2, r5
    83d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    83d8:	eb60 0307 	sbc.w	r3, r0, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    83dc:	2b00      	cmp	r3, #0
    83de:	db1b      	blt.n	8418 <z_add_timeout+0xc0>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    83e0:	4b3c      	ldr	r3, [pc, #240]	; (84d4 <z_add_timeout+0x17c>)
    83e2:	e9d3 1300 	ldrd	r1, r3, [r3]
    83e6:	1a52      	subs	r2, r2, r1
    83e8:	eb60 0303 	sbc.w	r3, r0, r3
    83ec:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    83ee:	eb63 0707 	sbc.w	r7, r3, r7
    83f2:	2d01      	cmp	r5, #1
    83f4:	f177 0300 	sbcs.w	r3, r7, #0
    83f8:	bfbc      	itt	lt
    83fa:	2501      	movlt	r5, #1
    83fc:	2700      	movlt	r7, #0
    83fe:	e9c4 5704 	strd	r5, r7, [r4, #16]
	return list->head == list;
    8402:	4a35      	ldr	r2, [pc, #212]	; (84d8 <z_add_timeout+0x180>)
	sys_dnode_t *const tail = list->tail;
    8404:	e9d2 3c00 	ldrd	r3, ip, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8408:	4293      	cmp	r3, r2
    840a:	d118      	bne.n	843e <z_add_timeout+0xe6>
	node->prev = tail;
    840c:	e9c4 2c00 	strd	r2, ip, [r4]
	tail->next = node;
    8410:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    8414:	6054      	str	r4, [r2, #4]
}
    8416:	e026      	b.n	8466 <z_add_timeout+0x10e>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    8418:	f7ff ff54 	bl	82c4 <elapsed>
    841c:	3501      	adds	r5, #1
    841e:	f148 0800 	adc.w	r8, r8, #0
    8422:	182d      	adds	r5, r5, r0
    8424:	eb48 70e0 	adc.w	r0, r8, r0, asr #31
    8428:	e9c4 5004 	strd	r5, r0, [r4, #16]
    842c:	e7e9      	b.n	8402 <z_add_timeout+0xaa>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    842e:	1a09      	subs	r1, r1, r0
    8430:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    8434:	459c      	cmp	ip, r3
    8436:	e9c4 1504 	strd	r1, r5, [r4, #16]
    843a:	d0e7      	beq.n	840c <z_add_timeout+0xb4>
    843c:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    843e:	2b00      	cmp	r3, #0
    8440:	d0e4      	beq.n	840c <z_add_timeout+0xb4>
			if (t->dticks > to->dticks) {
    8442:	e9d3 0704 	ldrd	r0, r7, [r3, #16]
    8446:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
    844a:	4281      	cmp	r1, r0
    844c:	eb75 0e07 	sbcs.w	lr, r5, r7
    8450:	daed      	bge.n	842e <z_add_timeout+0xd6>
				t->dticks -= to->dticks;
    8452:	1a41      	subs	r1, r0, r1
    8454:	eb67 0505 	sbc.w	r5, r7, r5
    8458:	e9c3 1504 	strd	r1, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    845c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    845e:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    8462:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    8464:	605c      	str	r4, [r3, #4]
	return list->head == list;
    8466:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8468:	4293      	cmp	r3, r2
    846a:	d00b      	beq.n	8484 <z_add_timeout+0x12c>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    846c:	429c      	cmp	r4, r3
    846e:	d109      	bne.n	8484 <z_add_timeout+0x12c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    8470:	f7ff ff32 	bl	82d8 <next_timeout>

			if (next_time == 0 ||
    8474:	b118      	cbz	r0, 847e <z_add_timeout+0x126>
			    _current_cpu->slice_ticks != next_time) {
    8476:	4b19      	ldr	r3, [pc, #100]	; (84dc <z_add_timeout+0x184>)
			if (next_time == 0 ||
    8478:	691b      	ldr	r3, [r3, #16]
    847a:	4283      	cmp	r3, r0
    847c:	d002      	beq.n	8484 <z_add_timeout+0x12c>
				sys_clock_set_timeout(next_time, false);
    847e:	2100      	movs	r1, #0
    8480:	f7fc fec4 	bl	520c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8484:	480f      	ldr	r0, [pc, #60]	; (84c4 <z_add_timeout+0x16c>)
    8486:	f7fe fa8f 	bl	69a8 <z_spin_unlock_valid>
    848a:	b968      	cbnz	r0, 84a8 <z_add_timeout+0x150>
    848c:	4a0e      	ldr	r2, [pc, #56]	; (84c8 <z_add_timeout+0x170>)
    848e:	4914      	ldr	r1, [pc, #80]	; (84e0 <z_add_timeout+0x188>)
    8490:	480a      	ldr	r0, [pc, #40]	; (84bc <z_add_timeout+0x164>)
    8492:	23b9      	movs	r3, #185	; 0xb9
    8494:	f000 fe7d 	bl	9192 <assert_print>
    8498:	490a      	ldr	r1, [pc, #40]	; (84c4 <z_add_timeout+0x16c>)
    849a:	4812      	ldr	r0, [pc, #72]	; (84e4 <z_add_timeout+0x18c>)
    849c:	f000 fe79 	bl	9192 <assert_print>
    84a0:	4809      	ldr	r0, [pc, #36]	; (84c8 <z_add_timeout+0x170>)
    84a2:	21b9      	movs	r1, #185	; 0xb9
    84a4:	f000 fe6e 	bl	9184 <assert_post_action>
	__asm__ volatile(
    84a8:	f386 8811 	msr	BASEPRI, r6
    84ac:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    84b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84b4:	0000bde8 	.word	0x0000bde8
    84b8:	0000bdc4 	.word	0x0000bdc4
    84bc:	0000a107 	.word	0x0000a107
    84c0:	0000bc0e 	.word	0x0000bc0e
    84c4:	20000d0c 	.word	0x20000d0c
    84c8:	0000a768 	.word	0x0000a768
    84cc:	0000a7c1 	.word	0x0000a7c1
    84d0:	0000a7d6 	.word	0x0000a7d6
    84d4:	20000580 	.word	0x20000580
    84d8:	20000174 	.word	0x20000174
    84dc:	20000cc8 	.word	0x20000cc8
    84e0:	0000a795 	.word	0x0000a795
    84e4:	0000a7ac 	.word	0x0000a7ac

000084e8 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    84e8:	b538      	push	{r3, r4, r5, lr}
    84ea:	4604      	mov	r4, r0
	__asm__ volatile(
    84ec:	f04f 0320 	mov.w	r3, #32
    84f0:	f3ef 8511 	mrs	r5, BASEPRI
    84f4:	f383 8812 	msr	BASEPRI_MAX, r3
    84f8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    84fc:	481a      	ldr	r0, [pc, #104]	; (8568 <z_abort_timeout+0x80>)
    84fe:	f7fe fa45 	bl	698c <z_spin_lock_valid>
    8502:	b968      	cbnz	r0, 8520 <z_abort_timeout+0x38>
    8504:	4a19      	ldr	r2, [pc, #100]	; (856c <z_abort_timeout+0x84>)
    8506:	491a      	ldr	r1, [pc, #104]	; (8570 <z_abort_timeout+0x88>)
    8508:	481a      	ldr	r0, [pc, #104]	; (8574 <z_abort_timeout+0x8c>)
    850a:	238e      	movs	r3, #142	; 0x8e
    850c:	f000 fe41 	bl	9192 <assert_print>
    8510:	4915      	ldr	r1, [pc, #84]	; (8568 <z_abort_timeout+0x80>)
    8512:	4819      	ldr	r0, [pc, #100]	; (8578 <z_abort_timeout+0x90>)
    8514:	f000 fe3d 	bl	9192 <assert_print>
    8518:	4814      	ldr	r0, [pc, #80]	; (856c <z_abort_timeout+0x84>)
    851a:	218e      	movs	r1, #142	; 0x8e
    851c:	f000 fe32 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    8520:	4811      	ldr	r0, [pc, #68]	; (8568 <z_abort_timeout+0x80>)
    8522:	f7fe fa51 	bl	69c8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    8526:	6823      	ldr	r3, [r4, #0]
    8528:	b1db      	cbz	r3, 8562 <z_abort_timeout+0x7a>
			remove_timeout(to);
    852a:	4620      	mov	r0, r4
    852c:	f7ff fefa 	bl	8324 <remove_timeout>
			ret = 0;
    8530:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8532:	480d      	ldr	r0, [pc, #52]	; (8568 <z_abort_timeout+0x80>)
    8534:	f7fe fa38 	bl	69a8 <z_spin_unlock_valid>
    8538:	b968      	cbnz	r0, 8556 <z_abort_timeout+0x6e>
    853a:	4a0c      	ldr	r2, [pc, #48]	; (856c <z_abort_timeout+0x84>)
    853c:	490f      	ldr	r1, [pc, #60]	; (857c <z_abort_timeout+0x94>)
    853e:	480d      	ldr	r0, [pc, #52]	; (8574 <z_abort_timeout+0x8c>)
    8540:	23b9      	movs	r3, #185	; 0xb9
    8542:	f000 fe26 	bl	9192 <assert_print>
    8546:	4908      	ldr	r1, [pc, #32]	; (8568 <z_abort_timeout+0x80>)
    8548:	480d      	ldr	r0, [pc, #52]	; (8580 <z_abort_timeout+0x98>)
    854a:	f000 fe22 	bl	9192 <assert_print>
    854e:	4807      	ldr	r0, [pc, #28]	; (856c <z_abort_timeout+0x84>)
    8550:	21b9      	movs	r1, #185	; 0xb9
    8552:	f000 fe17 	bl	9184 <assert_post_action>
	__asm__ volatile(
    8556:	f385 8811 	msr	BASEPRI, r5
    855a:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    855e:	4620      	mov	r0, r4
    8560:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    8562:	f06f 0415 	mvn.w	r4, #21
    8566:	e7e4      	b.n	8532 <z_abort_timeout+0x4a>
    8568:	20000d0c 	.word	0x20000d0c
    856c:	0000a768 	.word	0x0000a768
    8570:	0000a7c1 	.word	0x0000a7c1
    8574:	0000a107 	.word	0x0000a107
    8578:	0000a7d6 	.word	0x0000a7d6
    857c:	0000a795 	.word	0x0000a795
    8580:	0000a7ac 	.word	0x0000a7ac

00008584 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    8584:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8586:	f04f 0320 	mov.w	r3, #32
    858a:	f3ef 8511 	mrs	r5, BASEPRI
    858e:	f383 8812 	msr	BASEPRI_MAX, r3
    8592:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8596:	4818      	ldr	r0, [pc, #96]	; (85f8 <z_get_next_timeout_expiry+0x74>)
    8598:	f7fe f9f8 	bl	698c <z_spin_lock_valid>
    859c:	b968      	cbnz	r0, 85ba <z_get_next_timeout_expiry+0x36>
    859e:	4a17      	ldr	r2, [pc, #92]	; (85fc <z_get_next_timeout_expiry+0x78>)
    85a0:	4917      	ldr	r1, [pc, #92]	; (8600 <z_get_next_timeout_expiry+0x7c>)
    85a2:	4818      	ldr	r0, [pc, #96]	; (8604 <z_get_next_timeout_expiry+0x80>)
    85a4:	238e      	movs	r3, #142	; 0x8e
    85a6:	f000 fdf4 	bl	9192 <assert_print>
    85aa:	4913      	ldr	r1, [pc, #76]	; (85f8 <z_get_next_timeout_expiry+0x74>)
    85ac:	4816      	ldr	r0, [pc, #88]	; (8608 <z_get_next_timeout_expiry+0x84>)
    85ae:	f000 fdf0 	bl	9192 <assert_print>
    85b2:	4812      	ldr	r0, [pc, #72]	; (85fc <z_get_next_timeout_expiry+0x78>)
    85b4:	218e      	movs	r1, #142	; 0x8e
    85b6:	f000 fde5 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    85ba:	480f      	ldr	r0, [pc, #60]	; (85f8 <z_get_next_timeout_expiry+0x74>)
    85bc:	f7fe fa04 	bl	69c8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    85c0:	f7ff fe8a 	bl	82d8 <next_timeout>
    85c4:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85c6:	480c      	ldr	r0, [pc, #48]	; (85f8 <z_get_next_timeout_expiry+0x74>)
    85c8:	f7fe f9ee 	bl	69a8 <z_spin_unlock_valid>
    85cc:	b968      	cbnz	r0, 85ea <z_get_next_timeout_expiry+0x66>
    85ce:	4a0b      	ldr	r2, [pc, #44]	; (85fc <z_get_next_timeout_expiry+0x78>)
    85d0:	490e      	ldr	r1, [pc, #56]	; (860c <z_get_next_timeout_expiry+0x88>)
    85d2:	480c      	ldr	r0, [pc, #48]	; (8604 <z_get_next_timeout_expiry+0x80>)
    85d4:	23b9      	movs	r3, #185	; 0xb9
    85d6:	f000 fddc 	bl	9192 <assert_print>
    85da:	4907      	ldr	r1, [pc, #28]	; (85f8 <z_get_next_timeout_expiry+0x74>)
    85dc:	480c      	ldr	r0, [pc, #48]	; (8610 <z_get_next_timeout_expiry+0x8c>)
    85de:	f000 fdd8 	bl	9192 <assert_print>
    85e2:	4806      	ldr	r0, [pc, #24]	; (85fc <z_get_next_timeout_expiry+0x78>)
    85e4:	21b9      	movs	r1, #185	; 0xb9
    85e6:	f000 fdcd 	bl	9184 <assert_post_action>
	__asm__ volatile(
    85ea:	f385 8811 	msr	BASEPRI, r5
    85ee:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    85f2:	4620      	mov	r0, r4
    85f4:	bd38      	pop	{r3, r4, r5, pc}
    85f6:	bf00      	nop
    85f8:	20000d0c 	.word	0x20000d0c
    85fc:	0000a768 	.word	0x0000a768
    8600:	0000a7c1 	.word	0x0000a7c1
    8604:	0000a107 	.word	0x0000a107
    8608:	0000a7d6 	.word	0x0000a7d6
    860c:	0000a795 	.word	0x0000a795
    8610:	0000a7ac 	.word	0x0000a7ac

00008614 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8614:	b570      	push	{r4, r5, r6, lr}
    8616:	4604      	mov	r4, r0
    8618:	460d      	mov	r5, r1
	__asm__ volatile(
    861a:	f04f 0320 	mov.w	r3, #32
    861e:	f3ef 8611 	mrs	r6, BASEPRI
    8622:	f383 8812 	msr	BASEPRI_MAX, r3
    8626:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    862a:	481b      	ldr	r0, [pc, #108]	; (8698 <z_set_timeout_expiry+0x84>)
    862c:	f7fe f9ae 	bl	698c <z_spin_lock_valid>
    8630:	b968      	cbnz	r0, 864e <z_set_timeout_expiry+0x3a>
    8632:	4a1a      	ldr	r2, [pc, #104]	; (869c <z_set_timeout_expiry+0x88>)
    8634:	491a      	ldr	r1, [pc, #104]	; (86a0 <z_set_timeout_expiry+0x8c>)
    8636:	481b      	ldr	r0, [pc, #108]	; (86a4 <z_set_timeout_expiry+0x90>)
    8638:	238e      	movs	r3, #142	; 0x8e
    863a:	f000 fdaa 	bl	9192 <assert_print>
    863e:	4916      	ldr	r1, [pc, #88]	; (8698 <z_set_timeout_expiry+0x84>)
    8640:	4819      	ldr	r0, [pc, #100]	; (86a8 <z_set_timeout_expiry+0x94>)
    8642:	f000 fda6 	bl	9192 <assert_print>
    8646:	4815      	ldr	r0, [pc, #84]	; (869c <z_set_timeout_expiry+0x88>)
    8648:	218e      	movs	r1, #142	; 0x8e
    864a:	f000 fd9b 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    864e:	4812      	ldr	r0, [pc, #72]	; (8698 <z_set_timeout_expiry+0x84>)
    8650:	f7fe f9ba 	bl	69c8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    8654:	f7ff fe40 	bl	82d8 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8658:	2801      	cmp	r0, #1
    865a:	dd05      	ble.n	8668 <z_set_timeout_expiry+0x54>
    865c:	42a0      	cmp	r0, r4
    865e:	db03      	blt.n	8668 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    8660:	4629      	mov	r1, r5
    8662:	4620      	mov	r0, r4
    8664:	f7fc fdd2 	bl	520c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8668:	480b      	ldr	r0, [pc, #44]	; (8698 <z_set_timeout_expiry+0x84>)
    866a:	f7fe f99d 	bl	69a8 <z_spin_unlock_valid>
    866e:	b968      	cbnz	r0, 868c <z_set_timeout_expiry+0x78>
    8670:	4a0a      	ldr	r2, [pc, #40]	; (869c <z_set_timeout_expiry+0x88>)
    8672:	490e      	ldr	r1, [pc, #56]	; (86ac <z_set_timeout_expiry+0x98>)
    8674:	480b      	ldr	r0, [pc, #44]	; (86a4 <z_set_timeout_expiry+0x90>)
    8676:	23b9      	movs	r3, #185	; 0xb9
    8678:	f000 fd8b 	bl	9192 <assert_print>
    867c:	4906      	ldr	r1, [pc, #24]	; (8698 <z_set_timeout_expiry+0x84>)
    867e:	480c      	ldr	r0, [pc, #48]	; (86b0 <z_set_timeout_expiry+0x9c>)
    8680:	f000 fd87 	bl	9192 <assert_print>
    8684:	4805      	ldr	r0, [pc, #20]	; (869c <z_set_timeout_expiry+0x88>)
    8686:	21b9      	movs	r1, #185	; 0xb9
    8688:	f000 fd7c 	bl	9184 <assert_post_action>
	__asm__ volatile(
    868c:	f386 8811 	msr	BASEPRI, r6
    8690:	f3bf 8f6f 	isb	sy
		}
	}
}
    8694:	bd70      	pop	{r4, r5, r6, pc}
    8696:	bf00      	nop
    8698:	20000d0c 	.word	0x20000d0c
    869c:	0000a768 	.word	0x0000a768
    86a0:	0000a7c1 	.word	0x0000a7c1
    86a4:	0000a107 	.word	0x0000a107
    86a8:	0000a7d6 	.word	0x0000a7d6
    86ac:	0000a795 	.word	0x0000a795
    86b0:	0000a7ac 	.word	0x0000a7ac

000086b4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    86b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    86b8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    86ba:	f7fe fe8f 	bl	73dc <z_time_slice>
	__asm__ volatile(
    86be:	f04f 0320 	mov.w	r3, #32
    86c2:	f3ef 8511 	mrs	r5, BASEPRI
    86c6:	f383 8812 	msr	BASEPRI_MAX, r3
    86ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    86ce:	484c      	ldr	r0, [pc, #304]	; (8800 <sys_clock_announce+0x14c>)
    86d0:	f7fe f95c 	bl	698c <z_spin_lock_valid>
    86d4:	b968      	cbnz	r0, 86f2 <sys_clock_announce+0x3e>
    86d6:	4a4b      	ldr	r2, [pc, #300]	; (8804 <sys_clock_announce+0x150>)
    86d8:	494b      	ldr	r1, [pc, #300]	; (8808 <sys_clock_announce+0x154>)
    86da:	484c      	ldr	r0, [pc, #304]	; (880c <sys_clock_announce+0x158>)
    86dc:	238e      	movs	r3, #142	; 0x8e
    86de:	f000 fd58 	bl	9192 <assert_print>
    86e2:	4947      	ldr	r1, [pc, #284]	; (8800 <sys_clock_announce+0x14c>)
    86e4:	484a      	ldr	r0, [pc, #296]	; (8810 <sys_clock_announce+0x15c>)
    86e6:	f000 fd54 	bl	9192 <assert_print>
    86ea:	4846      	ldr	r0, [pc, #280]	; (8804 <sys_clock_announce+0x150>)
    86ec:	218e      	movs	r1, #142	; 0x8e
    86ee:	f000 fd49 	bl	9184 <assert_post_action>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    86f2:	4f48      	ldr	r7, [pc, #288]	; (8814 <sys_clock_announce+0x160>)
	z_spin_lock_set_owner(l);
    86f4:	4842      	ldr	r0, [pc, #264]	; (8800 <sys_clock_announce+0x14c>)
	return list->head == list;
    86f6:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8818 <sys_clock_announce+0x164>

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    86fa:	4e48      	ldr	r6, [pc, #288]	; (881c <sys_clock_announce+0x168>)
    86fc:	f7fe f964 	bl	69c8 <z_spin_lock_set_owner>
	announce_remaining = ticks;
    8700:	603c      	str	r4, [r7, #0]
    8702:	f8d8 4000 	ldr.w	r4, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8706:	683a      	ldr	r2, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8708:	4544      	cmp	r4, r8
		curr_tick += dt;
    870a:	e9d6 1e00 	ldrd	r1, lr, [r6]
    870e:	ea4f 70e2 	mov.w	r0, r2, asr #31
    8712:	d00b      	beq.n	872c <sys_clock_announce+0x78>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    8714:	b154      	cbz	r4, 872c <sys_clock_announce+0x78>
    8716:	e9d4 3c04 	ldrd	r3, ip, [r4, #16]
    871a:	429a      	cmp	r2, r3
    871c:	eb70 090c 	sbcs.w	r9, r0, ip
    8720:	da28      	bge.n	8774 <sys_clock_announce+0xc0>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    8722:	1a9b      	subs	r3, r3, r2
    8724:	eb6c 0c00 	sbc.w	ip, ip, r0
    8728:	e9c4 3c04 	strd	r3, ip, [r4, #16]
	}

	curr_tick += announce_remaining;
    872c:	1852      	adds	r2, r2, r1
    872e:	eb4e 0000 	adc.w	r0, lr, r0
	announce_remaining = 0;
    8732:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    8734:	e9c6 2000 	strd	r2, r0, [r6]
	announce_remaining = 0;
    8738:	603c      	str	r4, [r7, #0]

	sys_clock_set_timeout(next_timeout(), false);
    873a:	f7ff fdcd 	bl	82d8 <next_timeout>
    873e:	4621      	mov	r1, r4
    8740:	f7fc fd64 	bl	520c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8744:	482e      	ldr	r0, [pc, #184]	; (8800 <sys_clock_announce+0x14c>)
    8746:	f7fe f92f 	bl	69a8 <z_spin_unlock_valid>
    874a:	b968      	cbnz	r0, 8768 <sys_clock_announce+0xb4>
    874c:	4a2d      	ldr	r2, [pc, #180]	; (8804 <sys_clock_announce+0x150>)
    874e:	4934      	ldr	r1, [pc, #208]	; (8820 <sys_clock_announce+0x16c>)
    8750:	482e      	ldr	r0, [pc, #184]	; (880c <sys_clock_announce+0x158>)
    8752:	23b9      	movs	r3, #185	; 0xb9
    8754:	f000 fd1d 	bl	9192 <assert_print>
    8758:	4929      	ldr	r1, [pc, #164]	; (8800 <sys_clock_announce+0x14c>)
    875a:	4832      	ldr	r0, [pc, #200]	; (8824 <sys_clock_announce+0x170>)
    875c:	f000 fd19 	bl	9192 <assert_print>
    8760:	4828      	ldr	r0, [pc, #160]	; (8804 <sys_clock_announce+0x150>)
    8762:	21b9      	movs	r1, #185	; 0xb9
    8764:	f000 fd0e 	bl	9184 <assert_post_action>
	__asm__ volatile(
    8768:	f385 8811 	msr	BASEPRI, r5
    876c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    8770:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    8774:	1859      	adds	r1, r3, r1
    8776:	eb4e 70e3 	adc.w	r0, lr, r3, asr #31
		announce_remaining -= dt;
    877a:	1ad3      	subs	r3, r2, r3
    877c:	603b      	str	r3, [r7, #0]
		t->dticks = 0;
    877e:	2200      	movs	r2, #0
    8780:	2300      	movs	r3, #0
		curr_tick += dt;
    8782:	e9c6 1000 	strd	r1, r0, [r6]
		t->dticks = 0;
    8786:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    878a:	4620      	mov	r0, r4
    878c:	f7ff fdca 	bl	8324 <remove_timeout>
    8790:	481b      	ldr	r0, [pc, #108]	; (8800 <sys_clock_announce+0x14c>)
    8792:	f7fe f909 	bl	69a8 <z_spin_unlock_valid>
    8796:	b968      	cbnz	r0, 87b4 <sys_clock_announce+0x100>
    8798:	4a1a      	ldr	r2, [pc, #104]	; (8804 <sys_clock_announce+0x150>)
    879a:	4921      	ldr	r1, [pc, #132]	; (8820 <sys_clock_announce+0x16c>)
    879c:	481b      	ldr	r0, [pc, #108]	; (880c <sys_clock_announce+0x158>)
    879e:	23b9      	movs	r3, #185	; 0xb9
    87a0:	f000 fcf7 	bl	9192 <assert_print>
    87a4:	4916      	ldr	r1, [pc, #88]	; (8800 <sys_clock_announce+0x14c>)
    87a6:	481f      	ldr	r0, [pc, #124]	; (8824 <sys_clock_announce+0x170>)
    87a8:	f000 fcf3 	bl	9192 <assert_print>
    87ac:	4815      	ldr	r0, [pc, #84]	; (8804 <sys_clock_announce+0x150>)
    87ae:	21b9      	movs	r1, #185	; 0xb9
    87b0:	f000 fce8 	bl	9184 <assert_post_action>
    87b4:	f385 8811 	msr	BASEPRI, r5
    87b8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    87bc:	68a3      	ldr	r3, [r4, #8]
    87be:	4620      	mov	r0, r4
    87c0:	4798      	blx	r3
	__asm__ volatile(
    87c2:	f04f 0320 	mov.w	r3, #32
    87c6:	f3ef 8511 	mrs	r5, BASEPRI
    87ca:	f383 8812 	msr	BASEPRI_MAX, r3
    87ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    87d2:	480b      	ldr	r0, [pc, #44]	; (8800 <sys_clock_announce+0x14c>)
    87d4:	f7fe f8da 	bl	698c <z_spin_lock_valid>
    87d8:	b968      	cbnz	r0, 87f6 <sys_clock_announce+0x142>
    87da:	4a0a      	ldr	r2, [pc, #40]	; (8804 <sys_clock_announce+0x150>)
    87dc:	490a      	ldr	r1, [pc, #40]	; (8808 <sys_clock_announce+0x154>)
    87de:	480b      	ldr	r0, [pc, #44]	; (880c <sys_clock_announce+0x158>)
    87e0:	238e      	movs	r3, #142	; 0x8e
    87e2:	f000 fcd6 	bl	9192 <assert_print>
    87e6:	4906      	ldr	r1, [pc, #24]	; (8800 <sys_clock_announce+0x14c>)
    87e8:	4809      	ldr	r0, [pc, #36]	; (8810 <sys_clock_announce+0x15c>)
    87ea:	f000 fcd2 	bl	9192 <assert_print>
    87ee:	4805      	ldr	r0, [pc, #20]	; (8804 <sys_clock_announce+0x150>)
    87f0:	218e      	movs	r1, #142	; 0x8e
    87f2:	f000 fcc7 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    87f6:	4802      	ldr	r0, [pc, #8]	; (8800 <sys_clock_announce+0x14c>)
    87f8:	f7fe f8e6 	bl	69c8 <z_spin_lock_set_owner>
	return k;
    87fc:	e781      	b.n	8702 <sys_clock_announce+0x4e>
    87fe:	bf00      	nop
    8800:	20000d0c 	.word	0x20000d0c
    8804:	0000a768 	.word	0x0000a768
    8808:	0000a7c1 	.word	0x0000a7c1
    880c:	0000a107 	.word	0x0000a107
    8810:	0000a7d6 	.word	0x0000a7d6
    8814:	20000d08 	.word	0x20000d08
    8818:	20000174 	.word	0x20000174
    881c:	20000580 	.word	0x20000580
    8820:	0000a795 	.word	0x0000a795
    8824:	0000a7ac 	.word	0x0000a7ac

00008828 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8828:	b570      	push	{r4, r5, r6, lr}
    882a:	f04f 0320 	mov.w	r3, #32
    882e:	f3ef 8611 	mrs	r6, BASEPRI
    8832:	f383 8812 	msr	BASEPRI_MAX, r3
    8836:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    883a:	481b      	ldr	r0, [pc, #108]	; (88a8 <sys_clock_tick_get+0x80>)
    883c:	f7fe f8a6 	bl	698c <z_spin_lock_valid>
    8840:	b968      	cbnz	r0, 885e <sys_clock_tick_get+0x36>
    8842:	4a1a      	ldr	r2, [pc, #104]	; (88ac <sys_clock_tick_get+0x84>)
    8844:	491a      	ldr	r1, [pc, #104]	; (88b0 <sys_clock_tick_get+0x88>)
    8846:	481b      	ldr	r0, [pc, #108]	; (88b4 <sys_clock_tick_get+0x8c>)
    8848:	238e      	movs	r3, #142	; 0x8e
    884a:	f000 fca2 	bl	9192 <assert_print>
    884e:	4916      	ldr	r1, [pc, #88]	; (88a8 <sys_clock_tick_get+0x80>)
    8850:	4819      	ldr	r0, [pc, #100]	; (88b8 <sys_clock_tick_get+0x90>)
    8852:	f000 fc9e 	bl	9192 <assert_print>
    8856:	4815      	ldr	r0, [pc, #84]	; (88ac <sys_clock_tick_get+0x84>)
    8858:	218e      	movs	r1, #142	; 0x8e
    885a:	f000 fc93 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    885e:	4812      	ldr	r0, [pc, #72]	; (88a8 <sys_clock_tick_get+0x80>)
    8860:	f7fe f8b2 	bl	69c8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    8864:	f7fc fd04 	bl	5270 <sys_clock_elapsed>
    8868:	4b14      	ldr	r3, [pc, #80]	; (88bc <sys_clock_tick_get+0x94>)
    886a:	e9d3 4500 	ldrd	r4, r5, [r3]
    886e:	1904      	adds	r4, r0, r4
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8870:	480d      	ldr	r0, [pc, #52]	; (88a8 <sys_clock_tick_get+0x80>)
    8872:	f145 0500 	adc.w	r5, r5, #0
    8876:	f7fe f897 	bl	69a8 <z_spin_unlock_valid>
    887a:	b968      	cbnz	r0, 8898 <sys_clock_tick_get+0x70>
    887c:	4a0b      	ldr	r2, [pc, #44]	; (88ac <sys_clock_tick_get+0x84>)
    887e:	4910      	ldr	r1, [pc, #64]	; (88c0 <sys_clock_tick_get+0x98>)
    8880:	480c      	ldr	r0, [pc, #48]	; (88b4 <sys_clock_tick_get+0x8c>)
    8882:	23b9      	movs	r3, #185	; 0xb9
    8884:	f000 fc85 	bl	9192 <assert_print>
    8888:	4907      	ldr	r1, [pc, #28]	; (88a8 <sys_clock_tick_get+0x80>)
    888a:	480e      	ldr	r0, [pc, #56]	; (88c4 <sys_clock_tick_get+0x9c>)
    888c:	f000 fc81 	bl	9192 <assert_print>
    8890:	4806      	ldr	r0, [pc, #24]	; (88ac <sys_clock_tick_get+0x84>)
    8892:	21b9      	movs	r1, #185	; 0xb9
    8894:	f000 fc76 	bl	9184 <assert_post_action>
	__asm__ volatile(
    8898:	f386 8811 	msr	BASEPRI, r6
    889c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    88a0:	4620      	mov	r0, r4
    88a2:	4629      	mov	r1, r5
    88a4:	bd70      	pop	{r4, r5, r6, pc}
    88a6:	bf00      	nop
    88a8:	20000d0c 	.word	0x20000d0c
    88ac:	0000a768 	.word	0x0000a768
    88b0:	0000a7c1 	.word	0x0000a7c1
    88b4:	0000a107 	.word	0x0000a107
    88b8:	0000a7d6 	.word	0x0000a7d6
    88bc:	20000580 	.word	0x20000580
    88c0:	0000a795 	.word	0x0000a795
    88c4:	0000a7ac 	.word	0x0000a7ac

000088c8 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    88c8:	b570      	push	{r4, r5, r6, lr}
    88ca:	4604      	mov	r4, r0
	__asm__ volatile(
    88cc:	f04f 0320 	mov.w	r3, #32
    88d0:	f3ef 8511 	mrs	r5, BASEPRI
    88d4:	f383 8812 	msr	BASEPRI_MAX, r3
    88d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    88dc:	484d      	ldr	r0, [pc, #308]	; (8a14 <z_timer_expiration_handler+0x14c>)
    88de:	f7fe f855 	bl	698c <z_spin_lock_valid>
    88e2:	b968      	cbnz	r0, 8900 <z_timer_expiration_handler+0x38>
    88e4:	4a4c      	ldr	r2, [pc, #304]	; (8a18 <z_timer_expiration_handler+0x150>)
    88e6:	494d      	ldr	r1, [pc, #308]	; (8a1c <z_timer_expiration_handler+0x154>)
    88e8:	484d      	ldr	r0, [pc, #308]	; (8a20 <z_timer_expiration_handler+0x158>)
    88ea:	238e      	movs	r3, #142	; 0x8e
    88ec:	f000 fc51 	bl	9192 <assert_print>
    88f0:	4948      	ldr	r1, [pc, #288]	; (8a14 <z_timer_expiration_handler+0x14c>)
    88f2:	484c      	ldr	r0, [pc, #304]	; (8a24 <z_timer_expiration_handler+0x15c>)
    88f4:	f000 fc4d 	bl	9192 <assert_print>
    88f8:	4847      	ldr	r0, [pc, #284]	; (8a18 <z_timer_expiration_handler+0x150>)
    88fa:	218e      	movs	r1, #142	; 0x8e
    88fc:	f000 fc42 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    8900:	4844      	ldr	r0, [pc, #272]	; (8a14 <z_timer_expiration_handler+0x14c>)
    8902:	f7fe f861 	bl	69c8 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8906:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
    890a:	3301      	adds	r3, #1
    890c:	f142 0200 	adc.w	r2, r2, #0
    8910:	2b02      	cmp	r3, #2
    8912:	f172 0300 	sbcs.w	r3, r2, #0
    8916:	d305      	bcc.n	8924 <z_timer_expiration_handler+0x5c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8918:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    891c:	4942      	ldr	r1, [pc, #264]	; (8a28 <z_timer_expiration_handler+0x160>)
    891e:	4620      	mov	r0, r4
    8920:	f7ff fd1a 	bl	8358 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8924:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8926:	3301      	adds	r3, #1
    8928:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    892a:	6a23      	ldr	r3, [r4, #32]
    892c:	2b00      	cmp	r3, #0
    892e:	d035      	beq.n	899c <z_timer_expiration_handler+0xd4>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8930:	4838      	ldr	r0, [pc, #224]	; (8a14 <z_timer_expiration_handler+0x14c>)
    8932:	f7fe f839 	bl	69a8 <z_spin_unlock_valid>
    8936:	b968      	cbnz	r0, 8954 <z_timer_expiration_handler+0x8c>
    8938:	4a37      	ldr	r2, [pc, #220]	; (8a18 <z_timer_expiration_handler+0x150>)
    893a:	493c      	ldr	r1, [pc, #240]	; (8a2c <z_timer_expiration_handler+0x164>)
    893c:	4838      	ldr	r0, [pc, #224]	; (8a20 <z_timer_expiration_handler+0x158>)
    893e:	23b9      	movs	r3, #185	; 0xb9
    8940:	f000 fc27 	bl	9192 <assert_print>
    8944:	4933      	ldr	r1, [pc, #204]	; (8a14 <z_timer_expiration_handler+0x14c>)
    8946:	483a      	ldr	r0, [pc, #232]	; (8a30 <z_timer_expiration_handler+0x168>)
    8948:	f000 fc23 	bl	9192 <assert_print>
    894c:	4832      	ldr	r0, [pc, #200]	; (8a18 <z_timer_expiration_handler+0x150>)
    894e:	21b9      	movs	r1, #185	; 0xb9
    8950:	f000 fc18 	bl	9184 <assert_post_action>
	__asm__ volatile(
    8954:	f385 8811 	msr	BASEPRI, r5
    8958:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    895c:	6a23      	ldr	r3, [r4, #32]
    895e:	4620      	mov	r0, r4
    8960:	4798      	blx	r3
	__asm__ volatile(
    8962:	f04f 0320 	mov.w	r3, #32
    8966:	f3ef 8511 	mrs	r5, BASEPRI
    896a:	f383 8812 	msr	BASEPRI_MAX, r3
    896e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8972:	4828      	ldr	r0, [pc, #160]	; (8a14 <z_timer_expiration_handler+0x14c>)
    8974:	f7fe f80a 	bl	698c <z_spin_lock_valid>
    8978:	b968      	cbnz	r0, 8996 <z_timer_expiration_handler+0xce>
    897a:	4a27      	ldr	r2, [pc, #156]	; (8a18 <z_timer_expiration_handler+0x150>)
    897c:	4927      	ldr	r1, [pc, #156]	; (8a1c <z_timer_expiration_handler+0x154>)
    897e:	4828      	ldr	r0, [pc, #160]	; (8a20 <z_timer_expiration_handler+0x158>)
    8980:	238e      	movs	r3, #142	; 0x8e
    8982:	f000 fc06 	bl	9192 <assert_print>
    8986:	4923      	ldr	r1, [pc, #140]	; (8a14 <z_timer_expiration_handler+0x14c>)
    8988:	4826      	ldr	r0, [pc, #152]	; (8a24 <z_timer_expiration_handler+0x15c>)
    898a:	f000 fc02 	bl	9192 <assert_print>
    898e:	4822      	ldr	r0, [pc, #136]	; (8a18 <z_timer_expiration_handler+0x150>)
    8990:	218e      	movs	r1, #142	; 0x8e
    8992:	f000 fbf7 	bl	9184 <assert_post_action>
	z_spin_lock_set_owner(l);
    8996:	481f      	ldr	r0, [pc, #124]	; (8a14 <z_timer_expiration_handler+0x14c>)
    8998:	f7fe f816 	bl	69c8 <z_spin_lock_set_owner>
	return list->head == list;
    899c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    89a0:	42a6      	cmp	r6, r4
    89a2:	d000      	beq.n	89a6 <z_timer_expiration_handler+0xde>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    89a4:	b9b6      	cbnz	r6, 89d4 <z_timer_expiration_handler+0x10c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    89a6:	481b      	ldr	r0, [pc, #108]	; (8a14 <z_timer_expiration_handler+0x14c>)
    89a8:	f7fd fffe 	bl	69a8 <z_spin_unlock_valid>
    89ac:	b968      	cbnz	r0, 89ca <z_timer_expiration_handler+0x102>
    89ae:	4a1a      	ldr	r2, [pc, #104]	; (8a18 <z_timer_expiration_handler+0x150>)
    89b0:	491e      	ldr	r1, [pc, #120]	; (8a2c <z_timer_expiration_handler+0x164>)
    89b2:	481b      	ldr	r0, [pc, #108]	; (8a20 <z_timer_expiration_handler+0x158>)
    89b4:	23b9      	movs	r3, #185	; 0xb9
    89b6:	f000 fbec 	bl	9192 <assert_print>
    89ba:	4916      	ldr	r1, [pc, #88]	; (8a14 <z_timer_expiration_handler+0x14c>)
    89bc:	481c      	ldr	r0, [pc, #112]	; (8a30 <z_timer_expiration_handler+0x168>)
    89be:	f000 fbe8 	bl	9192 <assert_print>
    89c2:	4815      	ldr	r0, [pc, #84]	; (8a18 <z_timer_expiration_handler+0x150>)
    89c4:	21b9      	movs	r1, #185	; 0xb9
    89c6:	f000 fbdd 	bl	9184 <assert_post_action>
	__asm__ volatile(
    89ca:	f385 8811 	msr	BASEPRI, r5
    89ce:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    89d2:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    89d4:	4630      	mov	r0, r6
    89d6:	f7fe fb31 	bl	703c <z_unpend_thread_no_timeout>
    89da:	2300      	movs	r3, #0
    89dc:	480d      	ldr	r0, [pc, #52]	; (8a14 <z_timer_expiration_handler+0x14c>)
    89de:	67b3      	str	r3, [r6, #120]	; 0x78
    89e0:	f7fd ffe2 	bl	69a8 <z_spin_unlock_valid>
    89e4:	b968      	cbnz	r0, 8a02 <z_timer_expiration_handler+0x13a>
    89e6:	4a0c      	ldr	r2, [pc, #48]	; (8a18 <z_timer_expiration_handler+0x150>)
    89e8:	4910      	ldr	r1, [pc, #64]	; (8a2c <z_timer_expiration_handler+0x164>)
    89ea:	480d      	ldr	r0, [pc, #52]	; (8a20 <z_timer_expiration_handler+0x158>)
    89ec:	23b9      	movs	r3, #185	; 0xb9
    89ee:	f000 fbd0 	bl	9192 <assert_print>
    89f2:	4908      	ldr	r1, [pc, #32]	; (8a14 <z_timer_expiration_handler+0x14c>)
    89f4:	480e      	ldr	r0, [pc, #56]	; (8a30 <z_timer_expiration_handler+0x168>)
    89f6:	f000 fbcc 	bl	9192 <assert_print>
    89fa:	4807      	ldr	r0, [pc, #28]	; (8a18 <z_timer_expiration_handler+0x150>)
    89fc:	21b9      	movs	r1, #185	; 0xb9
    89fe:	f000 fbc1 	bl	9184 <assert_post_action>
    8a02:	f385 8811 	msr	BASEPRI, r5
    8a06:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    8a0a:	4630      	mov	r0, r6
}
    8a0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    8a10:	f7fe bda8 	b.w	7564 <z_ready_thread>
    8a14:	20000d10 	.word	0x20000d10
    8a18:	0000a768 	.word	0x0000a768
    8a1c:	0000a7c1 	.word	0x0000a7c1
    8a20:	0000a107 	.word	0x0000a107
    8a24:	0000a7d6 	.word	0x0000a7d6
    8a28:	000088c9 	.word	0x000088c9
    8a2c:	0000a795 	.word	0x0000a795
    8a30:	0000a7ac 	.word	0x0000a7ac

00008a34 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8a38:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    8a3e:	bf08      	it	eq
    8a40:	f1b1 3fff 	cmpeq.w	r1, #4294967295	; 0xffffffff
{
    8a44:	4606      	mov	r6, r0
    8a46:	461c      	mov	r4, r3
    8a48:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    8a4c:	4689      	mov	r9, r1
    8a4e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8a50:	d03e      	beq.n	8ad0 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8a52:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    8a56:	bf08      	it	eq
    8a58:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
    8a5c:	4615      	mov	r5, r2
    8a5e:	4607      	mov	r7, r0
    8a60:	d014      	beq.n	8a8c <z_impl_k_timer_start+0x58>
    8a62:	ea50 0302 	orrs.w	r3, r0, r2
    8a66:	d011      	beq.n	8a8c <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    8a68:	f06f 0301 	mvn.w	r3, #1
    8a6c:	1a9b      	subs	r3, r3, r2
    8a6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8a72:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8a76:	2b00      	cmp	r3, #0
    8a78:	da08      	bge.n	8a8c <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    8a7a:	2a02      	cmp	r2, #2
    8a7c:	f170 0300 	sbcs.w	r3, r0, #0
    8a80:	bfbc      	itt	lt
    8a82:	2502      	movlt	r5, #2
    8a84:	2700      	movlt	r7, #0
    8a86:	3d01      	subs	r5, #1
    8a88:	f147 37ff 	adc.w	r7, r7, #4294967295	; 0xffffffff
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    8a8c:	f06f 0301 	mvn.w	r3, #1
    8a90:	1a5b      	subs	r3, r3, r1
    8a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8a96:	eb63 0304 	sbc.w	r3, r3, r4
    8a9a:	2b00      	cmp	r3, #0
    8a9c:	da09      	bge.n	8ab2 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    8a9e:	2901      	cmp	r1, #1
    8aa0:	f174 0300 	sbcs.w	r3, r4, #0
    8aa4:	bfbc      	itt	lt
    8aa6:	2101      	movlt	r1, #1
    8aa8:	2400      	movlt	r4, #0
    8aaa:	f111 39ff 	adds.w	r9, r1, #4294967295	; 0xffffffff
    8aae:	f144 38ff 	adc.w	r8, r4, #4294967295	; 0xffffffff
	}

	(void)z_abort_timeout(&timer->timeout);
    8ab2:	4630      	mov	r0, r6
    8ab4:	f7ff fd18 	bl	84e8 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    8ab8:	2300      	movs	r3, #0
    8aba:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    8abc:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8ac0:	464a      	mov	r2, r9
    8ac2:	4643      	mov	r3, r8
    8ac4:	4630      	mov	r0, r6
    8ac6:	4903      	ldr	r1, [pc, #12]	; (8ad4 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    8ac8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8acc:	f7ff bc44 	b.w	8358 <z_add_timeout>
}
    8ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8ad4:	000088c9 	.word	0x000088c9

00008ad8 <k_thread_system_pool_assign>:
	return ret;
}

void k_thread_system_pool_assign(struct k_thread *thread)
{
	thread->resource_pool = _SYSTEM_HEAP;
    8ad8:	4b01      	ldr	r3, [pc, #4]	; (8ae0 <k_thread_system_pool_assign+0x8>)
    8ada:	6703      	str	r3, [r0, #112]	; 0x70
}
    8adc:	4770      	bx	lr
    8ade:	bf00      	nop
    8ae0:	200001f4 	.word	0x200001f4

00008ae4 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8ae4:	4a02      	ldr	r2, [pc, #8]	; (8af0 <boot_banner+0xc>)
    8ae6:	4903      	ldr	r1, [pc, #12]	; (8af4 <boot_banner+0x10>)
    8ae8:	4803      	ldr	r0, [pc, #12]	; (8af8 <boot_banner+0x14>)
    8aea:	f000 ba58 	b.w	8f9e <printk>
    8aee:	bf00      	nop
    8af0:	0000bc10 	.word	0x0000bc10
    8af4:	0000be08 	.word	0x0000be08
    8af8:	0000be15 	.word	0x0000be15

00008afc <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    8afc:	b570      	push	{r4, r5, r6, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8afe:	4c0e      	ldr	r4, [pc, #56]	; (8b38 <statics_init+0x3c>)
    8b00:	4d0e      	ldr	r5, [pc, #56]	; (8b3c <statics_init+0x40>)
    8b02:	4e0f      	ldr	r6, [pc, #60]	; (8b40 <statics_init+0x44>)
    8b04:	42ac      	cmp	r4, r5
    8b06:	d90c      	bls.n	8b22 <statics_init+0x26>
    8b08:	490e      	ldr	r1, [pc, #56]	; (8b44 <statics_init+0x48>)
    8b0a:	480f      	ldr	r0, [pc, #60]	; (8b48 <statics_init+0x4c>)
    8b0c:	2318      	movs	r3, #24
    8b0e:	4632      	mov	r2, r6
    8b10:	f000 fb3f 	bl	9192 <assert_print>
    8b14:	480d      	ldr	r0, [pc, #52]	; (8b4c <statics_init+0x50>)
    8b16:	f000 fb3c 	bl	9192 <assert_print>
    8b1a:	2118      	movs	r1, #24
    8b1c:	4630      	mov	r0, r6
    8b1e:	f000 fb31 	bl	9184 <assert_post_action>
    8b22:	42ac      	cmp	r4, r5
    8b24:	d301      	bcc.n	8b2a <statics_init+0x2e>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    8b26:	2000      	movs	r0, #0
    8b28:	bd70      	pop	{r4, r5, r6, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    8b2a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    8b2e:	4620      	mov	r0, r4
    8b30:	f000 ffa9 	bl	9a86 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    8b34:	3418      	adds	r4, #24
    8b36:	e7e5      	b.n	8b04 <statics_init+0x8>
    8b38:	200001f4 	.word	0x200001f4
    8b3c:	2000020c 	.word	0x2000020c
    8b40:	0000be3c 	.word	0x0000be3c
    8b44:	0000be5e 	.word	0x0000be5e
    8b48:	0000a107 	.word	0x0000a107
    8b4c:	0000b9e5 	.word	0x0000b9e5

00008b50 <nrf_cc3xx_platform_init_no_rng>:
    8b50:	b510      	push	{r4, lr}
    8b52:	4c0a      	ldr	r4, [pc, #40]	; (8b7c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8b54:	6823      	ldr	r3, [r4, #0]
    8b56:	b11b      	cbz	r3, 8b60 <nrf_cc3xx_platform_init_no_rng+0x10>
    8b58:	2301      	movs	r3, #1
    8b5a:	6023      	str	r3, [r4, #0]
    8b5c:	2000      	movs	r0, #0
    8b5e:	bd10      	pop	{r4, pc}
    8b60:	f000 f8ce 	bl	8d00 <CC_LibInitNoRng>
    8b64:	2800      	cmp	r0, #0
    8b66:	d0f7      	beq.n	8b58 <nrf_cc3xx_platform_init_no_rng+0x8>
    8b68:	3801      	subs	r0, #1
    8b6a:	2806      	cmp	r0, #6
    8b6c:	d803      	bhi.n	8b76 <nrf_cc3xx_platform_init_no_rng+0x26>
    8b6e:	4b04      	ldr	r3, [pc, #16]	; (8b80 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8b70:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8b74:	bd10      	pop	{r4, pc}
    8b76:	4803      	ldr	r0, [pc, #12]	; (8b84 <nrf_cc3xx_platform_init_no_rng+0x34>)
    8b78:	bd10      	pop	{r4, pc}
    8b7a:	bf00      	nop
    8b7c:	20000d14 	.word	0x20000d14
    8b80:	0000a008 	.word	0x0000a008
    8b84:	ffff8ffe 	.word	0xffff8ffe

00008b88 <nrf_cc3xx_platform_abort>:
    8b88:	f3bf 8f4f 	dsb	sy
    8b8c:	4905      	ldr	r1, [pc, #20]	; (8ba4 <nrf_cc3xx_platform_abort+0x1c>)
    8b8e:	4b06      	ldr	r3, [pc, #24]	; (8ba8 <nrf_cc3xx_platform_abort+0x20>)
    8b90:	68ca      	ldr	r2, [r1, #12]
    8b92:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8b96:	4313      	orrs	r3, r2
    8b98:	60cb      	str	r3, [r1, #12]
    8b9a:	f3bf 8f4f 	dsb	sy
    8b9e:	bf00      	nop
    8ba0:	e7fd      	b.n	8b9e <nrf_cc3xx_platform_abort+0x16>
    8ba2:	bf00      	nop
    8ba4:	e000ed00 	.word	0xe000ed00
    8ba8:	05fa0004 	.word	0x05fa0004

00008bac <CC_PalAbort>:
    8bac:	b410      	push	{r4}
    8bae:	4b09      	ldr	r3, [pc, #36]	; (8bd4 <CC_PalAbort+0x28>)
    8bb0:	4909      	ldr	r1, [pc, #36]	; (8bd8 <CC_PalAbort+0x2c>)
    8bb2:	4c0a      	ldr	r4, [pc, #40]	; (8bdc <CC_PalAbort+0x30>)
    8bb4:	f04f 32fe 	mov.w	r2, #4278124286	; 0xfefefefe
    8bb8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    8bbc:	6849      	ldr	r1, [r1, #4]
    8bbe:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    8bc2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
    8bc6:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    8bca:	2300      	movs	r3, #0
    8bcc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    8bd0:	bc10      	pop	{r4}
    8bd2:	4708      	bx	r1
    8bd4:	5002b000 	.word	0x5002b000
    8bd8:	2000017c 	.word	0x2000017c
    8bdc:	5002a000 	.word	0x5002a000

00008be0 <nrf_cc3xx_platform_set_abort>:
    8be0:	e9d0 1200 	ldrd	r1, r2, [r0]
    8be4:	4b01      	ldr	r3, [pc, #4]	; (8bec <nrf_cc3xx_platform_set_abort+0xc>)
    8be6:	e9c3 1200 	strd	r1, r2, [r3]
    8bea:	4770      	bx	lr
    8bec:	2000017c 	.word	0x2000017c

00008bf0 <mutex_free>:
    8bf0:	b510      	push	{r4, lr}
    8bf2:	4604      	mov	r4, r0
    8bf4:	b130      	cbz	r0, 8c04 <mutex_free+0x14>
    8bf6:	6863      	ldr	r3, [r4, #4]
    8bf8:	06db      	lsls	r3, r3, #27
    8bfa:	d502      	bpl.n	8c02 <mutex_free+0x12>
    8bfc:	2300      	movs	r3, #0
    8bfe:	6023      	str	r3, [r4, #0]
    8c00:	6063      	str	r3, [r4, #4]
    8c02:	bd10      	pop	{r4, pc}
    8c04:	4b02      	ldr	r3, [pc, #8]	; (8c10 <mutex_free+0x20>)
    8c06:	4803      	ldr	r0, [pc, #12]	; (8c14 <mutex_free+0x24>)
    8c08:	685b      	ldr	r3, [r3, #4]
    8c0a:	4798      	blx	r3
    8c0c:	e7f3      	b.n	8bf6 <mutex_free+0x6>
    8c0e:	bf00      	nop
    8c10:	2000017c 	.word	0x2000017c
    8c14:	0000a024 	.word	0x0000a024

00008c18 <mutex_lock>:
    8c18:	b1b0      	cbz	r0, 8c48 <mutex_lock+0x30>
    8c1a:	6843      	ldr	r3, [r0, #4]
    8c1c:	b193      	cbz	r3, 8c44 <mutex_lock+0x2c>
    8c1e:	06db      	lsls	r3, r3, #27
    8c20:	d50e      	bpl.n	8c40 <mutex_lock+0x28>
    8c22:	2301      	movs	r3, #1
    8c24:	e850 2f00 	ldrex	r2, [r0]
    8c28:	4619      	mov	r1, r3
    8c2a:	e840 1c00 	strex	ip, r1, [r0]
    8c2e:	f09c 0f00 	teq	ip, #0
    8c32:	d1f7      	bne.n	8c24 <mutex_lock+0xc>
    8c34:	2a01      	cmp	r2, #1
    8c36:	d0f5      	beq.n	8c24 <mutex_lock+0xc>
    8c38:	f3bf 8f5f 	dmb	sy
    8c3c:	2000      	movs	r0, #0
    8c3e:	4770      	bx	lr
    8c40:	4803      	ldr	r0, [pc, #12]	; (8c50 <mutex_lock+0x38>)
    8c42:	4770      	bx	lr
    8c44:	4803      	ldr	r0, [pc, #12]	; (8c54 <mutex_lock+0x3c>)
    8c46:	4770      	bx	lr
    8c48:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8c4c:	4770      	bx	lr
    8c4e:	bf00      	nop
    8c50:	ffff8fe9 	.word	0xffff8fe9
    8c54:	ffff8fea 	.word	0xffff8fea

00008c58 <mutex_unlock>:
    8c58:	b168      	cbz	r0, 8c76 <mutex_unlock+0x1e>
    8c5a:	6843      	ldr	r3, [r0, #4]
    8c5c:	b13b      	cbz	r3, 8c6e <mutex_unlock+0x16>
    8c5e:	06db      	lsls	r3, r3, #27
    8c60:	d507      	bpl.n	8c72 <mutex_unlock+0x1a>
    8c62:	f3bf 8f5f 	dmb	sy
    8c66:	2300      	movs	r3, #0
    8c68:	6003      	str	r3, [r0, #0]
    8c6a:	4618      	mov	r0, r3
    8c6c:	4770      	bx	lr
    8c6e:	4803      	ldr	r0, [pc, #12]	; (8c7c <mutex_unlock+0x24>)
    8c70:	4770      	bx	lr
    8c72:	4803      	ldr	r0, [pc, #12]	; (8c80 <mutex_unlock+0x28>)
    8c74:	4770      	bx	lr
    8c76:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8c7a:	4770      	bx	lr
    8c7c:	ffff8fea 	.word	0xffff8fea
    8c80:	ffff8fe9 	.word	0xffff8fe9

00008c84 <mutex_init>:
    8c84:	b510      	push	{r4, lr}
    8c86:	4604      	mov	r4, r0
    8c88:	b120      	cbz	r0, 8c94 <mutex_init+0x10>
    8c8a:	2200      	movs	r2, #0
    8c8c:	2311      	movs	r3, #17
    8c8e:	6022      	str	r2, [r4, #0]
    8c90:	6063      	str	r3, [r4, #4]
    8c92:	bd10      	pop	{r4, pc}
    8c94:	4801      	ldr	r0, [pc, #4]	; (8c9c <mutex_init+0x18>)
    8c96:	f7ff ff89 	bl	8bac <CC_PalAbort>
    8c9a:	e7f6      	b.n	8c8a <mutex_init+0x6>
    8c9c:	0000a04c 	.word	0x0000a04c

00008ca0 <nrf_cc3xx_platform_set_mutexes>:
    8ca0:	b570      	push	{r4, r5, r6, lr}
    8ca2:	e9d0 2300 	ldrd	r2, r3, [r0]
    8ca6:	4c13      	ldr	r4, [pc, #76]	; (8cf4 <nrf_cc3xx_platform_set_mutexes+0x54>)
    8ca8:	4d13      	ldr	r5, [pc, #76]	; (8cf8 <nrf_cc3xx_platform_set_mutexes+0x58>)
    8caa:	6063      	str	r3, [r4, #4]
    8cac:	e9d0 3002 	ldrd	r3, r0, [r0, #8]
    8cb0:	e9c4 3002 	strd	r3, r0, [r4, #8]
    8cb4:	6022      	str	r2, [r4, #0]
    8cb6:	4b11      	ldr	r3, [pc, #68]	; (8cfc <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8cb8:	6808      	ldr	r0, [r1, #0]
    8cba:	6018      	str	r0, [r3, #0]
    8cbc:	6848      	ldr	r0, [r1, #4]
    8cbe:	6058      	str	r0, [r3, #4]
    8cc0:	6888      	ldr	r0, [r1, #8]
    8cc2:	6098      	str	r0, [r3, #8]
    8cc4:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
    8cc8:	60d8      	str	r0, [r3, #12]
    8cca:	6119      	str	r1, [r3, #16]
    8ccc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
    8cd0:	06db      	lsls	r3, r3, #27
    8cd2:	d50d      	bpl.n	8cf0 <nrf_cc3xx_platform_set_mutexes+0x50>
    8cd4:	2300      	movs	r3, #0
    8cd6:	e9c5 3345 	strd	r3, r3, [r5, #276]	; 0x114
    8cda:	e9c5 336e 	strd	r3, r3, [r5, #440]	; 0x1b8
    8cde:	f505 708a 	add.w	r0, r5, #276	; 0x114
    8ce2:	4790      	blx	r2
    8ce4:	6823      	ldr	r3, [r4, #0]
    8ce6:	f505 70dc 	add.w	r0, r5, #440	; 0x1b8
    8cea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8cee:	4718      	bx	r3
    8cf0:	bd70      	pop	{r4, r5, r6, pc}
    8cf2:	bf00      	nop
    8cf4:	2000018c 	.word	0x2000018c
    8cf8:	20000d2c 	.word	0x20000d2c
    8cfc:	2000019c 	.word	0x2000019c

00008d00 <CC_LibInitNoRng>:
    8d00:	b538      	push	{r3, r4, r5, lr}
    8d02:	f000 f82f 	bl	8d64 <CC_HalInit>
    8d06:	b120      	cbz	r0, 8d12 <CC_LibInitNoRng+0x12>
    8d08:	2403      	movs	r4, #3
    8d0a:	f000 f863 	bl	8dd4 <CC_PalTerminate>
    8d0e:	4620      	mov	r0, r4
    8d10:	bd38      	pop	{r3, r4, r5, pc}
    8d12:	f000 f831 	bl	8d78 <CC_PalInit>
    8d16:	b998      	cbnz	r0, 8d40 <CC_LibInitNoRng+0x40>
    8d18:	f000 f8ac 	bl	8e74 <CC_PalPowerSaveModeSelect>
    8d1c:	b998      	cbnz	r0, 8d46 <CC_LibInitNoRng+0x46>
    8d1e:	4d0f      	ldr	r5, [pc, #60]	; (8d5c <CC_LibInitNoRng+0x5c>)
    8d20:	f8d5 3928 	ldr.w	r3, [r5, #2344]	; 0x928
    8d24:	0e1b      	lsrs	r3, r3, #24
    8d26:	2bf0      	cmp	r3, #240	; 0xf0
    8d28:	d108      	bne.n	8d3c <CC_LibInitNoRng+0x3c>
    8d2a:	f8d5 2a24 	ldr.w	r2, [r5, #2596]	; 0xa24
    8d2e:	4b0c      	ldr	r3, [pc, #48]	; (8d60 <CC_LibInitNoRng+0x60>)
    8d30:	429a      	cmp	r2, r3
    8d32:	d00a      	beq.n	8d4a <CC_LibInitNoRng+0x4a>
    8d34:	2407      	movs	r4, #7
    8d36:	f000 f817 	bl	8d68 <CC_HalTerminate>
    8d3a:	e7e6      	b.n	8d0a <CC_LibInitNoRng+0xa>
    8d3c:	2406      	movs	r4, #6
    8d3e:	e7fa      	b.n	8d36 <CC_LibInitNoRng+0x36>
    8d40:	2404      	movs	r4, #4
    8d42:	4620      	mov	r0, r4
    8d44:	bd38      	pop	{r3, r4, r5, pc}
    8d46:	2400      	movs	r4, #0
    8d48:	e7f5      	b.n	8d36 <CC_LibInitNoRng+0x36>
    8d4a:	2001      	movs	r0, #1
    8d4c:	f000 f892 	bl	8e74 <CC_PalPowerSaveModeSelect>
    8d50:	4604      	mov	r4, r0
    8d52:	2800      	cmp	r0, #0
    8d54:	d1f7      	bne.n	8d46 <CC_LibInitNoRng+0x46>
    8d56:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
    8d5a:	e7d8      	b.n	8d0e <CC_LibInitNoRng+0xe>
    8d5c:	5002b000 	.word	0x5002b000
    8d60:	20e00000 	.word	0x20e00000

00008d64 <CC_HalInit>:
    8d64:	2000      	movs	r0, #0
    8d66:	4770      	bx	lr

00008d68 <CC_HalTerminate>:
    8d68:	2000      	movs	r0, #0
    8d6a:	4770      	bx	lr

00008d6c <CC_HalMaskInterrupt>:
    8d6c:	4b01      	ldr	r3, [pc, #4]	; (8d74 <CC_HalMaskInterrupt+0x8>)
    8d6e:	f8c3 0a04 	str.w	r0, [r3, #2564]	; 0xa04
    8d72:	4770      	bx	lr
    8d74:	5002b000 	.word	0x5002b000

00008d78 <CC_PalInit>:
    8d78:	b510      	push	{r4, lr}
    8d7a:	4811      	ldr	r0, [pc, #68]	; (8dc0 <CC_PalInit+0x48>)
    8d7c:	f000 f848 	bl	8e10 <CC_PalMutexCreate>
    8d80:	b100      	cbz	r0, 8d84 <CC_PalInit+0xc>
    8d82:	bd10      	pop	{r4, pc}
    8d84:	480f      	ldr	r0, [pc, #60]	; (8dc4 <CC_PalInit+0x4c>)
    8d86:	f000 f843 	bl	8e10 <CC_PalMutexCreate>
    8d8a:	2800      	cmp	r0, #0
    8d8c:	d1f9      	bne.n	8d82 <CC_PalInit+0xa>
    8d8e:	4c0e      	ldr	r4, [pc, #56]	; (8dc8 <CC_PalInit+0x50>)
    8d90:	4620      	mov	r0, r4
    8d92:	f000 f83d 	bl	8e10 <CC_PalMutexCreate>
    8d96:	2800      	cmp	r0, #0
    8d98:	d1f3      	bne.n	8d82 <CC_PalInit+0xa>
    8d9a:	4b0c      	ldr	r3, [pc, #48]	; (8dcc <CC_PalInit+0x54>)
    8d9c:	480c      	ldr	r0, [pc, #48]	; (8dd0 <CC_PalInit+0x58>)
    8d9e:	601c      	str	r4, [r3, #0]
    8da0:	f000 f836 	bl	8e10 <CC_PalMutexCreate>
    8da4:	4601      	mov	r1, r0
    8da6:	2800      	cmp	r0, #0
    8da8:	d1eb      	bne.n	8d82 <CC_PalInit+0xa>
    8daa:	f000 f82d 	bl	8e08 <CC_PalDmaInit>
    8dae:	4604      	mov	r4, r0
    8db0:	b108      	cbz	r0, 8db6 <CC_PalInit+0x3e>
    8db2:	4620      	mov	r0, r4
    8db4:	bd10      	pop	{r4, pc}
    8db6:	f000 f83f 	bl	8e38 <CC_PalPowerSaveModeInit>
    8dba:	4620      	mov	r0, r4
    8dbc:	e7fa      	b.n	8db4 <CC_PalInit+0x3c>
    8dbe:	bf00      	nop
    8dc0:	200001d4 	.word	0x200001d4
    8dc4:	200001c8 	.word	0x200001c8
    8dc8:	200001d0 	.word	0x200001d0
    8dcc:	200001d8 	.word	0x200001d8
    8dd0:	200001cc 	.word	0x200001cc

00008dd4 <CC_PalTerminate>:
    8dd4:	b508      	push	{r3, lr}
    8dd6:	4808      	ldr	r0, [pc, #32]	; (8df8 <CC_PalTerminate+0x24>)
    8dd8:	f000 f824 	bl	8e24 <CC_PalMutexDestroy>
    8ddc:	4807      	ldr	r0, [pc, #28]	; (8dfc <CC_PalTerminate+0x28>)
    8dde:	f000 f821 	bl	8e24 <CC_PalMutexDestroy>
    8de2:	4807      	ldr	r0, [pc, #28]	; (8e00 <CC_PalTerminate+0x2c>)
    8de4:	f000 f81e 	bl	8e24 <CC_PalMutexDestroy>
    8de8:	4806      	ldr	r0, [pc, #24]	; (8e04 <CC_PalTerminate+0x30>)
    8dea:	f000 f81b 	bl	8e24 <CC_PalMutexDestroy>
    8dee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8df2:	f000 b80b 	b.w	8e0c <CC_PalDmaTerminate>
    8df6:	bf00      	nop
    8df8:	200001d4 	.word	0x200001d4
    8dfc:	200001c8 	.word	0x200001c8
    8e00:	200001d0 	.word	0x200001d0
    8e04:	200001cc 	.word	0x200001cc

00008e08 <CC_PalDmaInit>:
    8e08:	2000      	movs	r0, #0
    8e0a:	4770      	bx	lr

00008e0c <CC_PalDmaTerminate>:
    8e0c:	4770      	bx	lr
    8e0e:	bf00      	nop

00008e10 <CC_PalMutexCreate>:
    8e10:	b508      	push	{r3, lr}
    8e12:	4b03      	ldr	r3, [pc, #12]	; (8e20 <CC_PalMutexCreate+0x10>)
    8e14:	6802      	ldr	r2, [r0, #0]
    8e16:	681b      	ldr	r3, [r3, #0]
    8e18:	6810      	ldr	r0, [r2, #0]
    8e1a:	4798      	blx	r3
    8e1c:	2000      	movs	r0, #0
    8e1e:	bd08      	pop	{r3, pc}
    8e20:	2000018c 	.word	0x2000018c

00008e24 <CC_PalMutexDestroy>:
    8e24:	b508      	push	{r3, lr}
    8e26:	4b03      	ldr	r3, [pc, #12]	; (8e34 <CC_PalMutexDestroy+0x10>)
    8e28:	6802      	ldr	r2, [r0, #0]
    8e2a:	685b      	ldr	r3, [r3, #4]
    8e2c:	6810      	ldr	r0, [r2, #0]
    8e2e:	4798      	blx	r3
    8e30:	2000      	movs	r0, #0
    8e32:	bd08      	pop	{r3, pc}
    8e34:	2000018c 	.word	0x2000018c

00008e38 <CC_PalPowerSaveModeInit>:
    8e38:	b570      	push	{r4, r5, r6, lr}
    8e3a:	4c09      	ldr	r4, [pc, #36]	; (8e60 <CC_PalPowerSaveModeInit+0x28>)
    8e3c:	4d09      	ldr	r5, [pc, #36]	; (8e64 <CC_PalPowerSaveModeInit+0x2c>)
    8e3e:	6920      	ldr	r0, [r4, #16]
    8e40:	68ab      	ldr	r3, [r5, #8]
    8e42:	4798      	blx	r3
    8e44:	b118      	cbz	r0, 8e4e <CC_PalPowerSaveModeInit+0x16>
    8e46:	4b08      	ldr	r3, [pc, #32]	; (8e68 <CC_PalPowerSaveModeInit+0x30>)
    8e48:	4808      	ldr	r0, [pc, #32]	; (8e6c <CC_PalPowerSaveModeInit+0x34>)
    8e4a:	685b      	ldr	r3, [r3, #4]
    8e4c:	4798      	blx	r3
    8e4e:	4a08      	ldr	r2, [pc, #32]	; (8e70 <CC_PalPowerSaveModeInit+0x38>)
    8e50:	68eb      	ldr	r3, [r5, #12]
    8e52:	6920      	ldr	r0, [r4, #16]
    8e54:	2100      	movs	r1, #0
    8e56:	6011      	str	r1, [r2, #0]
    8e58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8e5c:	4718      	bx	r3
    8e5e:	bf00      	nop
    8e60:	2000019c 	.word	0x2000019c
    8e64:	2000018c 	.word	0x2000018c
    8e68:	2000017c 	.word	0x2000017c
    8e6c:	0000a070 	.word	0x0000a070
    8e70:	20000d28 	.word	0x20000d28

00008e74 <CC_PalPowerSaveModeSelect>:
    8e74:	b570      	push	{r4, r5, r6, lr}
    8e76:	4d1b      	ldr	r5, [pc, #108]	; (8ee4 <CC_PalPowerSaveModeSelect+0x70>)
    8e78:	4e1b      	ldr	r6, [pc, #108]	; (8ee8 <CC_PalPowerSaveModeSelect+0x74>)
    8e7a:	4604      	mov	r4, r0
    8e7c:	68b2      	ldr	r2, [r6, #8]
    8e7e:	6928      	ldr	r0, [r5, #16]
    8e80:	4790      	blx	r2
    8e82:	b9f8      	cbnz	r0, 8ec4 <CC_PalPowerSaveModeSelect+0x50>
    8e84:	b15c      	cbz	r4, 8e9e <CC_PalPowerSaveModeSelect+0x2a>
    8e86:	4c19      	ldr	r4, [pc, #100]	; (8eec <CC_PalPowerSaveModeSelect+0x78>)
    8e88:	6823      	ldr	r3, [r4, #0]
    8e8a:	b1b3      	cbz	r3, 8eba <CC_PalPowerSaveModeSelect+0x46>
    8e8c:	2b01      	cmp	r3, #1
    8e8e:	d01b      	beq.n	8ec8 <CC_PalPowerSaveModeSelect+0x54>
    8e90:	3b01      	subs	r3, #1
    8e92:	6023      	str	r3, [r4, #0]
    8e94:	6928      	ldr	r0, [r5, #16]
    8e96:	68f3      	ldr	r3, [r6, #12]
    8e98:	4798      	blx	r3
    8e9a:	2000      	movs	r0, #0
    8e9c:	bd70      	pop	{r4, r5, r6, pc}
    8e9e:	4c13      	ldr	r4, [pc, #76]	; (8eec <CC_PalPowerSaveModeSelect+0x78>)
    8ea0:	6821      	ldr	r1, [r4, #0]
    8ea2:	b941      	cbnz	r1, 8eb6 <CC_PalPowerSaveModeSelect+0x42>
    8ea4:	4b12      	ldr	r3, [pc, #72]	; (8ef0 <CC_PalPowerSaveModeSelect+0x7c>)
    8ea6:	2201      	movs	r2, #1
    8ea8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    8eac:	4a11      	ldr	r2, [pc, #68]	; (8ef4 <CC_PalPowerSaveModeSelect+0x80>)
    8eae:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d1fb      	bne.n	8eae <CC_PalPowerSaveModeSelect+0x3a>
    8eb6:	3101      	adds	r1, #1
    8eb8:	6021      	str	r1, [r4, #0]
    8eba:	68f3      	ldr	r3, [r6, #12]
    8ebc:	6928      	ldr	r0, [r5, #16]
    8ebe:	4798      	blx	r3
    8ec0:	2000      	movs	r0, #0
    8ec2:	bd70      	pop	{r4, r5, r6, pc}
    8ec4:	480c      	ldr	r0, [pc, #48]	; (8ef8 <CC_PalPowerSaveModeSelect+0x84>)
    8ec6:	bd70      	pop	{r4, r5, r6, pc}
    8ec8:	4a0a      	ldr	r2, [pc, #40]	; (8ef4 <CC_PalPowerSaveModeSelect+0x80>)
    8eca:	f8d2 3910 	ldr.w	r3, [r2, #2320]	; 0x910
    8ece:	2b00      	cmp	r3, #0
    8ed0:	d1fb      	bne.n	8eca <CC_PalPowerSaveModeSelect+0x56>
    8ed2:	4a07      	ldr	r2, [pc, #28]	; (8ef0 <CC_PalPowerSaveModeSelect+0x7c>)
    8ed4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    8ed8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8edc:	f7ff ff46 	bl	8d6c <CC_HalMaskInterrupt>
    8ee0:	6823      	ldr	r3, [r4, #0]
    8ee2:	e7d5      	b.n	8e90 <CC_PalPowerSaveModeSelect+0x1c>
    8ee4:	2000019c 	.word	0x2000019c
    8ee8:	2000018c 	.word	0x2000018c
    8eec:	20000d28 	.word	0x20000d28
    8ef0:	5002a000 	.word	0x5002a000
    8ef4:	5002b000 	.word	0x5002b000
    8ef8:	ffff8fe9 	.word	0xffff8fe9

00008efc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8efc:	4770      	bx	lr

00008efe <k_uptime_get>:
{
    8efe:	b508      	push	{r3, lr}
	return z_impl_k_uptime_ticks();
    8f00:	f000 fd9e 	bl	9a40 <z_impl_k_uptime_ticks>
    8f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8f08:	fba0 0302 	umull	r0, r3, r0, r2
    8f0c:	fb02 3101 	mla	r1, r2, r1, r3
    8f10:	0bc0      	lsrs	r0, r0, #15
}
    8f12:	ea40 4041 	orr.w	r0, r0, r1, lsl #17
    8f16:	0bc9      	lsrs	r1, r1, #15
    8f18:	bd08      	pop	{r3, pc}

00008f1a <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    8f1a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8f1e:	4607      	mov	r7, r0
    8f20:	460e      	mov	r6, r1
    8f22:	4690      	mov	r8, r2
	uint8_t *buf = packaged;
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    8f24:	461d      	mov	r5, r3
    8f26:	b30b      	cbz	r3, 8f6c <cbpprintf_external+0x52>
	s_nbr     = buf[1];
	ros_nbr   = buf[2];
	rws_nbr   = buf[3];

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    8f28:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    8f2a:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    8f2c:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    8f30:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    8f32:	441c      	add	r4, r3
    8f34:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    8f38:	442c      	add	r4, r5

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    8f3a:	f04f 0900 	mov.w	r9, #0
    8f3e:	45d1      	cmp	r9, sl
    8f40:	d308      	bcc.n	8f54 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    8f42:	686a      	ldr	r2, [r5, #4]
    8f44:	f105 0308 	add.w	r3, r5, #8
    8f48:	4641      	mov	r1, r8
    8f4a:	4638      	mov	r0, r7
    8f4c:	46b4      	mov	ip, r6
	/* skip past format string pointer */
	buf += sizeof(char *) * 2;

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
}
    8f4e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    8f52:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    8f54:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    8f58:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    8f5c:	4620      	mov	r0, r4
    8f5e:	f000 f9df 	bl	9320 <strlen>
    8f62:	3001      	adds	r0, #1
    8f64:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    8f66:	f109 0901 	add.w	r9, r9, #1
    8f6a:	e7e8      	b.n	8f3e <cbpprintf_external+0x24>
}
    8f6c:	f06f 0015 	mvn.w	r0, #21
    8f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00008f74 <sys_notify_validate>:
	if (notify == NULL) {
    8f74:	4603      	mov	r3, r0
    8f76:	b158      	cbz	r0, 8f90 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8f78:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8f7a:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    8f7e:	2a01      	cmp	r2, #1
    8f80:	d003      	beq.n	8f8a <sys_notify_validate+0x16>
    8f82:	2a03      	cmp	r2, #3
    8f84:	d104      	bne.n	8f90 <sys_notify_validate+0x1c>
		if (notify->method.callback == NULL) {
    8f86:	6802      	ldr	r2, [r0, #0]
    8f88:	b112      	cbz	r2, 8f90 <sys_notify_validate+0x1c>
		notify->result = 0;
    8f8a:	2000      	movs	r0, #0
    8f8c:	6098      	str	r0, [r3, #8]
    8f8e:	4770      	bx	lr
		return -EINVAL;
    8f90:	f06f 0015 	mvn.w	r0, #21
}
    8f94:	4770      	bx	lr

00008f96 <arch_printk_char_out>:
}
    8f96:	2000      	movs	r0, #0
    8f98:	4770      	bx	lr

00008f9a <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
    8f9a:	f000 b90f 	b.w	91bc <z_log_vprintk>

00008f9e <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    8f9e:	b40f      	push	{r0, r1, r2, r3}
    8fa0:	b507      	push	{r0, r1, r2, lr}
    8fa2:	a904      	add	r1, sp, #16
    8fa4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8fa8:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    8faa:	f000 f907 	bl	91bc <z_log_vprintk>

	vprintk(fmt, ap);

	va_end(ap);
}
    8fae:	b003      	add	sp, #12
    8fb0:	f85d eb04 	ldr.w	lr, [sp], #4
    8fb4:	b004      	add	sp, #16
    8fb6:	4770      	bx	lr

00008fb8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8fb8:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8fba:	f013 0307 	ands.w	r3, r3, #7
    8fbe:	d105      	bne.n	8fcc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8fc0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	bf0c      	ite	eq
    8fc6:	2000      	moveq	r0, #0
    8fc8:	2003      	movne	r0, #3
    8fca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8fcc:	2b02      	cmp	r3, #2
    8fce:	d105      	bne.n	8fdc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8fd0:	8bc3      	ldrh	r3, [r0, #30]
		evt = EVT_STOP;
    8fd2:	2b00      	cmp	r3, #0
    8fd4:	bf14      	ite	ne
    8fd6:	2000      	movne	r0, #0
    8fd8:	2004      	moveq	r0, #4
    8fda:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8fdc:	2b01      	cmp	r3, #1
    8fde:	d105      	bne.n	8fec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8fe0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    8fe2:	2b00      	cmp	r3, #0
    8fe4:	bf0c      	ite	eq
    8fe6:	2000      	moveq	r0, #0
    8fe8:	2005      	movne	r0, #5
    8fea:	4770      	bx	lr
	int evt = EVT_NOP;
    8fec:	2000      	movs	r0, #0
}
    8fee:	4770      	bx	lr

00008ff0 <notify_one>:
{
    8ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ff4:	460d      	mov	r5, r1
    8ff6:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8ff8:	4619      	mov	r1, r3
    8ffa:	1d28      	adds	r0, r5, #4
{
    8ffc:	4690      	mov	r8, r2
    8ffe:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9000:	f7f8 fa6a 	bl	14d8 <sys_notify_finalize>
	if (cb) {
    9004:	4604      	mov	r4, r0
    9006:	b138      	cbz	r0, 9018 <notify_one+0x28>
		cb(mgr, cli, state, res);
    9008:	4633      	mov	r3, r6
    900a:	4642      	mov	r2, r8
    900c:	4629      	mov	r1, r5
    900e:	4638      	mov	r0, r7
    9010:	46a4      	mov	ip, r4
}
    9012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9016:	4760      	bx	ip
}
    9018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000901c <validate_args>:
{
    901c:	b510      	push	{r4, lr}
    901e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9020:	b140      	cbz	r0, 9034 <validate_args+0x18>
    9022:	b139      	cbz	r1, 9034 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    9024:	1d08      	adds	r0, r1, #4
    9026:	f7ff ffa5 	bl	8f74 <sys_notify_validate>
	if ((rv == 0)
    902a:	b928      	cbnz	r0, 9038 <validate_args+0x1c>
	    && ((cli->notify.flags
    902c:	68a3      	ldr	r3, [r4, #8]
    902e:	f033 0303 	bics.w	r3, r3, #3
    9032:	d001      	beq.n	9038 <validate_args+0x1c>
		rv = -EINVAL;
    9034:	f06f 0015 	mvn.w	r0, #21
}
    9038:	bd10      	pop	{r4, pc}

0000903a <onoff_manager_init>:
{
    903a:	b538      	push	{r3, r4, r5, lr}
    903c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    903e:	4605      	mov	r5, r0
    9040:	b158      	cbz	r0, 905a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9042:	b151      	cbz	r1, 905a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9044:	680b      	ldr	r3, [r1, #0]
    9046:	b143      	cbz	r3, 905a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9048:	684b      	ldr	r3, [r1, #4]
    904a:	b133      	cbz	r3, 905a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    904c:	2220      	movs	r2, #32
    904e:	2100      	movs	r1, #0
    9050:	f000 f98d 	bl	936e <memset>
    9054:	612c      	str	r4, [r5, #16]
	return 0;
    9056:	2000      	movs	r0, #0
}
    9058:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    905a:	f06f 0015 	mvn.w	r0, #21
    905e:	e7fb      	b.n	9058 <onoff_manager_init+0x1e>

00009060 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9060:	4604      	mov	r4, r0
    9062:	b508      	push	{r3, lr}
    9064:	4608      	mov	r0, r1
    9066:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9068:	461a      	mov	r2, r3
    906a:	47a0      	blx	r4
	return z_impl_z_current_get();
    906c:	f7ff f856 	bl	811c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9070:	f7fa fd18 	bl	3aa4 <z_impl_k_thread_abort>

00009074 <chunk_size>:
		return ((uint16_t *)cmem)[f];
    9074:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    9078:	8840      	ldrh	r0, [r0, #2]
}
    907a:	0840      	lsrs	r0, r0, #1
    907c:	4770      	bx	lr

0000907e <free_list_add>:
{
    907e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9080:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    9082:	f7ff fff7 	bl	9074 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    9086:	fab0 f080 	clz	r0, r0
    908a:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    908e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    9092:	00ca      	lsls	r2, r1, #3
    9094:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    9098:	1d17      	adds	r7, r2, #4
{
    909a:	460c      	mov	r4, r1
    909c:	3206      	adds	r2, #6
    909e:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    90a0:	b956      	cbnz	r6, 90b8 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    90a2:	2101      	movs	r1, #1
    90a4:	fa01 f000 	lsl.w	r0, r1, r0
    90a8:	68d9      	ldr	r1, [r3, #12]
    90aa:	4301      	orrs	r1, r0
    90ac:	60d9      	str	r1, [r3, #12]
		b->next = c;
    90ae:	f8cc 4010 	str.w	r4, [ip, #16]
    90b2:	53dd      	strh	r5, [r3, r7]
    90b4:	529d      	strh	r5, [r3, r2]
}
    90b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    90b8:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    90ba:	3104      	adds	r1, #4
    90bc:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    90be:	53d8      	strh	r0, [r3, r7]
    90c0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    90c4:	529e      	strh	r6, [r3, r2]
    90c6:	80c5      	strh	r5, [r0, #6]
    90c8:	525d      	strh	r5, [r3, r1]
    90ca:	e7f4      	b.n	90b6 <free_list_add+0x38>

000090cc <encode_uint>:
{
    90cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    90d0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    90d2:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    90d4:	2b6f      	cmp	r3, #111	; 0x6f
{
    90d6:	4680      	mov	r8, r0
    90d8:	460f      	mov	r7, r1
    90da:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    90dc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    90e0:	d029      	beq.n	9136 <encode_uint+0x6a>
    90e2:	d824      	bhi.n	912e <encode_uint+0x62>
		return 16;
    90e4:	2b58      	cmp	r3, #88	; 0x58
    90e6:	bf14      	ite	ne
    90e8:	260a      	movne	r6, #10
    90ea:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    90ec:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    90f0:	4632      	mov	r2, r6
    90f2:	2300      	movs	r3, #0
    90f4:	4640      	mov	r0, r8
    90f6:	4639      	mov	r1, r7
    90f8:	f7f7 f9e4 	bl	4c4 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    90fc:	2a09      	cmp	r2, #9
    90fe:	b2d4      	uxtb	r4, r2
    9100:	d81e      	bhi.n	9140 <encode_uint+0x74>
    9102:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    9104:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9106:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    9108:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    910c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    9110:	d301      	bcc.n	9116 <encode_uint+0x4a>
    9112:	45d1      	cmp	r9, sl
    9114:	d811      	bhi.n	913a <encode_uint+0x6e>
	if (conv->flag_hash) {
    9116:	782b      	ldrb	r3, [r5, #0]
    9118:	069b      	lsls	r3, r3, #26
    911a:	d505      	bpl.n	9128 <encode_uint+0x5c>
		if (radix == 8) {
    911c:	2e08      	cmp	r6, #8
    911e:	d115      	bne.n	914c <encode_uint+0x80>
			conv->altform_0 = true;
    9120:	78ab      	ldrb	r3, [r5, #2]
    9122:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    9126:	70ab      	strb	r3, [r5, #2]
}
    9128:	4648      	mov	r0, r9
    912a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    912e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    9132:	2b70      	cmp	r3, #112	; 0x70
    9134:	e7d7      	b.n	90e6 <encode_uint+0x1a>
	switch (specifier) {
    9136:	2608      	movs	r6, #8
    9138:	e7d8      	b.n	90ec <encode_uint+0x20>
		value /= radix;
    913a:	4680      	mov	r8, r0
    913c:	460f      	mov	r7, r1
    913e:	e7d7      	b.n	90f0 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    9140:	f1bb 0f19 	cmp.w	fp, #25
    9144:	bf94      	ite	ls
    9146:	3437      	addls	r4, #55	; 0x37
    9148:	3457      	addhi	r4, #87	; 0x57
    914a:	e7db      	b.n	9104 <encode_uint+0x38>
		} else if (radix == 16) {
    914c:	2e10      	cmp	r6, #16
    914e:	d1eb      	bne.n	9128 <encode_uint+0x5c>
			conv->altform_0c = true;
    9150:	78ab      	ldrb	r3, [r5, #2]
    9152:	f043 0310 	orr.w	r3, r3, #16
    9156:	e7e6      	b.n	9126 <encode_uint+0x5a>

00009158 <outs>:
{
    9158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    915c:	4607      	mov	r7, r0
    915e:	4688      	mov	r8, r1
    9160:	4615      	mov	r5, r2
    9162:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    9164:	4614      	mov	r4, r2
    9166:	42b4      	cmp	r4, r6
    9168:	eba4 0005 	sub.w	r0, r4, r5
    916c:	d302      	bcc.n	9174 <outs+0x1c>
    916e:	b93e      	cbnz	r6, 9180 <outs+0x28>
    9170:	7823      	ldrb	r3, [r4, #0]
    9172:	b12b      	cbz	r3, 9180 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    9174:	f814 0b01 	ldrb.w	r0, [r4], #1
    9178:	4641      	mov	r1, r8
    917a:	47b8      	blx	r7
		if (rc < 0) {
    917c:	2800      	cmp	r0, #0
    917e:	daf2      	bge.n	9166 <outs+0xe>
}
    9180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009184 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    9184:	4040      	eors	r0, r0
    9186:	f380 8811 	msr	BASEPRI, r0
    918a:	f04f 0004 	mov.w	r0, #4
    918e:	df02      	svc	2
}
    9190:	4770      	bx	lr

00009192 <assert_print>:

void assert_print(const char *fmt, ...)
{
    9192:	b40f      	push	{r0, r1, r2, r3}
    9194:	b507      	push	{r0, r1, r2, lr}
    9196:	a904      	add	r1, sp, #16
    9198:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    919c:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    919e:	f7ff fefc 	bl	8f9a <vprintk>

	va_end(ap);
}
    91a2:	b003      	add	sp, #12
    91a4:	f85d eb04 	ldr.w	lr, [sp], #4
    91a8:	b004      	add	sp, #16
    91aa:	4770      	bx	lr

000091ac <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    91ac:	4770      	bx	lr

000091ae <log_backend_is_active>:
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    91ae:	6843      	ldr	r3, [r0, #4]
}
    91b0:	7958      	ldrb	r0, [r3, #5]
    91b2:	4770      	bx	lr

000091b4 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    91b4:	f000 ba2d 	b.w	9612 <sys_clock_cycle_get_32>

000091b8 <dummy_timestamp>:
    91b8:	2000      	movs	r0, #0
    91ba:	4770      	bx	lr

000091bc <z_log_vprintk>:
{
    91bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    91be:	2300      	movs	r3, #0
    91c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
    91c4:	e9cd 3300 	strd	r3, r3, [sp]
    91c8:	461a      	mov	r2, r3
    91ca:	4619      	mov	r1, r3
    91cc:	4618      	mov	r0, r3
    91ce:	f7f9 fbb7 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    91d2:	b005      	add	sp, #20
    91d4:	f85d fb04 	ldr.w	pc, [sp], #4

000091d8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    91d8:	b508      	push	{r3, lr}
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
	} else {
		log_init();
    91da:	f7f9 f915 	bl	2408 <log_init>
	}

	return 0;
}
    91de:	2000      	movs	r0, #0
    91e0:	bd08      	pop	{r3, pc}

000091e2 <z_log_get_tag>:
}
    91e2:	2000      	movs	r0, #0
    91e4:	4770      	bx	lr

000091e6 <out_func>:
{
    91e6:	b507      	push	{r0, r1, r2, lr}
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    91e8:	e9d1 3200 	ldrd	r3, r2, [r1]
		char x = (char)c;
    91ec:	f88d 0007 	strb.w	r0, [sp, #7]
		out_ctx->func((uint8_t *)&x, 1, out_ctx->control_block->ctx);
    91f0:	6852      	ldr	r2, [r2, #4]
    91f2:	2101      	movs	r1, #1
    91f4:	f10d 0007 	add.w	r0, sp, #7
    91f8:	4798      	blx	r3
}
    91fa:	2000      	movs	r0, #0
    91fc:	b003      	add	sp, #12
    91fe:	f85d fb04 	ldr.w	pc, [sp], #4

00009202 <cr_out_func>:
{
    9202:	b538      	push	{r3, r4, r5, lr}
    9204:	4605      	mov	r5, r0
    9206:	460c      	mov	r4, r1
	out_func(c, ctx);
    9208:	f7ff ffed 	bl	91e6 <out_func>
	if (c == '\n') {
    920c:	2d0a      	cmp	r5, #10
    920e:	d103      	bne.n	9218 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    9210:	4621      	mov	r1, r4
    9212:	200d      	movs	r0, #13
    9214:	f7ff ffe7 	bl	91e6 <out_func>
}
    9218:	2000      	movs	r0, #0
    921a:	bd38      	pop	{r3, r4, r5, pc}

0000921c <buffer_write>:
{
    921c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    921e:	4606      	mov	r6, r0
    9220:	460d      	mov	r5, r1
    9222:	4614      	mov	r4, r2
    9224:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    9226:	4621      	mov	r1, r4
    9228:	4628      	mov	r0, r5
    922a:	463a      	mov	r2, r7
    922c:	47b0      	blx	r6
	} while (len != 0);
    922e:	1a24      	subs	r4, r4, r0
		buf += processed;
    9230:	4405      	add	r5, r0
	} while (len != 0);
    9232:	d1f8      	bne.n	9226 <buffer_write+0xa>
}
    9234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009236 <log_output_flush>:
		     output->control_block->offset,
    9236:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    9238:	6881      	ldr	r1, [r0, #8]
{
    923a:	b510      	push	{r4, lr}
    923c:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    923e:	e9d2 2300 	ldrd	r2, r3, [r2]
    9242:	6800      	ldr	r0, [r0, #0]
    9244:	f7ff ffea 	bl	921c <buffer_write>
	output->control_block->offset = 0;
    9248:	6863      	ldr	r3, [r4, #4]
    924a:	2200      	movs	r2, #0
    924c:	601a      	str	r2, [r3, #0]
}
    924e:	bd10      	pop	{r4, pc}

00009250 <z_log_msg2_finalize>:
{
    9250:	b570      	push	{r4, r5, r6, lr}
    9252:	460e      	mov	r6, r1
    9254:	4615      	mov	r5, r2
    9256:	4619      	mov	r1, r3
	if (!msg) {
    9258:	4604      	mov	r4, r0
    925a:	b918      	cbnz	r0, 9264 <z_log_msg2_finalize+0x14>
}
    925c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    9260:	f7f9 b938 	b.w	24d4 <z_log_dropped>
	if (data) {
    9264:	b143      	cbz	r3, 9278 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    9266:	f100 0310 	add.w	r3, r0, #16
    926a:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    926e:	4418      	add	r0, r3
    9270:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    9274:	f000 f870 	bl	9358 <memcpy>
	msg->hdr.source = source;
    9278:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    927c:	4620      	mov	r0, r4
}
    927e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    9282:	f7f9 b945 	b.w	2510 <z_log_msg2_commit>

00009286 <abort_function>:
{
    9286:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    9288:	2000      	movs	r0, #0
    928a:	f7f9 f85b 	bl	2344 <sys_reboot>

0000928e <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    928e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    9290:	ab0b      	add	r3, sp, #44	; 0x2c
    9292:	9305      	str	r3, [sp, #20]
    9294:	9303      	str	r3, [sp, #12]
    9296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9298:	9302      	str	r3, [sp, #8]
    929a:	2300      	movs	r3, #0
    929c:	e9cd 3300 	strd	r3, r3, [sp]
    92a0:	2201      	movs	r2, #1
    92a2:	4618      	mov	r0, r3
    92a4:	f7f9 fb4c 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    92a8:	b007      	add	sp, #28
    92aa:	f85d fb04 	ldr.w	pc, [sp], #4

000092ae <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    92ae:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    92b0:	6800      	ldr	r0, [r0, #0]
    92b2:	f7f9 bedb 	b.w	306c <z_arm_fatal_error>

000092b6 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    92b6:	2100      	movs	r1, #0
    92b8:	2001      	movs	r0, #1
    92ba:	f7f9 bed7 	b.w	306c <z_arm_fatal_error>

000092be <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    92be:	b508      	push	{r3, lr}
	handler();
    92c0:	f7f9 ff76 	bl	31b0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    92c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    92c8:	f7fa b84e 	b.w	3368 <z_arm_exc_exit>

000092cc <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    92cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    92ce:	ab0b      	add	r3, sp, #44	; 0x2c
    92d0:	9305      	str	r3, [sp, #20]
    92d2:	9303      	str	r3, [sp, #12]
    92d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    92d6:	9302      	str	r3, [sp, #8]
    92d8:	2300      	movs	r3, #0
    92da:	e9cd 3300 	strd	r3, r3, [sp]
    92de:	2201      	movs	r2, #1
    92e0:	4618      	mov	r0, r3
    92e2:	f7f9 fb2d 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    92e6:	b007      	add	sp, #28
    92e8:	f85d fb04 	ldr.w	pc, [sp], #4

000092ec <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    92ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    92ee:	ab0b      	add	r3, sp, #44	; 0x2c
    92f0:	9305      	str	r3, [sp, #20]
    92f2:	9303      	str	r3, [sp, #12]
    92f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    92f6:	9302      	str	r3, [sp, #8]
    92f8:	2300      	movs	r3, #0
    92fa:	e9cd 3300 	strd	r3, r3, [sp]
    92fe:	2201      	movs	r2, #1
    9300:	4618      	mov	r0, r3
    9302:	f7f9 fb1d 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    9306:	b007      	add	sp, #28
    9308:	f85d fb04 	ldr.w	pc, [sp], #4

0000930c <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    930c:	3901      	subs	r1, #1
    930e:	4603      	mov	r3, r0
    9310:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    9314:	b90a      	cbnz	r2, 931a <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    9316:	701a      	strb	r2, [r3, #0]

	return dest;
}
    9318:	4770      	bx	lr
		*d = *s;
    931a:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    931e:	e7f7      	b.n	9310 <strcpy+0x4>

00009320 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    9320:	4603      	mov	r3, r0
	size_t n = 0;
    9322:	2000      	movs	r0, #0

	while (*s != '\0') {
    9324:	5c1a      	ldrb	r2, [r3, r0]
    9326:	b902      	cbnz	r2, 932a <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    9328:	4770      	bx	lr
		n++;
    932a:	3001      	adds	r0, #1
    932c:	e7fa      	b.n	9324 <strlen+0x4>

0000932e <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    932e:	4603      	mov	r3, r0
	size_t n = 0;
    9330:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    9332:	5c1a      	ldrb	r2, [r3, r0]
    9334:	b10a      	cbz	r2, 933a <strnlen+0xc>
    9336:	4288      	cmp	r0, r1
    9338:	d100      	bne.n	933c <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    933a:	4770      	bx	lr
		n++;
    933c:	3001      	adds	r0, #1
    933e:	e7f8      	b.n	9332 <strnlen+0x4>

00009340 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    9340:	1e43      	subs	r3, r0, #1
    9342:	3901      	subs	r1, #1
    9344:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9348:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    934c:	4282      	cmp	r2, r0
    934e:	d101      	bne.n	9354 <strcmp+0x14>
    9350:	2a00      	cmp	r2, #0
    9352:	d1f7      	bne.n	9344 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    9354:	1a10      	subs	r0, r2, r0
    9356:	4770      	bx	lr

00009358 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    9358:	b510      	push	{r4, lr}
    935a:	1e43      	subs	r3, r0, #1
    935c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    935e:	4291      	cmp	r1, r2
    9360:	d100      	bne.n	9364 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    9362:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    9364:	f811 4b01 	ldrb.w	r4, [r1], #1
    9368:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    936c:	e7f7      	b.n	935e <memcpy+0x6>

0000936e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    936e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    9370:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    9372:	4603      	mov	r3, r0
	while (n > 0) {
    9374:	4293      	cmp	r3, r2
    9376:	d100      	bne.n	937a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    9378:	4770      	bx	lr
		*(d_byte++) = c_byte;
    937a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    937e:	e7f9      	b.n	9374 <memset+0x6>

00009380 <_stdout_hook_default>:
}
    9380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    9384:	4770      	bx	lr

00009386 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    9386:	2806      	cmp	r0, #6
    9388:	d108      	bne.n	939c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    938a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    938e:	2201      	movs	r2, #1
    9390:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9394:	f3bf 8f4f 	dsb	sy
        __WFE();
    9398:	bf20      	wfe
    while (true)
    939a:	e7fd      	b.n	9398 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    939c:	4770      	bx	lr

0000939e <pm_state_exit_post_ops>:
    939e:	2300      	movs	r3, #0
    93a0:	f383 8811 	msr	BASEPRI, r3
    93a4:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    93a8:	4770      	bx	lr

000093aa <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    93aa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    93ac:	ab0b      	add	r3, sp, #44	; 0x2c
    93ae:	9305      	str	r3, [sp, #20]
    93b0:	9303      	str	r3, [sp, #12]
    93b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    93b4:	9302      	str	r3, [sp, #8]
    93b6:	2300      	movs	r3, #0
    93b8:	e9cd 3300 	strd	r3, r3, [sp]
    93bc:	2201      	movs	r2, #1
    93be:	4618      	mov	r0, r3
    93c0:	f7f9 fabe 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    93c4:	b007      	add	sp, #28
    93c6:	f85d fb04 	ldr.w	pc, [sp], #4

000093ca <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    93ca:	f1a0 0308 	sub.w	r3, r0, #8
    93ce:	f3bf 8f5b 	dmb	ish
    93d2:	e853 2f00 	ldrex	r2, [r3]
    93d6:	1c51      	adds	r1, r2, #1
    93d8:	e843 1c00 	strex	ip, r1, [r3]
    93dc:	f1bc 0f00 	cmp.w	ip, #0
    93e0:	d1f7      	bne.n	93d2 <adc_context_on_timer_expired+0x8>
    93e2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    93e6:	b91a      	cbnz	r2, 93f0 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    93e8:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    93ec:	f7fa bd92 	b.w	3f14 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    93f0:	f06f 030f 	mvn.w	r3, #15
    93f4:	6583      	str	r3, [r0, #88]	; 0x58
}
    93f6:	4770      	bx	lr

000093f8 <set_on_state>:
	__asm__ volatile(
    93f8:	f04f 0320 	mov.w	r3, #32
    93fc:	f3ef 8211 	mrs	r2, BASEPRI
    9400:	f383 8812 	msr	BASEPRI_MAX, r3
    9404:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9408:	6803      	ldr	r3, [r0, #0]
    940a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    940e:	f043 0302 	orr.w	r3, r3, #2
    9412:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    9414:	f382 8811 	msr	BASEPRI, r2
    9418:	f3bf 8f6f 	isb	sy
}
    941c:	4770      	bx	lr

0000941e <async_start>:
{
    941e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9420:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    9422:	6904      	ldr	r4, [r0, #16]
{
    9424:	4605      	mov	r5, r0
    9426:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    9428:	f04f 0020 	mov.w	r0, #32
    942c:	f3ef 8c11 	mrs	ip, BASEPRI
    9430:	f380 8812 	msr	BASEPRI_MAX, r0
    9434:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    9438:	260c      	movs	r6, #12
    943a:	fb06 4601 	mla	r6, r6, r1, r4
    943e:	6cb0      	ldr	r0, [r6, #72]	; 0x48
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    9440:	f000 0e07 	and.w	lr, r0, #7
    9444:	f1be 0f01 	cmp.w	lr, #1
    9448:	d110      	bne.n	946c <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    944a:	64b7      	str	r7, [r6, #72]	; 0x48
	int err = 0;
    944c:	2600      	movs	r6, #0
	__asm__ volatile(
    944e:	f38c 8811 	msr	BASEPRI, ip
    9452:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    9456:	b93e      	cbnz	r6, 9468 <async_start+0x4a>
	subdata->cb = cb;
    9458:	200c      	movs	r0, #12
    945a:	4341      	muls	r1, r0
    945c:	440c      	add	r4, r1
	subdata->user_data = user_data;
    945e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    9462:	686b      	ldr	r3, [r5, #4]
    9464:	585b      	ldr	r3, [r3, r1]
    9466:	4798      	blx	r3
}
    9468:	4630      	mov	r0, r6
    946a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    946c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    9470:	4287      	cmp	r7, r0
    9472:	bf14      	ite	ne
    9474:	f04f 36ff 	movne.w	r6, #4294967295	; 0xffffffff
    9478:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    947c:	e7e7      	b.n	944e <async_start+0x30>

0000947e <api_start>:
{
    947e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    9480:	2480      	movs	r4, #128	; 0x80
    9482:	9400      	str	r4, [sp, #0]
    9484:	f7ff ffcb 	bl	941e <async_start>
}
    9488:	b002      	add	sp, #8
    948a:	bd10      	pop	{r4, pc}

0000948c <onoff_started_callback>:
	return &data->mgr[type];
    948c:	6900      	ldr	r0, [r0, #16]
    948e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    9490:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    9494:	2100      	movs	r1, #0
    9496:	4710      	bx	r2

00009498 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9498:	2000      	movs	r0, #0
    949a:	f7fc b965 	b.w	5768 <nrfx_clock_start>

0000949e <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    949e:	2000      	movs	r0, #0
    94a0:	f7fc b9c6 	b.w	5830 <nrfx_clock_stop>

000094a4 <api_stop>:
	return stop(dev, subsys, CTX_API);
    94a4:	2280      	movs	r2, #128	; 0x80
    94a6:	f7fa bf03 	b.w	42b0 <stop>

000094aa <blocking_start_callback>:
{
    94aa:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    94ac:	f7fd bc84 	b.w	6db8 <z_impl_k_sem_give>

000094b0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    94b0:	6843      	ldr	r3, [r0, #4]
    94b2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    94b4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    94b8:	600b      	str	r3, [r1, #0]
}
    94ba:	2000      	movs	r0, #0
    94bc:	4770      	bx	lr

000094be <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    94be:	6843      	ldr	r3, [r0, #4]
    94c0:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    94c2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    94c6:	4042      	eors	r2, r0
    94c8:	400a      	ands	r2, r1
    94ca:	4042      	eors	r2, r0
    p_reg->OUT = value;
    94cc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    94d0:	2000      	movs	r0, #0
    94d2:	4770      	bx	lr

000094d4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    94d4:	6843      	ldr	r3, [r0, #4]
    94d6:	685b      	ldr	r3, [r3, #4]
}
    94d8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    94da:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    94de:	4770      	bx	lr

000094e0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    94e0:	6843      	ldr	r3, [r0, #4]
    94e2:	685b      	ldr	r3, [r3, #4]
}
    94e4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    94e6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    94ea:	4770      	bx	lr

000094ec <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    94ec:	6843      	ldr	r3, [r0, #4]
    94ee:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    94f0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    94f4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    94f6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    94fa:	2000      	movs	r0, #0
    94fc:	4770      	bx	lr

000094fe <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    94fe:	6902      	ldr	r2, [r0, #16]
{
    9500:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    9502:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    9506:	e883 0003 	stmia.w	r3, {r0, r1}
}
    950a:	2000      	movs	r0, #0
    950c:	4770      	bx	lr

0000950e <uarte_nrfx_err_check>:
	return config->uarte_regs;
    950e:	6843      	ldr	r3, [r0, #4]
    9510:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    9512:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    9516:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    951a:	4770      	bx	lr

0000951c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    951c:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    951e:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    9520:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9522:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9526:	b148      	cbz	r0, 953c <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    9528:	7c52      	ldrb	r2, [r2, #17]
    952a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    952c:	2000      	movs	r0, #0
    952e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9532:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9536:	2201      	movs	r2, #1
    9538:	601a      	str	r2, [r3, #0]
	return 0;
    953a:	4770      	bx	lr
		return -1;
    953c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    9540:	4770      	bx	lr

00009542 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    9542:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    9544:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9546:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    954a:	b940      	cbnz	r0, 955e <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    954c:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    954e:	079b      	lsls	r3, r3, #30
    9550:	d406      	bmi.n	9560 <is_tx_ready.isra.0+0x1e>
    9552:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    9556:	3800      	subs	r0, #0
    9558:	bf18      	it	ne
    955a:	2001      	movne	r0, #1
    955c:	4770      	bx	lr
    955e:	2001      	movs	r0, #1
}
    9560:	4770      	bx	lr

00009562 <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    9562:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    9564:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    9566:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    956a:	05c9      	lsls	r1, r1, #23
    956c:	d518      	bpl.n	95a0 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    956e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    9572:	b1a9      	cbz	r1, 95a0 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    9574:	f04f 0020 	mov.w	r0, #32
    9578:	f3ef 8111 	mrs	r1, BASEPRI
    957c:	f380 8812 	msr	BASEPRI_MAX, r0
    9580:	f3bf 8f6f 	isb	sy
    9584:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    9588:	b130      	cbz	r0, 9598 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    958a:	2000      	movs	r0, #0
    958c:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    9590:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9594:	2001      	movs	r0, #1
    9596:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    9598:	f381 8811 	msr	BASEPRI, r1
    959c:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    95a0:	6852      	ldr	r2, [r2, #4]
    95a2:	06d2      	lsls	r2, r2, #27
    95a4:	d515      	bpl.n	95d2 <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    95a6:	f04f 0120 	mov.w	r1, #32
    95aa:	f3ef 8211 	mrs	r2, BASEPRI
    95ae:	f381 8812 	msr	BASEPRI_MAX, r1
    95b2:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    95b6:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    95ba:	b111      	cbz	r1, 95c2 <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    95bc:	2100      	movs	r1, #0
    95be:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    95c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    95c6:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    95ca:	f382 8811 	msr	BASEPRI, r2
    95ce:	f3bf 8f6f 	isb	sy
}
    95d2:	4770      	bx	lr

000095d4 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    95d4:	b510      	push	{r4, lr}
    95d6:	2200      	movs	r2, #0
    95d8:	4604      	mov	r4, r0
    95da:	2101      	movs	r1, #1
    95dc:	2028      	movs	r0, #40	; 0x28
    95de:	f7f9 fdb3 	bl	3148 <z_arm_irq_priority_set>
    95e2:	2028      	movs	r0, #40	; 0x28
    95e4:	f7f9 fd92 	bl	310c <arch_irq_enable>
    95e8:	4620      	mov	r0, r4
    95ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95ee:	f7fb bb19 	b.w	4c24 <uarte_instance_init.constprop.0>

000095f2 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
    95f2:	b510      	push	{r4, lr}
    95f4:	2200      	movs	r2, #0
    95f6:	4604      	mov	r4, r0
    95f8:	2101      	movs	r1, #1
    95fa:	2002      	movs	r0, #2
    95fc:	f7f9 fda4 	bl	3148 <z_arm_irq_priority_set>
    9600:	2002      	movs	r0, #2
    9602:	f7f9 fd83 	bl	310c <arch_irq_enable>
    9606:	4620      	mov	r0, r4
    9608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    960c:	f7fb bb0a 	b.w	4c24 <uarte_instance_init.constprop.0>

00009610 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    9610:	4770      	bx	lr

00009612 <sys_clock_cycle_get_32>:
{
    9612:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    9614:	f7fb fc7e 	bl	4f14 <z_nrf_rtc_timer_read>
}
    9618:	bd08      	pop	{r3, pc}

0000961a <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    961a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    961c:	6843      	ldr	r3, [r0, #4]
    961e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    9620:	7a03      	ldrb	r3, [r0, #8]
    9622:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    9626:	3b01      	subs	r3, #1
    9628:	00db      	lsls	r3, r3, #3
    962a:	6845      	ldr	r5, [r0, #4]
    962c:	6814      	ldr	r4, [r2, #0]
    962e:	441d      	add	r5, r3
    9630:	42ac      	cmp	r4, r5
    9632:	d902      	bls.n	963a <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    9634:	f06f 0001 	mvn.w	r0, #1
}
    9638:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    963a:	7965      	ldrb	r5, [r4, #5]
    963c:	428d      	cmp	r5, r1
    963e:	d002      	beq.n	9646 <pinctrl_lookup_state+0x2c>
		(*state)++;
    9640:	3408      	adds	r4, #8
    9642:	6014      	str	r4, [r2, #0]
    9644:	e7f1      	b.n	962a <pinctrl_lookup_state+0x10>
			return 0;
    9646:	2000      	movs	r0, #0
    9648:	e7f6      	b.n	9638 <pinctrl_lookup_state+0x1e>

0000964a <nrf_gpio_pin_clear>:
{
    964a:	b507      	push	{r0, r1, r2, lr}
    964c:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    964e:	a801      	add	r0, sp, #4
    9650:	f7fb fe18 	bl	5284 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9654:	9a01      	ldr	r2, [sp, #4]
    9656:	2301      	movs	r3, #1
    9658:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    965a:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
    965e:	b003      	add	sp, #12
    9660:	f85d fb04 	ldr.w	pc, [sp], #4

00009664 <nrf_gpio_pin_set>:
{
    9664:	b507      	push	{r0, r1, r2, lr}
    9666:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9668:	a801      	add	r0, sp, #4
    966a:	f7fb fe0b 	bl	5284 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    966e:	9a01      	ldr	r2, [sp, #4]
    9670:	2301      	movs	r3, #1
    9672:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9674:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
    9678:	b003      	add	sp, #12
    967a:	f85d fb04 	ldr.w	pc, [sp], #4

0000967e <nrf_gpio_pin_write>:
    if (value == 0)
    967e:	b909      	cbnz	r1, 9684 <nrf_gpio_pin_write+0x6>
        nrf_gpio_pin_clear(pin_number);
    9680:	f7ff bfe3 	b.w	964a <nrf_gpio_pin_clear>
        nrf_gpio_pin_set(pin_number);
    9684:	f7ff bfee 	b.w	9664 <nrf_gpio_pin_set>

00009688 <nrf_pin_configure>:
 * @param input Pin input buffer connection.
 */
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
    9688:	b573      	push	{r0, r1, r4, r5, r6, lr}
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    968a:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    968e:	2b00      	cmp	r3, #0
{
    9690:	4604      	mov	r4, r0
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    9692:	f000 033f 	and.w	r3, r0, #63	; 0x3f
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9696:	a801      	add	r0, sp, #4
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    9698:	bf0b      	itete	eq
    969a:	4615      	moveq	r5, r2
    969c:	2501      	movne	r5, #1
    969e:	460e      	moveq	r6, r1
    96a0:	2600      	movne	r6, #0
	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
    96a2:	9301      	str	r3, [sp, #4]
    96a4:	f7fb fdee 	bl	5284 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    96a8:	9b01      	ldr	r3, [sp, #4]
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    96aa:	f3c4 1281 	ubfx	r2, r4, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    96ae:	f404 6470 	and.w	r4, r4, #3840	; 0xf00
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    96b2:	ea44 0282 	orr.w	r2, r4, r2, lsl #2
    96b6:	4332      	orrs	r2, r6
    reg->PIN_CNF[pin_number] = cnf;
    96b8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    96bc:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    96c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    96c4:	b002      	add	sp, #8
    96c6:	bd70      	pop	{r4, r5, r6, pc}

000096c8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    96c8:	b570      	push	{r4, r5, r6, lr}
    96ca:	4615      	mov	r5, r2
    96cc:	4604      	mov	r4, r0
    96ce:	eb00 0681 	add.w	r6, r0, r1, lsl #2
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    96d2:	42a6      	cmp	r6, r4
    96d4:	d101      	bne.n	96da <pinctrl_configure_pins+0x12>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    96d6:	2000      	movs	r0, #0
}
    96d8:	bd70      	pop	{r4, r5, r6, pc}
		switch (NRF_GET_FUN(pins[i])) {
    96da:	6823      	ldr	r3, [r4, #0]
    96dc:	0c1a      	lsrs	r2, r3, #16
    96de:	2a22      	cmp	r2, #34	; 0x22
    96e0:	f200 808e 	bhi.w	9800 <pinctrl_configure_pins+0x138>
    96e4:	e8df f002 	tbb	[pc, r2]
    96e8:	43241d12 	.word	0x43241d12
    96ec:	8c433929 	.word	0x8c433929
    96f0:	488c8c8c 	.word	0x488c8c8c
    96f4:	8c8c8c4d 	.word	0x8c8c8c4d
    96f8:	8c8c8c8c 	.word	0x8c8c8c8c
    96fc:	5e528c8c 	.word	0x5e528c8c
    9700:	8c8c6863 	.word	0x8c8c6863
    9704:	78736d8c 	.word	0x78736d8c
    9708:	827d      	.short	0x827d
    970a:	87          	.byte	0x87
    970b:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    970c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9710:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 1);
    9714:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_set(pin_number);
    9716:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    971a:	f7ff ffa3 	bl	9664 <nrf_gpio_pin_set>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    971e:	2201      	movs	r2, #1
    9720:	e015      	b.n	974e <pinctrl_configure_pins+0x86>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    9722:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9726:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    972a:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    972c:	2100      	movs	r1, #0
    972e:	e00f      	b.n	9750 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    9730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9734:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    9738:	e7ec      	b.n	9714 <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    973a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    973e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    9742:	6820      	ldr	r0, [r4, #0]
        nrf_gpio_pin_clear(pin_number);
    9744:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9748:	f7ff ff7f 	bl	964a <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    974c:	2200      	movs	r2, #0
    974e:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9750:	6820      	ldr	r0, [r4, #0]
    9752:	f7ff ff99 	bl	9688 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    9756:	3404      	adds	r4, #4
    9758:	e7bb      	b.n	96d2 <pinctrl_configure_pins+0xa>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    975a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    975e:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]), 0);
    9762:	6820      	ldr	r0, [r4, #0]
    9764:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    9768:	f7ff ff6f 	bl	964a <nrf_gpio_pin_clear>
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    976c:	e7d7      	b.n	971e <pinctrl_configure_pins+0x56>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    976e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9772:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9776:	e7d8      	b.n	972a <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    9778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    977c:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    9780:	e7d3      	b.n	972a <pinctrl_configure_pins+0x62>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    9782:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9786:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    978a:	e7ce      	b.n	972a <pinctrl_configure_pins+0x62>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    978c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    9790:	f8c5 3560 	str.w	r3, [r5, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    9794:	6820      	ldr	r0, [r4, #0]
    9796:	f3c0 3140 	ubfx	r1, r0, #13, #1
    979a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    979e:	f7ff ff6e 	bl	967e <nrf_gpio_pin_write>
    97a2:	e7bc      	b.n	971e <pinctrl_configure_pins+0x56>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    97a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97a8:	f8c5 3564 	str.w	r3, [r5, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    97ac:	e7f2      	b.n	9794 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    97ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97b2:	f8c5 3568 	str.w	r3, [r5, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    97b6:	e7ed      	b.n	9794 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    97b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97bc:	f8c5 356c 	str.w	r3, [r5, #1388]	; 0x56c
    97c0:	e7e8      	b.n	9794 <pinctrl_configure_pins+0xcc>
			NRF_PSEL_QSPI(reg, SCK) = NRF_GET_PIN(pins[i]);
    97c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97c6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    97ca:	2201      	movs	r2, #1
    97cc:	e7ae      	b.n	972c <pinctrl_configure_pins+0x64>
			NRF_PSEL_QSPI(reg, CSN) = NRF_GET_PIN(pins[i]);
    97ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97d2:	f8c5 3528 	str.w	r3, [r5, #1320]	; 0x528
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    97d6:	e7f8      	b.n	97ca <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO0) = NRF_GET_PIN(pins[i]);
    97d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97dc:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    97e0:	e7f3      	b.n	97ca <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO1) = NRF_GET_PIN(pins[i]);
    97e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97e6:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    97ea:	e7ee      	b.n	97ca <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO2) = NRF_GET_PIN(pins[i]);
    97ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97f0:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    97f4:	e7e9      	b.n	97ca <pinctrl_configure_pins+0x102>
			NRF_PSEL_QSPI(reg, IO3) = NRF_GET_PIN(pins[i]);
    97f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    97fa:	f8c5 353c 	str.w	r3, [r5, #1340]	; 0x53c
    97fe:	e7e4      	b.n	97ca <pinctrl_configure_pins+0x102>
		switch (NRF_GET_FUN(pins[i])) {
    9800:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9804:	e768      	b.n	96d8 <pinctrl_configure_pins+0x10>

00009806 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9806:	f7ff b9a3 	b.w	8b50 <nrf_cc3xx_platform_init_no_rng>

0000980a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    980a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    980c:	f7f9 fb46 	bl	2e9c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    9810:	f7f9 fbf8 	bl	3004 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    9814:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    9818:	f7ff b99a 	b.w	8b50 <nrf_cc3xx_platform_init_no_rng>

0000981c <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    981c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x08)
    9820:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    9824:	f1a0 0308 	sub.w	r3, r0, #8
    9828:	4258      	negs	r0, r3
    982a:	4158      	adcs	r0, r3
    982c:	4770      	bx	lr

0000982e <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    982e:	4700      	bx	r0

00009830 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    9830:	f000 b908 	b.w	9a44 <z_impl_k_busy_wait>

00009834 <nrf_gpio_pin_present_check>:
    switch (port)
    9834:	0943      	lsrs	r3, r0, #5
    9836:	d00b      	beq.n	9850 <nrf_gpio_pin_present_check+0x1c>
    uint32_t mask = 0;
    9838:	2b01      	cmp	r3, #1
    983a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    983e:	bf18      	it	ne
    9840:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    9842:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    9846:	fa23 f000 	lsr.w	r0, r3, r0
}
    984a:	f000 0001 	and.w	r0, r0, #1
    984e:	4770      	bx	lr
    switch (port)
    9850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9854:	e7f5      	b.n	9842 <nrf_gpio_pin_present_check+0xe>

00009856 <pin_is_task_output>:
{
    9856:	b508      	push	{r3, lr}
    9858:	4602      	mov	r2, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    985a:	f7fc f851 	bl	5900 <pin_is_output>
    985e:	b110      	cbz	r0, 9866 <pin_is_task_output+0x10>
    9860:	4610      	mov	r0, r2
    9862:	f7fc f837 	bl	58d4 <pin_in_use_by_te>
}
    9866:	f000 0001 	and.w	r0, r0, #1
    986a:	bd08      	pop	{r3, pc}

0000986c <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    986c:	0080      	lsls	r0, r0, #2
}
    986e:	f500 7080 	add.w	r0, r0, #256	; 0x100
    9872:	4770      	bx	lr

00009874 <nrf_gpio_reconfigure>:
{
    9874:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9878:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    987a:	a801      	add	r0, sp, #4
{
    987c:	460e      	mov	r6, r1
    987e:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    9882:	4690      	mov	r8, r2
    9884:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9886:	f7fc f8bf 	bl	5a08 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    988a:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    988c:	f1b8 0f00 	cmp.w	r8, #0
    9890:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    9894:	bf14      	ite	ne
    9896:	2302      	movne	r3, #2
    9898:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    989a:	2e00      	cmp	r6, #0
    989c:	bf18      	it	ne
    989e:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    98a2:	2d00      	cmp	r5, #0
    98a4:	bf14      	ite	ne
    98a6:	210c      	movne	r1, #12
    98a8:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    98aa:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    98ac:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    98b0:	bf14      	ite	ne
    98b2:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    98b6:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    98b8:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    98ba:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    98be:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    98c2:	bf14      	ite	ne
    98c4:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    98c8:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    98ca:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    98cc:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    98d0:	b106      	cbz	r6, 98d4 <nrf_gpio_reconfigure+0x60>
    98d2:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    98d4:	f1b8 0f00 	cmp.w	r8, #0
    98d8:	d003      	beq.n	98e2 <nrf_gpio_reconfigure+0x6e>
    98da:	f898 8000 	ldrb.w	r8, [r8]
    98de:	ea4f 0848 	mov.w	r8, r8, lsl #1
    98e2:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    98e4:	b10d      	cbz	r5, 98ea <nrf_gpio_reconfigure+0x76>
    98e6:	782d      	ldrb	r5, [r5, #0]
    98e8:	00ad      	lsls	r5, r5, #2
    98ea:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    98ee:	b10c      	cbz	r4, 98f4 <nrf_gpio_reconfigure+0x80>
    98f0:	7822      	ldrb	r2, [r4, #0]
    98f2:	0214      	lsls	r4, r2, #8
    98f4:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    98f6:	b10f      	cbz	r7, 98fc <nrf_gpio_reconfigure+0x88>
    98f8:	783f      	ldrb	r7, [r7, #0]
    98fa:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    98fc:	432c      	orrs	r4, r5
    98fe:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    9900:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    9904:	b002      	add	sp, #8
    9906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000990a <nrf_gpio_cfg_sense_set>:
{
    990a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    990c:	f10d 030f 	add.w	r3, sp, #15
    9910:	9301      	str	r3, [sp, #4]
    9912:	2300      	movs	r3, #0
{
    9914:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9918:	9300      	str	r3, [sp, #0]
    991a:	461a      	mov	r2, r3
    991c:	4619      	mov	r1, r3
    991e:	f7ff ffa9 	bl	9874 <nrf_gpio_reconfigure>
}
    9922:	b005      	add	sp, #20
    9924:	f85d fb04 	ldr.w	pc, [sp], #4

00009928 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    9928:	f7fc bbd4 	b.w	60d4 <_DoInit>

0000992c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    992c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    992e:	f7ff fffb 	bl	9928 <SEGGER_RTT_Init>

	return 0;
}
    9932:	2000      	movs	r0, #0
    9934:	bd08      	pop	{r3, pc}

00009936 <z_device_state_init>:
}
    9936:	4770      	bx	lr

00009938 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    9938:	b138      	cbz	r0, 994a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    993a:	68c3      	ldr	r3, [r0, #12]
    993c:	8818      	ldrh	r0, [r3, #0]
    993e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9942:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    9946:	4258      	negs	r0, r3
    9948:	4158      	adcs	r0, r3
}
    994a:	4770      	bx	lr

0000994c <z_log_msg2_runtime_create.constprop.0>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
    994c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	va_start(ap, fmt);
    994e:	ab0b      	add	r3, sp, #44	; 0x2c
    9950:	9305      	str	r3, [sp, #20]
    9952:	9303      	str	r3, [sp, #12]
    9954:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    9956:	9302      	str	r3, [sp, #8]
    9958:	2300      	movs	r3, #0
    995a:	e9cd 3300 	strd	r3, r3, [sp]
    995e:	2201      	movs	r2, #1
    9960:	4618      	mov	r0, r3
    9962:	f7f8 ffed 	bl	2940 <z_impl_z_log_msg2_runtime_vcreate>
}
    9966:	b007      	add	sp, #28
    9968:	f85d fb04 	ldr.w	pc, [sp], #4

0000996c <z_early_memset>:
	(void) memset(dst, c, n);
    996c:	f7ff bcff 	b.w	936e <memset>

00009970 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    9970:	f7ff bcf2 	b.w	9358 <memcpy>

00009974 <k_mem_slab_init>:
{
    9974:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    9976:	2400      	movs	r4, #0
    9978:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    997a:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    997c:	ea41 0402 	orr.w	r4, r1, r2
    9980:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    9984:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    9988:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    998a:	d10c      	bne.n	99a6 <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    998c:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    998e:	42a3      	cmp	r3, r4
    9990:	d103      	bne.n	999a <k_mem_slab_init+0x26>
	list->tail = (sys_dnode_t *)list;
    9992:	e9c0 0000 	strd	r0, r0, [r0]
}
    9996:	2000      	movs	r0, #0
}
    9998:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    999a:	6985      	ldr	r5, [r0, #24]
    999c:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    999e:	3401      	adds	r4, #1
		slab->free_list = p;
    99a0:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    99a2:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    99a4:	e7f3      	b.n	998e <k_mem_slab_init+0x1a>
		return -EINVAL;
    99a6:	f06f 0015 	mvn.w	r0, #21
	return rc;
    99aa:	e7f5      	b.n	9998 <k_mem_slab_init+0x24>

000099ac <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    99ac:	f3ef 8005 	mrs	r0, IPSR
}
    99b0:	3800      	subs	r0, #0
    99b2:	bf18      	it	ne
    99b4:	2001      	movne	r0, #1
    99b6:	4770      	bx	lr

000099b8 <k_thread_name_get>:
}
    99b8:	2000      	movs	r0, #0
    99ba:	4770      	bx	lr

000099bc <z_pm_save_idle_exit>:
{
    99bc:	b508      	push	{r3, lr}
	pm_system_resume();
    99be:	f7f9 f955 	bl	2c6c <pm_system_resume>
}
    99c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    99c6:	f7ff be23 	b.w	9610 <sys_clock_idle_exit>

000099ca <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    99ca:	f990 300e 	ldrsb.w	r3, [r0, #14]
    99ce:	428b      	cmp	r3, r1
    99d0:	d001      	beq.n	99d6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    99d2:	f7fd bffb 	b.w	79cc <z_set_prio>
}
    99d6:	2000      	movs	r0, #0
    99d8:	4770      	bx	lr

000099da <z_impl_k_mutex_init>:
{
    99da:	4603      	mov	r3, r0
	mutex->owner = NULL;
    99dc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    99de:	e9c3 0002 	strd	r0, r0, [r3, #8]
    99e2:	e9c3 3300 	strd	r3, r3, [r3]
}
    99e6:	4770      	bx	lr

000099e8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    99e8:	b13a      	cbz	r2, 99fa <z_impl_k_sem_init+0x12>
    99ea:	428a      	cmp	r2, r1
    99ec:	d305      	bcc.n	99fa <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    99ee:	e9c0 1202 	strd	r1, r2, [r0, #8]
    99f2:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    99f6:	2000      	movs	r0, #0
    99f8:	4770      	bx	lr
		return -EINVAL;
    99fa:	f06f 0015 	mvn.w	r0, #21
}
    99fe:	4770      	bx	lr

00009a00 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    9a00:	4603      	mov	r3, r0
    9a02:	b920      	cbnz	r0, 9a0e <z_reschedule_irqlock+0xe>
    9a04:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    9a08:	b90a      	cbnz	r2, 9a0e <z_reschedule_irqlock+0xe>
    9a0a:	f7f9 bbf1 	b.w	31f0 <arch_swap>
    9a0e:	f383 8811 	msr	BASEPRI, r3
    9a12:	f3bf 8f6f 	isb	sy
}
    9a16:	4770      	bx	lr

00009a18 <z_reschedule_unlocked>:
	__asm__ volatile(
    9a18:	f04f 0320 	mov.w	r3, #32
    9a1c:	f3ef 8011 	mrs	r0, BASEPRI
    9a20:	f383 8812 	msr	BASEPRI_MAX, r3
    9a24:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9a28:	f7ff bfea 	b.w	9a00 <z_reschedule_irqlock>

00009a2c <z_priq_dumb_best>:
{
    9a2c:	4603      	mov	r3, r0
	return list->head == list;
    9a2e:	6800      	ldr	r0, [r0, #0]
}
    9a30:	4283      	cmp	r3, r0
    9a32:	bf08      	it	eq
    9a34:	2000      	moveq	r0, #0
    9a36:	4770      	bx	lr

00009a38 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    9a38:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    9a3a:	f7fe fef5 	bl	8828 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    9a3e:	bd08      	pop	{r3, pc}

00009a40 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    9a40:	f7fe bef2 	b.w	8828 <sys_clock_tick_get>

00009a44 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    9a44:	b108      	cbz	r0, 9a4a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    9a46:	f7fa b9d7 	b.w	3df8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    9a4a:	4770      	bx	lr

00009a4c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    9a4c:	b510      	push	{r4, lr}
    9a4e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    9a50:	f7fe fd4a 	bl	84e8 <z_abort_timeout>

	if (inactive) {
    9a54:	b9b0      	cbnz	r0, 9a84 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    9a56:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9a58:	b10b      	cbz	r3, 9a5e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    9a5a:	4620      	mov	r0, r4
    9a5c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    9a5e:	f104 0018 	add.w	r0, r4, #24
    9a62:	f7fe f931 	bl	7cc8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    9a66:	b168      	cbz	r0, 9a84 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    9a68:	f7fd fd7c 	bl	7564 <z_ready_thread>
    9a6c:	f04f 0320 	mov.w	r3, #32
    9a70:	f3ef 8011 	mrs	r0, BASEPRI
    9a74:	f383 8812 	msr	BASEPRI_MAX, r3
    9a78:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    9a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9a80:	f7ff bfbe 	b.w	9a00 <z_reschedule_irqlock>
    9a84:	bd10      	pop	{r4, pc}

00009a86 <k_heap_init>:
{
    9a86:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
    9a88:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    9a8c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    9a90:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    9a92:	f7f7 bfff 	b.w	1a94 <sys_heap_init>
	...

00009a98 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9a98:	f7fb bc78 	b.w	538c <SystemInit>
